<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GaryMarine</title>
  
  <subtitle>Thus things flow away day and night.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lidx.club/"/>
  <updated>2018-07-22T08:03:35.762Z</updated>
  <id>https://lidx.club/</id>
  
  <author>
    <name>爷傲丶奈我何☄</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python爬虫scrapy-redis分布式</title>
    <link href="https://lidx.club/2017/07/06/Python%E7%88%AC%E8%99%ABscrapy-redis%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    <id>https://lidx.club/2017/07/06/Python爬虫scrapy-redis分布式/</id>
    <published>2017-07-06T08:38:29.000Z</published>
    <updated>2018-07-22T08:03:35.762Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zcool.cn/community/015e9f5540feeb000001e71b0a08ca.jpg@1280w_1l_2o_100sh.jpg" width="688" height="400" alt="git" align="center"></p><a id="more"></a><h1 id="Python爬虫scrapy-redis分布式"><a href="#Python爬虫scrapy-redis分布式" class="headerlink" title="Python爬虫scrapy-redis分布式"></a>Python爬虫scrapy-redis分布式</h1><p><strong>目标任务：将之前新浪网的Scrapy爬虫项目，修改为基于RedisSpider类的scrapy-redis分布式爬虫项目，将数据存入redis数据库。</strong></p><p><strong>一、item文件，和之前项目一样不需要改变</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinanewsItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># 大类的标题和url</span></span><br><span class="line">    parentTitle = scrapy.Field()</span><br><span class="line">    parentUrls = scrapy.Field()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 小类的标题和子url</span></span><br><span class="line">    subTitle = scrapy.Field()</span><br><span class="line">    subUrls = scrapy.Field()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 小类目录存储路径</span></span><br><span class="line">    subFilename = scrapy.Field()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 小类下的子链接</span></span><br><span class="line">    sonUrls = scrapy.Field()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 文章标题和内容</span></span><br><span class="line">    head = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br></pre></td></tr></table></figure><p><strong>二、spiders爬虫文件，使用RedisSpider类替换之前的Spider类，其余地方做些许改动即可，具体代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> sinaNews.items <span class="keyword">import</span> SinanewsItem</span><br><span class="line"><span class="keyword">from</span> scrapy_redis.spiders <span class="keyword">import</span> RedisSpider</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinaSpider</span><span class="params">(RedisSpider)</span>:</span></span><br><span class="line">    name = <span class="string">"sina"</span></span><br><span class="line">    <span class="comment"># 启动爬虫的命令</span></span><br><span class="line">    redis_key = <span class="string">"sinaspider:strat_urls"</span></span><br><span class="line">　　<span class="comment"># 动态定义爬虫爬取域范围</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        domain = kwargs.pop(<span class="string">'domain'</span>, <span class="string">''</span>)</span><br><span class="line">        self.allowed_domains = filter(<span class="keyword">None</span>, domain.split(<span class="string">','</span>))</span><br><span class="line">        super(SinaSpider, self).__init__(*args, **kwargs)</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        items= []</span><br><span class="line">        <span class="comment"># 所有大类的url 和 标题</span></span><br><span class="line">        parentUrls = response.xpath(<span class="string">'//div[@id="tab01"]/div/h3/a/@href'</span>).extract()</span><br><span class="line">        parentTitle = response.xpath(<span class="string">'//div[@id="tab01"]/div/h3/a/text()'</span>).extract()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 所有小类的ur 和 标题</span></span><br><span class="line">        subUrls  = response.xpath(<span class="string">'//div[@id="tab01"]/div/ul/li/a/@href'</span>).extract()</span><br><span class="line">        subTitle = response.xpath(<span class="string">'//div[@id="tab01"]/div/ul/li/a/text()'</span>).extract()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#爬取所有大类</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(parentTitle)):</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 爬取所有小类</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(subUrls)):</span><br><span class="line">                item = SinanewsItem()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 保存大类的title和urls</span></span><br><span class="line">                item[<span class="string">'parentTitle'</span>] = parentTitle[i]</span><br><span class="line">                item[<span class="string">'parentUrls'</span>] = parentUrls[i]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 检查小类的url是否以同类别大类url开头，如果是返回True (sports.sina.com.cn 和 sports.sina.com.cn/nba)</span></span><br><span class="line">                if_belong = subUrls[j].startswith(item[<span class="string">'parentUrls'</span>])</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 如果属于本大类，将存储目录放在本大类目录下</span></span><br><span class="line">                <span class="keyword">if</span>(if_belong):</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 存储 小类url、title和filename字段数据</span></span><br><span class="line">                    item[<span class="string">'subUrls'</span>] = subUrls[j]</span><br><span class="line">                    item[<span class="string">'subTitle'</span>] =subTitle[j]</span><br><span class="line">                    items.append(item)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#发送每个小类url的Request请求，得到Response连同包含meta数据 一同交给回调函数 second_parse 方法处理</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request( url = item[<span class="string">'subUrls'</span>], meta=&#123;<span class="string">'meta_1'</span>: item&#125;, callback=self.second_parse)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#对于返回的小类的url，再进行递归请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">second_parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># 提取每次Response的meta数据</span></span><br><span class="line">        meta_1= response.meta[<span class="string">'meta_1'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 取出小类里所有子链接</span></span><br><span class="line">        sonUrls = response.xpath(<span class="string">'//a/@href'</span>).extract()</span><br><span class="line"></span><br><span class="line">        items= []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(sonUrls)):</span><br><span class="line">            <span class="comment"># 检查每个链接是否以大类url开头、以.shtml结尾，如果是返回True</span></span><br><span class="line">            if_belong = sonUrls[i].endswith(<span class="string">'.shtml'</span>) <span class="keyword">and</span> sonUrls[i].startswith(meta_1[<span class="string">'parentUrls'</span>])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果属于本大类，获取字段值放在同一个item下便于传输</span></span><br><span class="line">            <span class="keyword">if</span>(if_belong):</span><br><span class="line">                item = SinanewsItem()</span><br><span class="line">                item[<span class="string">'parentTitle'</span>] =meta_1[<span class="string">'parentTitle'</span>]</span><br><span class="line">                item[<span class="string">'parentUrls'</span>] =meta_1[<span class="string">'parentUrls'</span>]</span><br><span class="line">                item[<span class="string">'subUrls'</span>] = meta_1[<span class="string">'subUrls'</span>]</span><br><span class="line">                item[<span class="string">'subTitle'</span>] = meta_1[<span class="string">'subTitle'</span>]</span><br><span class="line">                item[<span class="string">'sonUrls'</span>] = sonUrls[i]</span><br><span class="line">                items.append(item)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#发送每个小类下子链接url的Request请求，得到Response后连同包含meta数据 一同交给回调函数 detail_parse 方法处理</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">                <span class="keyword">yield</span> scrapy.Request(url=item[<span class="string">'sonUrls'</span>], meta=&#123;<span class="string">'meta_2'</span>:item&#125;, callback = self.detail_parse)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据解析方法，获取文章标题和内容</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        item = response.meta[<span class="string">'meta_2'</span>]</span><br><span class="line">        content = <span class="string">""</span></span><br><span class="line">        head = response.xpath(<span class="string">'//h1[@id="main_title"]/text()'</span>)</span><br><span class="line">        content_list = response.xpath(<span class="string">'//div[@id="artibody"]/p/text()'</span>).extract()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将p标签里的文本内容合并到一起</span></span><br><span class="line">        <span class="keyword">for</span> content_one <span class="keyword">in</span> content_list:</span><br><span class="line">            content += content_one</span><br><span class="line"></span><br><span class="line">        item[<span class="string">'head'</span>]= head[<span class="number">0</span>] <span class="keyword">if</span> len(head) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">"NULL"</span></span><br><span class="line">        item[<span class="string">'content'</span>]= content</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><p><strong>三、settings文件设置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">SPIDER_MODULES = [<span class="string">'sinaNews.spiders'</span>]</span><br><span class="line">NEWSPIDER_MODULE = <span class="string">'sinaNews.spiders'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用scrapy-redis里的去重组件，不使用scrapy默认的去重方式</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">"scrapy_redis.dupefilter.RFPDupeFilter"</span></span><br><span class="line"><span class="comment"># 使用scrapy-redis里的调度器组件，不使用默认的调度器</span></span><br><span class="line">SCHEDULER = <span class="string">"scrapy_redis.scheduler.Scheduler"</span></span><br><span class="line"><span class="comment"># 允许暂停，redis请求记录不丢失</span></span><br><span class="line">SCHEDULER_PERSIST = <span class="keyword">True</span></span><br><span class="line"><span class="comment"># 默认的scrapy-redis请求队列形式（按优先级）</span></span><br><span class="line">SCHEDULER_QUEUE_CLASS = <span class="string">"scrapy_redis.queue.SpiderPriorityQueue"</span></span><br><span class="line"><span class="comment"># 队列形式，请求先进先出</span></span><br><span class="line"><span class="comment">#SCHEDULER_QUEUE_CLASS = "scrapy_redis.queue.SpiderQueue"</span></span><br><span class="line"><span class="comment"># 栈形式，请求先进后出</span></span><br><span class="line"><span class="comment">#SCHEDULER_QUEUE_CLASS = "scrapy_redis.queue.SpiderStack"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只是将数据放到redis数据库，不需要写pipelines文件</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line"><span class="comment">#    'Sina.pipelines.SinaPipeline': 300,</span></span><br><span class="line">    <span class="string">'scrapy_redis.pipelines.RedisPipeline'</span>: <span class="number">400</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># LOG_LEVEL = 'DEBUG'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Introduce an artifical delay to make use of parallelism. to speed up the</span></span><br><span class="line"><span class="comment"># crawl.</span></span><br><span class="line">DOWNLOAD_DELAY = <span class="number">1</span></span><br><span class="line"><span class="comment"># 指定数据库的主机IP</span></span><br><span class="line">REDIS_HOST = <span class="string">"192.168.13.26"</span></span><br><span class="line"><span class="comment"># 指定数据库的端口号</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br></pre></td></tr></table></figure><p><strong>执行命令：</strong></p><p><strong>本次直接使用本地的redis数据库，将settings文件中的REDIS_HOST和REDIS_PORT注释掉。</strong></p><p><strong>启动爬虫程序</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scrapy</span> <span class="selector-tag">runspider</span> <span class="selector-tag">sina</span><span class="selector-class">.py</span></span><br></pre></td></tr></table></figure><p><strong>表示程序处于等待状态，此时在redis数据库端执行如下命令：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli&gt; lpush sinaspider:start_urls http://news.sina.com.cn/guide/</span><br></pre></td></tr></table></figure><p><strong><a href="http://news.sina.com.cn/guide/为起始url，此时程序开始执行。" target="_blank" rel="noopener">http://news.sina.com.cn/guide/为起始url，此时程序开始执行。</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/015e9f5540feeb000001e71b0a08ca.jpg@1280w_1l_2o_100sh.jpg&quot; width=&quot;688&quot; height=&quot;400&quot; alt=&quot;git&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://lidx.club/categories/Python/"/>
    
    
      <category term="scrapy-redis" scheme="https://lidx.club/tags/scrapy-redis/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy爬取股票数据</title>
    <link href="https://lidx.club/2017/07/04/Scrapy%E7%88%AC%E5%8F%96%E8%82%A1%E7%A5%A8%E6%95%B0%E6%8D%AE/"/>
    <id>https://lidx.club/2017/07/04/Scrapy爬取股票数据/</id>
    <published>2017-07-04T14:18:15.000Z</published>
    <updated>2018-07-22T08:05:34.563Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zcool.cn/community/01573e55458b000000019ae9d2c007.jpg@1280w_1l_2o_100sh.jpg" width="688" height="400" alt="git" align="center"></p><a id="more"></a><p>@概述</p><ul><li>用scrapy框架爬取股票数据实例</li><li>将同花顺中融资融券中的几只个股的历史数据爬下来，并保存为csv文件（csv格式是数据分析最友好的格式）</li><li>使用到了pileline和中间件middleware</li></ul><p>@创建工程</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scrapy</span> <span class="selector-tag">startproject</span> <span class="selector-tag">mystockspider</span></span><br></pre></td></tr></table></figure><p>@工程结构简介</p><ul><li>mystocks/ 工程根目录</li><li>mystocks/mystocks/ 工程代码存放目录</li><li>scrapy.cfg 部署文件</li><li>mystocks/mystocks/spiders/ 爬虫源文件存放目录</li><li>mystocks/mystocks/items.py 数据模型模块</li><li>mystocks/mystocks/pipelines.py 数据模型处理模块</li><li>mystocks/mystocks/middlewares.py 下载中间件模块</li><li>mystocks/mystocks/settings.py 设置模块</li></ul><p>@在items.py中创建数据模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 个股数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StockItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 股票名称</span></span><br><span class="line">    name = scrapy.Field()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 股票详细信息</span></span><br><span class="line">    data = scrapy.Field()</span><br></pre></td></tr></table></figure><p>@在spiders/目录下创建爬虫源代码my_stock_spider.py</p><ul><li>源文件名称和类名称都是任意的</li><li>name属性所定义的爬虫名称，将来启动爬虫的命令会使用到</li><li>start_urls是爬虫开始工作的起始页</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义爬虫类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStockSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义爬虫名称（命令行启动爬虫要用）</span></span><br><span class="line">    name = <span class="string">'mystockspider'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义起始 url</span></span><br><span class="line">    start_urls = [<span class="string">'http://stock.10jqka.com.cn/'</span>]</span><br></pre></td></tr></table></figure><p>@定义起始页响应的处理函数parse</p><ul><li>这里的parse函数的名称和参数都是固定的写法，不可改变，可以在IDE中直接通过插入覆写方法实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 响应处理函数</span></span><br><span class="line"><span class="comment"># response为start_url所返回的响应对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br></pre></td></tr></table></figure><p>@首页响应函数的具体实现</p><ul><li>这里要做的事情就是从页面超链接中提取出【个股名称】和【详情页超链接】</li><li>xpath规则请参见：<a href="http://blog.csdn.net/u010986776/article/details/79250788" target="_blank" rel="noopener">http://blog.csdn.net/u010986776/article/details/79250788</a></li><li>向每支个股详情页分别发起请求</li><li>详情页的响应将由一个自定义的handle_detail方法来处理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 响应处理函数</span></span><br><span class="line"><span class="comment"># response为start_url所返回的响应对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取页面个股超链接</span></span><br><span class="line">    a_list = response.xpath(<span class="string">"//div[@id='rzrq']/table[@class='m-table']/tbody/tr/td[2]/a"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历所有超链接</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> a_list :</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取股票名称、下载数据的url</span></span><br><span class="line">        gp_name = a.xpath(<span class="string">"./text()"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        link = a.xpath(<span class="string">"./@href"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        gp_id = link.split(<span class="string">'/'</span>)[<span class="number">-2</span>]</span><br><span class="line">        print(<span class="string">"gp_id : "</span>, gp_id)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 以个股名称作为文件名称，建立或清空一下文件</span></span><br><span class="line">        file_name = <span class="string">"./files/"</span> + gp_name + <span class="string">".csv"</span></span><br><span class="line">        <span class="keyword">with</span> open(file_name,<span class="string">"w"</span>):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 针对每只个股发起爬取子链接的请求</span></span><br><span class="line">        <span class="comment"># 对子链接的处理交由download_data函数进行处理</span></span><br><span class="line">        <span class="comment"># meta = 转交子链接处理函数所处理的数据</span></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(</span><br><span class="line">            url=link,</span><br><span class="line">            callback=self.handle_detail,</span><br><span class="line">            meta=&#123;<span class="string">'page'</span>: <span class="number">1</span>, <span class="string">'url_base'</span>: link, <span class="string">'name'</span>: gp_name,<span class="string">'id'</span>:gp_id&#125;</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>@实现详情页的处理函数handle_detail</p><ul><li>详情页是一个分页数据，每一页的处理逻辑是相同的</li><li>即提取表格数据，逐行添加到数据模型中</li><li>提交数据模型给pipeline做后续处理</li><li>最后向下一页继续发起请求，请求的回调处理函数依然为当前函数</li><li>注意：这里由于递归调用了自身，一定要有终止条件，本例的终止条件是爬满三页即止</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理个股子链接返回的响应</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_detail</span><span class="params">(self, response)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造数据模型</span></span><br><span class="line">    item = StockItem()</span><br><span class="line">    item[<span class="string">'name'</span>] = response.meta[<span class="string">'name'</span>]</span><br><span class="line">    item[<span class="string">'data'</span>] = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取出所有行，然后逐行提取所有单元格中的数据</span></span><br><span class="line">    <span class="comment"># 将数据保存到数据模型</span></span><br><span class="line">    tr_list = response.xpath(<span class="string">"//table[@class='m-table']/tbody/tr"</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> tr_list:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取所有单元格中的数据，以英文逗号连接</span></span><br><span class="line">        text_list = tr.xpath(<span class="string">"./td/text()"</span>).extract()</span><br><span class="line">        onerow = <span class="string">','</span>.join( [text.strip() <span class="keyword">for</span> text <span class="keyword">in</span> text_list] )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 存储数据到item</span></span><br><span class="line">        item[<span class="string">'data'</span>] += onerow+<span class="string">"\n"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提交数据模型给pipeline处理</span></span><br><span class="line">    <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 爬取个股分页数据，最多爬取3页</span></span><br><span class="line">    response.meta[<span class="string">'page'</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> response.meta[<span class="string">'page'</span>] &gt; <span class="number">3</span> :</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 不再提交新的请求,爬虫结束</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 组装个股分页数据url</span></span><br><span class="line">    url_str = <span class="string">'http://data.10jqka.com.cn/market/rzrqgg/code/'</span>+response.meta[<span class="string">'id'</span>]+<span class="string">'/order/desc/page/'</span> + str(response.meta[<span class="string">'page'</span>]) + <span class="string">'/ajax/1/'</span></span><br><span class="line">    print(<span class="string">"url_str = "</span>, url_str)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 稍事休息后，爬取下一页数据，仍交由当前函数处理</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">yield</span> scrapy.Request(</span><br><span class="line">        url=url_str,</span><br><span class="line">        callback=self.handle_detail,</span><br><span class="line">        meta=&#123;<span class="string">'page'</span>: response.meta[<span class="string">'page'</span>], <span class="string">'url_base'</span>: url_str, <span class="string">'name'</span>: response.meta[<span class="string">'name'</span>],<span class="string">'id'</span>:response.meta[<span class="string">'id'</span>]&#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>@在pipelines.py中定义数据模型处理类</p><ul><li>这里的主要处理逻辑在process_item覆写方法中，</li><li>这里的处理逻辑很简单，就是把数据模型中的数据写入对应的文件</li><li>结尾处return了数据模型item，return给谁呢，答案是下一个pipeliine，如果有的话</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理spider返回的item对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StockSavingPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"\n"</span>*<span class="number">5</span>,<span class="string">"StockSavingPipeline __init__"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理spider返回的item对象</span></span><br><span class="line">    <span class="comment"># item = 爬虫提交过来的数据模型</span></span><br><span class="line">    <span class="comment"># spider = 提交item的爬虫实例</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        print(<span class="string">"\n"</span> * <span class="number">5</span>, <span class="string">"StockSavingPipeline process_item"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取数据</span></span><br><span class="line">        data = item[<span class="string">'data'</span>]</span><br><span class="line">        file_name = <span class="string">"./files/"</span>+item[<span class="string">'name'</span>]+<span class="string">".csv"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 向文件中写入数据</span></span><br><span class="line">        <span class="keyword">with</span> open(file_name,<span class="string">"a"</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果有多个pipeline，继续向下一个pipeline传递</span></span><br><span class="line">        <span class="comment"># 不返回则传递终止</span></span><br><span class="line">        <span class="comment"># 这里主要体现一个分工、分批处理的思想</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对象被销毁时调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"\n"</span> * <span class="number">5</span>, <span class="string">"StockSavingPipeline __del__"</span>)</span><br></pre></td></tr></table></figure><p>@告诉框架爬虫提交的数据对象由谁处理，这里有两种设置方式</p><ul><li>方式1：设置在settings.py中</li><li>这里设置了多个pipeline处理类，所有爬虫类提交的所有item都会经过所有这些pipeline类</li><li>这些pipeline的处理顺序是从小到大的，即100的会先处理，200的后处理，其取值范围是0-1000</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'myspider.pipelines.WbtcPipeline'</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">'myspider.pipelines.WbtcPipeline_2'</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">'myspider.pipelines.StockSavingPipeline'</span>: <span class="number">100</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方式2：设置在爬虫类中，本例即MyStockSpider类中</li><li>直接设置在爬虫类中，其优先级要高于设置在settings.py中</li><li>这个规则对于后面对于下载中间件的配置也同样适用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明使用哪些pipelines和下载中间件</span></span><br><span class="line"><span class="comment"># 这里设置的优先级要高于settings.py文件</span></span><br><span class="line">custom_settings = &#123;</span><br><span class="line">    <span class="string">'ITEM_PIPELINES'</span>:&#123;<span class="string">'myspider.pipelines.StockSavingPipeline'</span>:<span class="number">100</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@配置下载中间件</p><ul><li>下载中间件的作用是对请求和响应进行预处理</li><li>比如对所有请求添加随机的User-Agent</li><li>比如对所有请求随机配置代理IP</li><li>其配置同样有两种方式：配置在settings.py中或配置在爬虫类中，后者的优先级要高于前者</li><li>settings.py中的配置如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置下载中间件</span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="comment"># 'myspider.middlewares.MyCustomDownloaderMiddleware': 543,</span></span><br><span class="line">    <span class="string">'myspider.middlewares.ProxyMiddleware'</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>爬虫类中的配置如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明使用哪些pipelines和下载中间件</span></span><br><span class="line"><span class="comment"># 这里设置的优先级要高于settings.py文件</span></span><br><span class="line">custom_settings = &#123;</span><br><span class="line">    <span class="string">'ITEM_PIPELINES'</span>:&#123;<span class="string">'myspider.pipelines.StockSavingPipeline'</span>:<span class="number">100</span>&#125;,</span><br><span class="line">    <span class="string">'DOWNLOADER_MIDDLEWARES'</span>:&#123;<span class="string">'myspider.middlewares.ProxyMiddleware'</span>: <span class="number">543</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@实现下载中间件</p><ul><li>这里实现对所有请求添加随机请求头和IP代理</li><li>由于中间件同样也是可以配置多个，串联成链式结构的，所以return的标的下一个中间件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对请求进行预处理</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        print(<span class="string">"\n"</span> * <span class="number">5</span>, <span class="string">"ProxyMiddleware process_request"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 随机选择USER_AGENTS</span></span><br><span class="line">        <span class="comment"># 设置 request 对象的头部信息</span></span><br><span class="line">        user_agent = random.choice(USER_AGENTS)</span><br><span class="line">        <span class="comment"># request.headers.setdefault("User-Agent", user_agent)</span></span><br><span class="line">        request.headers[<span class="string">"User-Agent"</span>] = user_agent</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 随机选择 代理ip</span></span><br><span class="line">        <span class="comment"># 设置 request 代理 ip</span></span><br><span class="line">        ip = <span class="string">'http://'</span> + random.choice(PROXY_IP)</span><br><span class="line">        <span class="comment"># print('user_agent ========== ' + user_agent)</span></span><br><span class="line">        print(<span class="string">'Proxy ip ===== '</span> + ip)</span><br><span class="line">        request.meta[<span class="string">'proxy'</span>] = ip</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这里如果return这个request会陷入死循环</span></span><br><span class="line">        <span class="comment"># return request</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对响应进行预处理</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response, spider)</span>:</span></span><br><span class="line">        print(<span class="string">"\n"</span> * <span class="number">5</span>, <span class="string">"ProxyMiddleware process_response"</span>)</span><br><span class="line"></span><br><span class="line">        print(request.headers)</span><br><span class="line">        print(request.meta)</span><br><span class="line">        <span class="comment"># print(request.url)</span></span><br><span class="line">        <span class="comment"># print(response.status)</span></span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>@命令行中跑起来，爬虫就会源源不断地开始爬了</p><ul><li>这里要提前cd到爬虫工程的根目录</li><li>如果在linux环境下，可以在前面加sudo，可以避免一些没必要的稀奇古怪的错误</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scrapy</span> <span class="selector-tag">crawl</span> <span class="selector-tag">mystockspider</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01573e55458b000000019ae9d2c007.jpg@1280w_1l_2o_100sh.jpg&quot; width=&quot;688&quot; height=&quot;400&quot; alt=&quot;git&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://lidx.club/categories/Python/"/>
    
    
      <category term="Scrapy" scheme="https://lidx.club/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>selenium + chromedriver</title>
    <link href="https://lidx.club/2017/07/01/selenium%20+%20chromedriver/"/>
    <id>https://lidx.club/2017/07/01/selenium + chromedriver/</id>
    <published>2017-07-01T13:56:44.000Z</published>
    <updated>2018-07-22T08:11:47.244Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zcool.cn/community/01eb9d56497e4d32f87512f6811476.jpg@1280w_1l_2o_100sh.webp" width="688" height="400" alt="git" align="center"></p><a id="more"></a><p>@概述</p><ul><li>通常各大网站的后台都会有一定的反爬机制，既为了数据安全，也为了减小服务器压力</li><li>通常反爬的手段的方向，都是识别非浏览器客户端，而selenium所做的事情，恰恰是驱动真正的浏览器去执行请求和操作，只不过信号不是来源于鼠标，而是来源于selenium的API（selenium本是一个自动化的测试工具）</li><li>自然人用户能做的一切，selenium几乎都驱动浏览器取做，无论是否有界面，包括输入、点击、滑动，等等</li><li>然而到底是鼠标操作的浏览器发起的请求还是API，对于服务端来说，是没有任何差别的</li></ul><p>@一些掌故</p><ul><li><p>早些的时候流行的组合并不是selenium+chrome浏览器驱动，而是selenium+phantomjs</p></li><li><p>phantomjs是一款没有界面的浏览器，业界称作无头浏览器（headless），由于没有界面和渲染，其运行速度要大大优于有界面的浏览器，这恰恰是爬虫喜欢的，因此红极一时</p></li><li><p>后来chrome和火狐推出了无头模式，且运行速度很流畅，phantomjs已然寿终正寝，因此我们表过不提</p><p>@开发环境的搭建（基于ubuntu）</p></li><li><p>安装selenium：sudo pip install selenium</p></li><li><p>如果没有则安装chrome浏览器（尽量更新到58以上）：<a href="http://www.linuxidc.com/Linux/2016-05/131096.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2016-05/131096.htm</a></p></li><li><p>安装chrome浏览器驱动（注意最新版本尾号是29而非9）：<a href="https://www.cnblogs.com/Lin-Yi/p/7658001.html" target="_blank" rel="noopener">https://www.cnblogs.com/Lin-Yi/p/7658001.html</a></p></li></ul><p>@导包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入selenium的浏览器驱动接口</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要想调用键盘按键操作需要引入keys包</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入chrome选项</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br></pre></td></tr></table></figure><p>@第一个程序：抓取页面内容，生成页面快照</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建chrome浏览器驱动，无头模式（超爽）</span></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">driver = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载百度页面</span></span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com/"</span>)</span><br><span class="line"><span class="comment"># time.sleep(3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面名为wrapper的id标签的文本内容</span></span><br><span class="line">data = driver.find_element_by_id(<span class="string">"wrapper"</span>).text</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印页面标题 "百度一下，你就知道"</span></span><br><span class="line">print(driver.title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成当前页面快照并保存</span></span><br><span class="line">driver.save_screenshot(<span class="string">"baidu.png"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>@模拟用户输入和点击搜索，跟真人操作一样！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get方法会一直等到页面被完全加载，然后才会继续程序，通常测试会在这里选择 time.sleep(2)</span></span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com/"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># id="kw"是百度搜索输入框，输入字符串"程序猿"</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(<span class="string">u"程序猿"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># id="su"是百度搜索按钮，click() 是模拟点击</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"su"</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取新的页面快照</span></span><br><span class="line">driver.save_screenshot(<span class="string">"程序猿.png"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印网页渲染后的源代码</span></span><br><span class="line">print(driver.page_source)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前页面Cookie</span></span><br><span class="line">print(driver.get_cookies())</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl+a 全选输入框内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(Keys.CONTROL, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl+x 剪切输入框内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(Keys.CONTROL, <span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入框重新输入内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(<span class="string">"美女"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟Enter回车键</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"su"</span>).send_keys(Keys.RETURN)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除输入框内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).clear()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成新的页面快照</span></span><br><span class="line">driver.save_screenshot(<span class="string">"美女.png"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前url</span></span><br><span class="line">print(driver.current_url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>@模拟用户登录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载微博登录页</span></span><br><span class="line">driver.get(<span class="string">"http://passport.weibo.cn/signin/login?entry=mweibo&amp;r=http%3A%2F%2Fweibo.cn%2F&amp;backTitle=%CE%A2%B2%A9&amp;vt="</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到输入框，键入用户名和密码</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'loginName'</span>).send_keys(<span class="string">"worio.hainan@163.com"</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">'loginPassword'</span>).send_keys(<span class="string">"Qq94313805"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点击登录按钮</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'loginAction'</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快照显示已经成功登录</span></span><br><span class="line">print(driver.save_screenshot(<span class="string">'jietu.png'</span>))</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>@使用cookies登录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载知乎主页，查看快照知此时处于未登录状态</span></span><br><span class="line">driver.get(<span class="string">"https://www.zhihu.com"</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">print(driver.save_screenshot(<span class="string">"zhihu_nocookies.png"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 操作浏览器登录知乎并抓包cookies</span></span><br><span class="line">zhihu_cookies = &#123;</span><br><span class="line">    <span class="comment"># 'aliyungf_tc' : 'AQAAAAR4YFOeswAAnLFJcVRd4MKOTTXu',</span></span><br><span class="line">    <span class="string">'l_n_c'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'q_c1'</span>: <span class="string">'8572377703ba49138d30d4b9beb30aed|1514626811000|1514626811000'</span>,</span><br><span class="line">    <span class="string">'r_cap_id'</span>: <span class="string">'MTc5M2Y0ODUzMjc0NDMzNmFkNTAzZDBjZTQ4N2EyMTc=|1514626811|a97b2ab0453d6f77c6cdefe903fd649ee8531807'</span>,</span><br><span class="line">    <span class="string">'cap_id'</span>: <span class="string">'YjQyZTEwOWM4ODlkNGE1MzkwZTk3NmI5ZGU0ZTY2YzM=|1514626811|d423a17b8d165c8d1b570d64bc98c185d5264b9a'</span>,</span><br><span class="line">    <span class="string">'l_cap_id'</span>: <span class="string">'MGE0NjFjM2QxMzZiNGE1ZWFjNjhhZmVkZWQwYzBkZjY=|1514626811|a1eb9f2b9910285350ba979681ca804bd47f12ca'</span>,</span><br><span class="line">    <span class="string">'n_c'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'d_c0'</span>: <span class="string">'AKChpGzG6QyPThyDpmyPhXaV-B9_IYyFspc=|1514626811'</span>,</span><br><span class="line">    <span class="string">'_xsrf'</span>: <span class="string">'ed7cbc18-03dd-47e9-9885-bbc1c634d10f'</span>,</span><br><span class="line">    <span class="string">'capsion_ticket'</span>: <span class="string">'2|1:0|10:1514626813|14:capsion_ticket|44:NWY5Y2M0ZGJiZjFlNDdmMzlkYWE0YmNjNjA4MTRhMzY=|6cf7562d6b36288e86afaea5339b31f1dab2921d869ee45fa06d155ea3504fe1'</span>,</span><br><span class="line">    <span class="string">'_zap'</span>: <span class="string">'3290e12b-64dc-4dae-a910-a32cc6e26590'</span>,</span><br><span class="line">    <span class="string">'z_c0'</span>: <span class="string">'2|1:0|10:1514626827|4:z_c0|92:Mi4xYm4wY0FRQUFBQUFBb0tHa2JNYnBEQ1lBQUFCZ0FsVk5DNjAwV3dCb2xMbEhxc1FTcEJPenpPLWlqSS1qNm5KVEFR|d89c27ab659ba979a977e612803c2c886ab802adadcf70bcb95dc1951bdfaea5'</span>,</span><br><span class="line">    <span class="string">'__utma'</span>: <span class="string">'51854390.2087017282.1514626889.1514626889.1514626889.1'</span>,</span><br><span class="line">    <span class="string">'__utmb'</span>: <span class="string">'51854390.0.10.1514626889'</span>,</span><br><span class="line">    <span class="string">'__utmc'</span>: <span class="string">'51854390'</span>,</span><br><span class="line">    <span class="string">'__utmz'</span>: <span class="string">'51854390.1514626889.1.1.utmcsr=zhihu.com|utmccn=(referral)|utmcmd=referral|utmcct=/'</span>,</span><br><span class="line">    <span class="string">'__utmv'</span>: <span class="string">"51854390.100--|2=registration_date=20150408=1'3=entry_date=20150408=1"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户登录产生的cookies全部添加到当前会话</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> zhihu_cookies.items():</span><br><span class="line">    driver.add_cookie(&#123;<span class="string">'domain'</span>: <span class="string">'.zhihu.com'</span>, <span class="string">'name'</span>: k, <span class="string">'value'</span>: v&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次访问知乎主页并拍照，此时已经是登录状态了</span></span><br><span class="line">driver.get(<span class="string">"https://www.zhihu.com"</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">print(driver.save_screenshot(<span class="string">"zhihu_cookies.png"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>@模拟滚动条的滚动（这个用常规的爬虫很难实现）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载知乎主页</span></span><br><span class="line">driver.get(<span class="string">"https://www.zhihu.com"</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载本地cookies实现登录</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> zhihu_cookies.items():</span><br><span class="line">    driver.add_cookie(&#123;<span class="string">'domain'</span>: <span class="string">'.zhihu.com'</span>, <span class="string">'name'</span>: k, <span class="string">'value'</span>: v&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以登录状态再次发起访问</span></span><br><span class="line">driver.get(<span class="string">"https://www.zhihu.com"</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将页面滚动到最后，执行多次</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    js = <span class="string">"var q=document.documentElement.scrollTop=10000"</span></span><br><span class="line">    driver.execute_script(js)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 截图并退出，页面侧边滚动条已经下滑了许多像素</span></span><br><span class="line">print(driver.save_screenshot(<span class="string">"zhihu_scroll.png"</span>))</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>@一边滚动一边加载</p><ul><li>唯品会首页的女装图片，是一边滚动一边进行ajax异步加载的</li><li>这个靠常规的抓包实现起来很麻烦</li><li>使用selenium我们只需模拟用户多次下拉滚动条，一段时间之后再重新拿取渲染好的页面源码，就可以像爬取静态页面那样去爬取图片了</li><li>类似这种操作，其实质就是开挂，是几乎无法防守的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 唯品会女装图片链接无法直接获得</span></span><br><span class="line"><span class="comment"># 请求唯品会页面</span></span><br><span class="line">driver.get(<span class="string">"https://category.vip.com/search-3-0-1.html?q=3|30036||&amp;rp=30074|30063&amp;ff=women|0|2|2&amp;adidx=1&amp;f=ad&amp;adp=65001&amp;adid=326630"</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐渐滚动浏览器窗口，令ajax逐渐加载</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    js = <span class="string">"var q=document.body.scrollTop="</span> + str(<span class="number">500</span> * i)  <span class="comment"># PhantomJS</span></span><br><span class="line">    js = <span class="string">"var q=document.documentElement.scrollTop="</span> + str(<span class="number">500</span> * i)  <span class="comment"># 谷歌 和 火狐</span></span><br><span class="line"></span><br><span class="line">    driver.execute_script(js)</span><br><span class="line">    print(<span class="string">'====================================='</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到页面源码</span></span><br><span class="line">html = etree.HTML(driver.page_source)</span><br><span class="line">all_img_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到所有图片</span></span><br><span class="line">img_group_list = html.xpath(<span class="string">"//img[contains(@id,'J_pic')]"</span>)</span><br><span class="line"><span class="comment"># img_group_list = html.xpath("//img[starts-with(@id,'J_pic')]")</span></span><br><span class="line"><span class="comment"># 正则表达式匹配</span></span><br><span class="line"><span class="comment"># img_group_list = html.xpath(r'//img[re:match(@id, "J_pic*")]',namespaces=&#123;"re": "http://exslt.org/regular-expressions"&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 收集所有图片链接到列表</span></span><br><span class="line"><span class="keyword">for</span> img_group <span class="keyword">in</span> img_group_list:</span><br><span class="line">    img_of_group = img_group.xpath(<span class="string">".//@data-original | .//@data-img-back | .//@data-img-side"</span>)</span><br><span class="line">    print(img_of_group)</span><br><span class="line">    all_img_list.append(<span class="string">'\n'</span>.join(img_of_group) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将收集到的数据写入文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'vip.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'\n'</span>.join(all_img_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01eb9d56497e4d32f87512f6811476.jpg@1280w_1l_2o_100sh.webp&quot; width=&quot;688&quot; height=&quot;400&quot; alt=&quot;git&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://lidx.club/categories/Python/"/>
    
    
      <category term="selenium" scheme="https://lidx.club/tags/selenium/"/>
    
      <category term="chromedriver" scheme="https://lidx.club/tags/chromedriver/"/>
    
  </entry>
  
  <entry>
    <title>selenium</title>
    <link href="https://lidx.club/2017/06/29/selenium/"/>
    <id>https://lidx.club/2017/06/29/selenium/</id>
    <published>2017-06-29T06:28:12.000Z</published>
    <updated>2018-07-18T15:39:27.184Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zcool.cn/community/01fcd05b323a25a80121b994c85776.jpg@1280w_1l_2o_100sh.webp" width="688" height="400" alt="git" align="center"></p><a id="more"></a><h1 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- IE11的Webdriver下载：</span><br><span class="line"></span><br><span class="line">http://dl.pconline.com.cn/download/<span class="number">771640</span><span class="number">-1.</span>html</span><br><span class="line"></span><br><span class="line">链接：https://pan.baidu.com/s/<span class="number">13</span>TTyXGNaG5cpSNdl1k9ksQ 密码：<span class="number">2</span>n9n</span><br><span class="line"></span><br><span class="line">- Chrome65<span class="number">.0</span><span class="number">.3325</span><span class="number">.146</span>的webdriver驱动下载：</span><br><span class="line"></span><br><span class="line">链接：https://pan.baidu.com/s/<span class="number">1</span>gv-ATOv_XdaUEThQd5-QtA 密码：dzh2</span><br><span class="line"></span><br><span class="line">多版本：http://chromedriver.storage.googleapis.com/index.html</span><br><span class="line"></span><br><span class="line">- Firefox58的webdriver驱动下载</span><br><span class="line"></span><br><span class="line">链接：https://pan.baidu.com/s/<span class="number">1</span>RATs8y<span class="number">-9</span>Vige0IxcKdn83w 密码：l41g</span><br></pre></td></tr></table></figure><h3 id="selenium设置代理"><a href="#selenium设置代理" class="headerlink" title="selenium设置代理"></a>selenium设置代理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">chromeOptions = webdriver.ChromeOptions()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line">chromeOptions.add_argument(<span class="string">"--proxy-server=http://10.3.132.6:808"</span>)</span><br><span class="line"><span class="comment"># 一定要注意，=两边不能有空格，不能这样'--proxy-server = http://202.20.16.82:10152'</span></span><br><span class="line">browser = webdriver.Chrome(chrome_options=chromeOptions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本机ip，查看代理是否起作用</span></span><br><span class="line">browser.get(<span class="string">"https://blog.csdn.net/zwq912318834/article/details/78626739"</span>)</span><br><span class="line">print(browser.page_source)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出，清除浏览器缓存</span></span><br><span class="line"><span class="comment"># browser.quit()</span></span><br></pre></td></tr></table></figure><p>###selenium登录知乎</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">"https://www.zhihu.com/signup?next=%2F"</span>)</span><br><span class="line"><span class="comment"># login = driver.find_element_by_link_text("登录")  # 链接名</span></span><br><span class="line">login = driver.find_element_by_xpath(<span class="string">"//*[@id='root']/div/main/div/div/div/div[2]/div[2]/span"</span>)</span><br><span class="line">login.click()   <span class="comment"># 点击登录</span></span><br><span class="line"></span><br><span class="line">username = driver.find_element_by_xpath(</span><br><span class="line">    <span class="string">"//*[@id='root']/div/main/div/div/div/div[2]/div[1]/form/div[1]/div[2]/div[1]/input"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># username.clear() # 清除</span></span><br><span class="line">username.send_keys(<span class="string">"username"</span>)</span><br><span class="line"></span><br><span class="line">password = driver.find_element_by_xpath(</span><br><span class="line">    <span class="string">"//*[@id=\"root\"]/div/main/div/div/div/div[2]/div[1]/form/div[2]/div/div[1]/input"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># password.clear()</span></span><br><span class="line">password.send_keys(<span class="string">"password"</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)   <span class="comment"># 等待5秒手动输验证码</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//*[@id=\"root\"]/div/main/div/div/div/div[2]/div[1]/form/button"</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># driver.close()  # 关闭浏览器</span></span><br></pre></td></tr></table></figure><h3 id="selenium登录QQ空间"><a href="#selenium登录QQ空间" class="headerlink" title="selenium登录QQ空间"></a>selenium登录QQ空间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Qzone</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,QQ,password)</span>:</span></span><br><span class="line">        self.QQ = QQ</span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_qzone</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line">        self.browser.get(<span class="string">"https://qzone.qq.com/"</span>)</span><br><span class="line">        self.browser.switch_to.frame(<span class="string">"login_frame"</span>)</span><br><span class="line">        self.browser.find_element_by_id(<span class="string">"switcher_plogin"</span>).click()</span><br><span class="line">        self.browser.find_element_by_id(<span class="string">"u"</span>).clear()</span><br><span class="line">        self.browser.find_element_by_id(<span class="string">"u"</span>).send_keys(self.QQ)</span><br><span class="line">        self.browser.find_element_by_id(<span class="string">"p"</span>).clear()</span><br><span class="line">        self.browser.find_element_by_id(<span class="string">"p"</span>).send_keys(self.password)</span><br><span class="line">        self.browser.find_element_by_id(<span class="string">"login_button"</span>).click()</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        print(<span class="string">"您已登录成功++++++++++++++++++++++++++"</span>)</span><br><span class="line">        <span class="comment"># 解决FireFox的登录成功后，直接访问新页面出现can't access dead object错误的方法链接：</span></span><br><span class="line">        <span class="comment"># http://stackoverflow.com/questions/16396767/firefox-bug-with-selenium-cant-access-dead-object</span></span><br><span class="line">        <span class="comment"># 通过下面这句解决，可能时因为上面switch_to到了login_frame，所以现在它是dead object</span></span><br><span class="line">        self.browser.switch_to.default_content()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    QQ = input(<span class="string">u"请输入QQ号："</span>)</span><br><span class="line">    password = input(<span class="string">u"请输入密码："</span>)</span><br><span class="line">    spider = Qzone(QQ,password)</span><br><span class="line">    spider.login_qzone()</span><br><span class="line">    time.sleep(<span class="number">60</span>)</span><br><span class="line">    print(<span class="string">"您已退出登录++++++++++++++++++++++++++"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01fcd05b323a25a80121b994c85776.jpg@1280w_1l_2o_100sh.webp&quot; width=&quot;688&quot; height=&quot;400&quot; alt=&quot;git&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://lidx.club/categories/Python/"/>
    
    
      <category term="selenium" scheme="https://lidx.club/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>线程和协程</title>
    <link href="https://lidx.club/2017/06/28/%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E7%A8%8B/"/>
    <id>https://lidx.club/2017/06/28/线程和协程/</id>
    <published>2017-06-28T12:04:23.000Z</published>
    <updated>2018-07-18T15:38:48.338Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zcool.cn/community/015c555b344337a80121b994e7c760.png@1280w_1l_2o_100sh.webp" width="688" height="400" alt="git" align="center"></p><a id="more"></a><h3 id="多线程加协程爬取链家"><a href="#多线程加协程爬取链家" class="headerlink" title="多线程加协程爬取链家"></a>多线程加协程爬取链家</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent  <span class="comment"># 导入协程</span></span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">gevent.monkey.patch_all()  <span class="comment"># 非阻塞</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> lxml</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading  <span class="comment"># 导入 线程</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">RuntimeError: maximum recursion depth exceeded:</span></span><br><span class="line"><span class="string">python默认的递归深度是很有限的，</span></span><br><span class="line"><span class="string">大概是900多的样子，</span></span><br><span class="line"><span class="string">当递归深度超过这个值的时候，</span></span><br><span class="line"><span class="string">就会引发这样的一个异常。</span></span><br><span class="line"><span class="string">解决的方式是手工设置递归调用深度:</span></span><br><span class="line"><span class="string">import sys</span></span><br><span class="line"><span class="string">sys.setrecursionlimit(1000000) #例如这里设置为一百万</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">rLock = threading.RLock()  <span class="comment"># 创建一个重复锁</span></span><br><span class="line">sys.setrecursionlimit(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getArea</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取区域名</span></span><br><span class="line"><span class="string">    :return: 区域字典</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># // div[ @ data - role = "ershoufang"] / div / a</span></span><br><span class="line">    url = <span class="string">"https://gz.lianjia.com/ershoufang/"</span></span><br><span class="line">    response = requests.get(url, headers=header)</span><br><span class="line">    html = response.text</span><br><span class="line">    myTree = lxml.etree.HTML(html)</span><br><span class="line">    areaList = myTree.xpath(<span class="string">"//div[@data-role=\"ershoufang\"]/div/a"</span>)</span><br><span class="line">    <span class="comment"># 用作存储标志</span></span><br><span class="line">    areaDict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> area <span class="keyword">in</span> areaList:</span><br><span class="line">        areaName = area.xpath(<span class="string">'./text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        areaLink = <span class="string">"https://gz.lianjia.com"</span> + area.xpath(<span class="string">'./@href'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(areaName, areaLink)</span><br><span class="line">        areaDict[areaName] = areaLink</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> areaDict</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPage</span><span class="params">(areaName, url)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取区域页码</span></span><br><span class="line"><span class="string">    :param areaName: 区域名</span></span><br><span class="line"><span class="string">    :param url: 链接</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># url = "https://gz.lianjia.com/ershoufang/nansha/"</span></span><br><span class="line">    response = requests.get(url, headers=header)</span><br><span class="line">    html = response.text</span><br><span class="line">    myTree = lxml.etree.HTML(html)</span><br><span class="line">    pageNum = myTree.xpath(<span class="string">"//div[@class='page-box house-lst-page-box']/@page-data"</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    pageNum = json.loads(pageNum)</span><br><span class="line">    pageNum = pageNum[<span class="string">"totalPage"</span>]</span><br><span class="line">    print(pageNum)</span><br><span class="line">    geventList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, pageNum + <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># https://gz.lianjia.com/ershoufang/tianhe/pg2/</span></span><br><span class="line">        url = url + <span class="string">"pg%d/"</span> % i</span><br><span class="line">        <span class="comment"># 开启协程</span></span><br><span class="line">        geventList.append(gevent.spawn(getHouseInfo, areaName, url))</span><br><span class="line">    <span class="comment"># 保证所有协程完成</span></span><br><span class="line">    gevent.joinall(geventList)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHouseInfo</span><span class="params">(areaName, url)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取房源信息</span></span><br><span class="line"><span class="string">    areaName, 区域名</span></span><br><span class="line"><span class="string">    url ，区域链接</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># url = url + 'pg2/'</span></span><br><span class="line"></span><br><span class="line">    response = requests.get(url, headers=header)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        html = response.text</span><br><span class="line"></span><br><span class="line">        myTree = lxml.etree.HTML(html)</span><br><span class="line"></span><br><span class="line">        houseList = myTree.xpath(<span class="string">"//ul[@class=\"sellListContent\"]/li"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> house <span class="keyword">in</span> houseList:</span><br><span class="line">            <span class="comment"># 标题</span></span><br><span class="line">            houseTitle = house.xpath(<span class="string">".//div[@class=\"title\"]/a/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">            houseLink = house.xpath(<span class="string">".//div[@class=\"title\"]/a/@href"</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 小区名</span></span><br><span class="line">            houseInfolittlearea = house.xpath(<span class="string">".//div[@class=\"houseInfo\"]/a/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 基本信息</span></span><br><span class="line">            houseInfo = house.xpath(<span class="string">".//div[@class=\"houseInfo\"]/text()"</span>)[<span class="number">0</span>].strip()</span><br><span class="line">            <span class="comment"># 小区楼层信息</span></span><br><span class="line">            positionInfo = house.xpath(<span class="string">".//div[@class=\"positionInfo\"]/text()"</span>)[<span class="number">0</span>] + \</span><br><span class="line">                           house.xpath(<span class="string">".//div[@class=\"positionInfo\"]/a/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 总价</span></span><br><span class="line">            totalPrice = house.xpath(<span class="string">".//div[@class=\"totalPrice\"]/span/text()"</span>)[<span class="number">0</span>] + <span class="string">"万"</span></span><br><span class="line">            <span class="comment"># 一平价格</span></span><br><span class="line">            unitPrice = house.xpath(<span class="string">".//div[@class='unitPrice']/span/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">            print(houseTitle, houseLink, houseInfolittlearea, houseInfo, positionInfo, totalPrice, unitPrice)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 加锁，避免产生脏数据</span></span><br><span class="line">            <span class="keyword">with</span> rLock:</span><br><span class="line">                <span class="comment"># 按区域写入文件</span></span><br><span class="line">                <span class="keyword">with</span> open(areaName + <span class="string">".txt"</span>, <span class="string">'a+'</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(str(</span><br><span class="line">                        (</span><br><span class="line">                            houseTitle, houseLink, houseInfolittlearea, houseInfo, positionInfo, totalPrice,</span><br><span class="line">                            unitPrice)) + <span class="string">'\n'</span>)</span><br><span class="line">                    f.flush()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    print(time.clock())  <span class="comment"># 定时</span></span><br><span class="line">    <span class="comment"># getPage()</span></span><br><span class="line">    areaDict = getArea()</span><br><span class="line"></span><br><span class="line">    threadList = []</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> areaDict.items():</span><br><span class="line">        <span class="comment"># print(k, v)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># getHouseInfo(k, v)</span></span><br><span class="line">        <span class="comment"># 创建一个线程</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        target=None, 调用的方法名</span></span><br><span class="line"><span class="string">        args=(), 传参，元组类型</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        t = threading.Thread(target=getPage, args=(k, v))</span><br><span class="line">        t.start()  <span class="comment"># 开启线程</span></span><br><span class="line">        threadList.append(t)</span><br><span class="line">        <span class="comment"># t.join()  # 等待线程结束  ，同步</span></span><br><span class="line">    <span class="comment"># 保证所有线程都结束， 异步</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threadList:</span><br><span class="line">        t.join()</span><br><span class="line">    print(time.clock())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/015c555b344337a80121b994e7c760.png@1280w_1l_2o_100sh.webp&quot; width=&quot;688&quot; height=&quot;400&quot; alt=&quot;git&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://lidx.club/categories/Python/"/>
    
    
      <category term="线程" scheme="https://lidx.club/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="协程" scheme="https://lidx.club/tags/%E5%8D%8F%E7%A8%8B/"/>
    
      <category term="爬虫" scheme="https://lidx.club/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>xpath</title>
    <link href="https://lidx.club/2017/06/27/xpath/"/>
    <id>https://lidx.club/2017/06/27/xpath/</id>
    <published>2017-06-27T09:32:30.000Z</published>
    <updated>2018-07-18T15:39:08.545Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zcool.cn/community/0179055b3ae4a9a80121b994e8d137.jpg@1280w_1l_2o_100sh.jpg" width="688" height="400" alt="git" align="center"></p><a id="more"></a><h1 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h1><p>XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言。XPath基于XML的树状结构，有不同类型的节点，包括元素节点，属性节点和文本节点，提供在数据结构树中找寻节点的能力。</p><h1 id="什么是-XPath"><a href="#什么是-XPath" class="headerlink" title="什么是 XPath?"></a>什么是 XPath?</h1><ul><li>XPath 使用路径表达式在 XML 文档中进行导航</li><li>XPath 包含一个标准函数库</li><li>XPath 是 XSLT 中的主要元素</li><li>XPath 是一个 W3C 标准</li></ul><h1 id="使用xpath"><a href="#使用xpath" class="headerlink" title="使用xpath"></a>使用xpath</h1><p>安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xpath</span><br></pre></td></tr></table></figure><p>导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lxml</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br></pre></td></tr></table></figure><h1 id="XPath-Helper插件"><a href="#XPath-Helper插件" class="headerlink" title="XPath Helper插件"></a>XPath Helper插件</h1><p>chrome插件网：<a href="http://www.cnplugins.com/" target="_blank" rel="noopener">http://www.cnplugins.com/</a></p><p>添加插件</p><p>Ctrl + Shift + X打开或关闭插件</p><h1 id="XPath-术语"><a href="#XPath-术语" class="headerlink" title="XPath 术语"></a>XPath 术语</h1><h2 id="节点（Node）"><a href="#节点（Node）" class="headerlink" title="节点（Node）"></a>节点（Node）</h2><p>在 XPath 中，有七种类型的节点：元素、属性、文本、命名空间、处理指令、注释以及文档（根）节点。XML 文档是被作为节点树来对待的。树的根被称为文档节点或者根节点。</p><p>请看下面这个 XML 文档：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>J K. Rowling<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基本值（或称原子值，Atomic-value）"><a href="#基本值（或称原子值，Atomic-value）" class="headerlink" title="基本值（或称原子值，Atomic value）"></a>基本值（或称原子值，Atomic value）</h2><p>基本值是无父或无子的节点。</p><p>基本值的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">J K. Rowling</span><br><span class="line"></span><br><span class="line"><span class="string">"en"</span></span><br></pre></td></tr></table></figure><h2 id="项目（Item）"><a href="#项目（Item）" class="headerlink" title="项目（Item）"></a>项目（Item）</h2><p>项目是基本值或者节点。</p><h2 id="节点关系"><a href="#节点关系" class="headerlink" title="节点关系"></a>节点关系</h2><h3 id="父（Parent）"><a href="#父（Parent）" class="headerlink" title="父（Parent）"></a>父（Parent）</h3><p>每个元素以及属性都有一个父。</p><h3 id="子（Children）"><a href="#子（Children）" class="headerlink" title="子（Children）"></a>子（Children）</h3><p>元素节点可有零个、一个或多个子。</p><h3 id="同胞（Sibling）"><a href="#同胞（Sibling）" class="headerlink" title="同胞（Sibling）"></a>同胞（Sibling）</h3><p>拥有相同的父的节点</p><h3 id="先辈（Ancestor）"><a href="#先辈（Ancestor）" class="headerlink" title="先辈（Ancestor）"></a>先辈（Ancestor）</h3><p>某节点的父、父的父，等等。</p><h3 id="后代（Descendant）"><a href="#后代（Descendant）" class="headerlink" title="后代（Descendant）"></a>后代（Descendant）</h3><p>某个节点的子，子的子，等等。</p><h1 id="XPath-语法"><a href="#XPath-语法" class="headerlink" title="XPath 语法"></a>XPath 语法</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line">&lt;bookstore&gt;</span><br><span class="line"></span><br><span class="line">&lt;book&gt;</span><br><span class="line">  &lt;title lang="eng"&gt;Harry Potter&lt;/title&gt;</span><br><span class="line">  &lt;price&gt;29.99&lt;/price&gt;</span><br><span class="line">&lt;/book&gt;</span><br><span class="line"></span><br><span class="line">&lt;book&gt;</span><br><span class="line">  &lt;title lang="eng"&gt;Learning XML&lt;/title&gt;</span><br><span class="line">  &lt;price&gt;39.99&lt;/price&gt;</span><br><span class="line">&lt;/book&gt;</span><br><span class="line"></span><br><span class="line">&lt;/bookstore&gt;</span><br></pre></td></tr></table></figure><h2 id="选取节点"><a href="#选取节点" class="headerlink" title="选取节点"></a>选取节点</h2><p>XPath 使用路径表达式在 XML 文档中选取节点。节点是通过沿着路径或者 step 来选取的。 下面列出了最有用的路径表达式：</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>/</td><td>从根节点选取。</td></tr><tr><td>//</td><td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td>.</td><td>选取当前节点。</td></tr><tr><td>..</td><td>选取当前节点的父节点。</td></tr><tr><td>@</td><td>选取属性。</td></tr></tbody></table><p>在下面的表格中，我们已列出了一些路径表达式以及表达式的结果：</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>bookstore</td><td>选取 bookstore 元素的所有子节点。</td></tr><tr><td>/bookstore</td><td>选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td>/bookstore/book</td><td>选取属于 bookstore 的子元素的所有 book 元素。</td></tr><tr><td>//book</td><td>选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td>bookstore//book</td><td>选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td>//@lang</td><td>选取名为 lang 的所有属性。</td></tr></tbody></table><h2 id="谓语（Predicates）"><a href="#谓语（Predicates）" class="headerlink" title="谓语（Predicates）"></a>谓语（Predicates）</h2><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点。</p><p>谓语被嵌在方括号中。</p><p>在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>/bookstore/book[1]</td><td>选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td>/bookstore/book[last()]</td><td>选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td>/bookstore/book[last()-1]</td><td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td>/bookstore/book[position()&lt;3]</td><td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td>//title[@lang]</td><td>选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td>//title[@lang=’eng’]</td><td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td>/bookstore/book[price&gt;35.00]</td><td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td>/bookstore/book[price&gt;35.00]/title</td><td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><h2 id="选取未知节点"><a href="#选取未知节点" class="headerlink" title="选取未知节点"></a>选取未知节点</h2><p>XPath 通配符可用来选取未知的 XML 元素。</p><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配任何元素节点。</td></tr><tr><td>@*</td><td>匹配任何属性节点。</td></tr><tr><td>node()</td><td>匹配任何类型的节点。</td></tr></tbody></table><p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>/bookstore/*</td><td>选取 bookstore 元素的所有子元素。</td></tr><tr><td>//*</td><td>选取文档中的所有元素。</td></tr><tr><td>//title[@*]</td><td>选取所有带有属性的 title 元素。</td></tr></tbody></table><hr><h2 id="选取若干路径"><a href="#选取若干路径" class="headerlink" title="选取若干路径"></a>选取若干路径</h2><p>通过在路径表达式中使用”|”运算符，您可以选取若干个路径。</p><p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>//book/title \</td><td>//book/price</td><td>选取 book 元素的所有 title 和 price 元素。</td></tr><tr><td>//title \</td><td>//price</td><td>选取文档中的所有 title 和 price 元素。</td></tr><tr><td>/bookstore/book/title \</td><td>//price</td><td>选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">htmlFile = <span class="string">'''</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt; # 注意，此处缺少一个 &lt;/li&gt; 闭合标签</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    </span><br><span class="line">html = lxml.etree.parse(<span class="string">"filename.html"</span>)  <span class="comment"># 读取文件</span></span><br><span class="line">html = lxml.etree.HTML(htmltext)  <span class="comment"># 直接加载</span></span><br><span class="line"></span><br><span class="line">print(html.xpath(<span class="string">"//li/@class"</span>))  <span class="comment"># 取出li的所有节点class名称</span></span><br><span class="line">print(html.xpath(<span class="string">"//li/@text"</span>))  <span class="comment"># 为空，如果包含这个属性，</span></span><br><span class="line">print(html.xpath(<span class="string">"//li/a"</span>))  <span class="comment"># li下面5个节点，每个节点对应一个元素</span></span><br><span class="line">print(html.xpath(<span class="string">"//li/a/@href"</span>))  <span class="comment"># 取出li的所有节点 a内部href名称</span></span><br><span class="line">print(html.xpath(<span class="string">"//li/a/@href=\"link3.html\""</span>))  <span class="comment"># 判断是有一个节点==link3.html</span></span><br><span class="line">print(html.xpath(<span class="string">"//li//span"</span>))  <span class="comment"># 取出li下面所有的span</span></span><br><span class="line">print(html.xpath(<span class="string">"//li//span/@class"</span>))  <span class="comment"># 取出li下面所有的span内部的calss</span></span><br><span class="line">print(html.xpath(<span class="string">"//li/a//@class"</span>))  <span class="comment"># 取出li的所有节点内部节点a包含的class</span></span><br><span class="line">print(html.xpath(<span class="string">"//li"</span>))  <span class="comment"># 取出所有节点</span></span><br><span class="line">print(html.xpath(<span class="string">"//li[1]"</span>))  <span class="comment"># 取出第一个</span></span><br><span class="line">print(html.xpath(<span class="string">"//li[last()]"</span>))  <span class="comment"># 取出最后一个</span></span><br><span class="line">print(html.xpath(<span class="string">"//li[last()-1]"</span>))  <span class="comment"># 取出倒数第2个</span></span><br><span class="line">print(html.xpath(<span class="string">"//li[last()-1]/a/@href"</span>))  <span class="comment"># 取出倒数第2个的a下面的href</span></span><br><span class="line">print(html.xpath(<span class="string">"//*[@text=\"3\"]"</span>))  <span class="comment"># 选着text=3的元素</span></span><br><span class="line">print(html.xpath(<span class="string">"//*[@text=\"3\"]/@class"</span>))  <span class="comment"># 选着text=3的元素</span></span><br><span class="line">print(html.xpath(<span class="string">"//*[@class=\"nimei\"]"</span>))  <span class="comment"># 选着text=3的元素</span></span><br><span class="line">print(html.xpath(<span class="string">"//li/a/text()"</span>))  <span class="comment"># 取出&lt;&gt;</span></span><br><span class="line">print(html.xpath(<span class="string">"//li[3]/a/span/text()"</span>))  <span class="comment"># 取出内部&lt;&gt;数据</span></span><br></pre></td></tr></table></figure><ul><li><p>抓取51job全国岗位：<a href="https://jobs.51job.com/" target="_blank" rel="noopener">https://jobs.51job.com/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> lxml</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCityList</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取全国城市</span></span><br><span class="line"><span class="string">    :param url:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    url = <span class="string">"https://jobs.51job.com/"</span></span><br><span class="line"></span><br><span class="line">    HTML = requests.get(url, headers=header).content.decode(<span class="string">'GB18030'</span>)  <span class="comment"># gb2312 简体 gbk包含了繁体</span></span><br><span class="line"></span><br><span class="line">    myTree = lxml.etree.HTML(HTML)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># /html/body/div[maincenter]/div[2]/div[2]/div[1]/a[1]</span></span><br><span class="line">    cityList = myTree.xpath(<span class="string">"//div[@class=\"maincenter\"]/div[2]/div[2]/div/a"</span>)  <span class="comment"># 城市列表</span></span><br><span class="line">    <span class="keyword">for</span> city <span class="keyword">in</span> cityList:</span><br><span class="line">        cityName = city.xpath(<span class="string">"./text()"</span>)[<span class="number">0</span>]</span><br><span class="line">        cityUrl = city.xpath(<span class="string">"./@href"</span>)[<span class="number">0</span>]</span><br><span class="line">        print(cityName, cityUrl)</span><br><span class="line">        <span class="comment"># 获取页数</span></span><br><span class="line">        getPage(cityUrl)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getJobInfo</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取岗位信息</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># url = "https://jobs.51job.com/beijing/"</span></span><br><span class="line">    response = requests.get(url, headers=header).content.decode(<span class="string">'GB18030'</span>)</span><br><span class="line">    myTree = lxml.etree.HTML(response)</span><br><span class="line">    jobList = myTree.xpath(<span class="string">"//div[@class=\"detlist gbox\"]//div"</span>)  <span class="comment"># 获取岗位列表</span></span><br><span class="line">    <span class="comment"># 如果为空不抓取</span></span><br><span class="line">    <span class="keyword">if</span> len(jobList) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> job <span class="keyword">in</span> jobList:</span><br><span class="line">            <span class="comment"># 岗位名</span></span><br><span class="line">            jobName = job.xpath(<span class="string">"./p/span/a/text()"</span>)[<span class="number">0</span>].replace(<span class="string">"\r\n"</span>, <span class="string">''</span>).replace(<span class="string">"\t"</span>, <span class="string">''</span>)</span><br><span class="line">            <span class="comment"># 岗位链接</span></span><br><span class="line">            jobUrl = job.xpath(<span class="string">"./p/span/a/@href"</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 工作地点</span></span><br><span class="line">            jobAddr = job.xpath(<span class="string">"./p/span[2]/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 薪资</span></span><br><span class="line">            jobMoney = job.xpath(<span class="string">"./p/span[3]/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 发布时间</span></span><br><span class="line">            jobTime = job.xpath(<span class="string">"./p/span[4]/text()"</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            jobOrder = job.xpath(<span class="string">"./p[2]/text()"</span>)</span><br><span class="line">            print(jobName, jobUrl, jobAddr, jobMoney, jobTime)</span><br><span class="line">            <span class="comment"># print(jobOrder)</span></span><br><span class="line">            <span class="comment"># 岗位要求</span></span><br><span class="line">            jobOrderList = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> jobOrder:</span><br><span class="line">                jobOrderList.append((i.replace(<span class="string">"\r\n"</span>, <span class="string">''</span>).replace(<span class="string">"\t"</span>, <span class="string">''</span>).strip()))</span><br><span class="line">                <span class="comment"># print(i.strip().replace("\r\n", '').replace("\t", ''))</span></span><br><span class="line">            print(jobOrderList)</span><br><span class="line">            <span class="comment"># 岗位职责</span></span><br><span class="line">            jobRes = job.xpath(<span class="string">"./p[3]/text()"</span>)[<span class="number">0</span>].replace(<span class="string">"\r\n"</span>, <span class="string">''</span>).replace(<span class="string">"\t\t"</span>, <span class="string">''</span>).strip()</span><br><span class="line">            print(jobRes)</span><br><span class="line">            <span class="comment"># 写入文件</span></span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"51job.txt"</span>, <span class="string">'a+'</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(str((jobName, jobUrl, jobAddr, jobMoney, jobTime, jobOrderList, jobRes)) + <span class="string">'\n'</span>)</span><br><span class="line">                f.flush()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPage</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取岗位页面数量</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># url = "https://jobs.51job.com/xinjiang/"</span></span><br><span class="line">    respnse = requests.get(url, headers=header).content.decode(<span class="string">'GB18030'</span>)</span><br><span class="line">    myTree = lxml.etree.HTML(respnse)</span><br><span class="line">    pageNum = myTree.xpath(<span class="string">"//*[@id=\"cppageno\"]/span[1]/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># "共405页，到第"</span></span><br><span class="line">    numre = <span class="string">".*?(\d+).*"</span>  <span class="comment"># ?非贪婪模式</span></span><br><span class="line">    pageNum = int(re.findall(numre, pageNum)[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, pageNum + <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">        newUrl = <span class="string">"https://jobs.51job.com/beijing/p%d/"</span> % i</span><br><span class="line">        print(<span class="string">"\t\t\t"</span>, newUrl)</span><br><span class="line">        <span class="comment"># 获取岗位信息</span></span><br><span class="line">        getJobInfo(newUrl)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    getCityList()</span><br><span class="line">    <span class="comment"># getJobInfo()</span></span><br><span class="line">    <span class="comment"># getPage()</span></span><br></pre></td></tr></table></figure></li><li><p>抓取上海市高级人民法院：<a href="http://www.hshfy.sh.cn/shfy/gweb2017/ktgg_search.jsp" target="_blank" rel="noopener">http://www.hshfy.sh.cn/shfy/gweb2017/ktgg_search.jsp</a>?</p></li><li><p><a href="http://www.hshfy.sh.cn/shfy/gweb2017/channel_xw_list.jsp?pa=abG1kbT1MTTA2MDImbG1tYz2wuMD90dDO9gPdcssPdcssz&amp;zd=spyj" target="_blank" rel="noopener">http://www.hshfy.sh.cn/shfy/gweb2017/channel_xw_list.jsp?pa=abG1kbT1MTTA2MDImbG1tYz2wuMD90dDO9gPdcssPdcssz&amp;zd=spyj</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> lxml</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line"># 各大浏览器Http请求头</span><br><span class="line">    ua_list = [</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60"</span>,</span><br><span class="line">        <span class="string">"Opera/8.0 (Windows NT 5.1; U; en)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 5.1; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.50"</span>,</span><br><span class="line">        <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.50"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2 "</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.133 Safari/534.16"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0"</span>,</span><br><span class="line">        <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; SE 2.X MetaSr 1.0)"</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    header = &#123;<span class="string">"User-Agent"</span>: random.choice(ua_list)&#125;</span><br><span class="line"></span><br><span class="line">    httpProxy = [</span><br><span class="line">        &#123;<span class="string">"http"</span>: <span class="string">"61.135.217.7:80"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"yzm"</span>: <span class="string">"k5b2"</span>,</span><br><span class="line">        <span class="string">"ft"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"ktrqks"</span>: <span class="string">"2018-05-31"</span>,</span><br><span class="line">        <span class="string">"ktrqjs"</span>: <span class="string">"2018-06-30"</span>,</span><br><span class="line">        <span class="string">"spc"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"yg"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"bg"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"ah"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"pagesnum"</span>: str(i),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    url = <span class="string">"http://www.hshfy.sh.cn/shfy/gweb2017/ktgg_search_content.jsp"</span></span><br><span class="line"></span><br><span class="line">    response = requests.post(url, headers=header, data=data)    # proxies=random.choice(httpProxy)</span><br><span class="line">    if response.status_code == 200:     # 响应为200则抓取</span><br><span class="line">        html = response.text</span><br><span class="line">        # print(html)</span><br><span class="line">        myTree = lxml.etree.HTML(html)</span><br><span class="line">        # position过滤</span><br><span class="line">        report = myTree.xpath(<span class="string">"//*[@id='report']/tbody/tr[position()&gt;1]"</span>)</span><br><span class="line">        # print(report)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> report:</span><br><span class="line">            name = t.xpath(<span class="string">"./td[1]/font/text()"</span>)[<span class="number">0</span>].replace(<span class="string">"\xa0"</span>, <span class="string">''</span>)</span><br><span class="line">            home = t.xpath(<span class="string">"./td[2]/font/text()"</span>)[<span class="number">0</span>].replace(<span class="string">"\xa0"</span>, <span class="string">''</span>)</span><br><span class="line">            time = t.xpath(<span class="string">"./td[3]/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">            num = t.xpath(<span class="string">"./td[4]/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">            brief = t.xpath(<span class="string">"./td[5]/text()"</span>)[<span class="number">0</span>].replace(<span class="string">"\xa0"</span>, <span class="string">''</span>)</span><br><span class="line">            section = t.xpath(<span class="string">"./td[6]/div/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">            judge = t.xpath(<span class="string">"./td[7]/div/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">            plaintiff = t.xpath(<span class="string">"./td[8]/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">            defendant = t.xpath(<span class="string">"./td[9]/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">            print(name, home, time, num, brief, section, judge, plaintiff, defendant)</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"court.txt"</span>, <span class="string">'a+'</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(str((name, home, time, num, brief, section, judge, plaintiff, defendant)) + <span class="string">'\n'</span>)</span><br><span class="line">                f.flush()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/0179055b3ae4a9a80121b994e8d137.jpg@1280w_1l_2o_100sh.jpg&quot; width=&quot;688&quot; height=&quot;400&quot; alt=&quot;git&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://lidx.club/categories/Python/"/>
    
    
      <category term="爬虫" scheme="https://lidx.club/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="xpath" scheme="https://lidx.club/tags/xpath/"/>
    
  </entry>
  
  <entry>
    <title>爬虫抓取策略</title>
    <link href="https://lidx.club/2017/06/26/%E7%88%AC%E8%99%AB%E6%8A%93%E5%8F%96%E7%AD%96%E7%95%A5/"/>
    <id>https://lidx.club/2017/06/26/爬虫抓取策略/</id>
    <published>2017-06-26T09:05:17.000Z</published>
    <updated>2018-07-18T15:38:56.938Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zcool.cn/community/01e50f5b3b10e1a80120b959f3e2ff.gif" width="688" height="400" alt="git" align="center"></p><a id="more"></a><h1 id="爬虫抓取策略"><a href="#爬虫抓取策略" class="headerlink" title="爬虫抓取策略"></a>爬虫抓取策略</h1><p>在爬虫系统中，待抓取URL队列是很重要的一部分。待抓取URL队列中的URL以什么样的顺序排列也是一个很重要的问题，因为这涉及到先抓取那个页面，后抓取哪个页面。而决定这些URL排列顺序的方法，叫做抓取策略。下面重点介绍几种常见的抓取策略：</p><h3 id="1-深度优先遍历策略"><a href="#1-深度优先遍历策略" class="headerlink" title="1.深度优先遍历策略"></a>1.深度优先遍历策略</h3><p>深度优先遍历策略是指网络爬虫会从起始页开始，一个链接一个链接跟踪下去，处理完这条线路之后再转入下一个起始页，继续跟踪链接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line">hrefre = <span class="string">"&lt;a.*href=\"(https?://.*?)\".*&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPage</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取html</span></span><br><span class="line"><span class="string">    :param url:</span></span><br><span class="line"><span class="string">    :return: html源码</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    html = requests.get(url, headers=header)</span><br><span class="line">    <span class="keyword">return</span> html.text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取url</span></span><br><span class="line"><span class="string">    :param url:</span></span><br><span class="line"><span class="string">    :return: URLList</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    html = getPage(url)</span><br><span class="line">    urllist = re.findall(hrefre, html)</span><br><span class="line">    <span class="keyword">return</span> urllist</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deepSpider</span><span class="params">(url, depth)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    深度爬虫</span></span><br><span class="line"><span class="string">    :param url:</span></span><br><span class="line"><span class="string">    :param depth:深度控制</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">"\t\t\t"</span> * depthDict[url], <span class="string">"爬取了第%d级页面：%s"</span> % (depthDict[url], url))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> depthDict[url] &gt; depth:</span><br><span class="line">        <span class="keyword">return</span>  <span class="comment"># 超出深度则跳出</span></span><br><span class="line">    sonlist = getUrl(url)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sonlist:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> depthDict:</span><br><span class="line">        depthDict[i] = depthDict[url] + <span class="number">1</span>  <span class="comment"># 层级+1</span></span><br><span class="line">        deepSpider(i, depth)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    depthDict = &#123;&#125;  <span class="comment"># 爬虫层级控制</span></span><br><span class="line">    <span class="comment"># 起始url</span></span><br><span class="line">    startUrl = <span class="string">"https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;tn=baidu&amp;wd=岛国邮箱"</span></span><br><span class="line">    depthDict[startUrl] = <span class="number">1</span></span><br><span class="line">    deepSpider(startUrl, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="2-宽度优先遍历策略"><a href="#2-宽度优先遍历策略" class="headerlink" title="2.宽度优先遍历策略"></a>2.宽度优先遍历策略</h3><p>宽度优先遍历策略的基本思路是，将新下载网页中发现的链接直接**待抓取URL队列的末尾。也就是指网络爬虫会先抓取起始网页中链接的所有网页，然后再选择其中的一个链接网页，继续抓取在此网页中链接的所有网页。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line">hrefre = <span class="string">"&lt;a.*href=\"(https?://.*?)\".*&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取网页的全部url</span></span><br><span class="line"><span class="string">    :param url:</span></span><br><span class="line"><span class="string">    :return: url列表</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    html = getPage(url)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    &lt;a data-click="&#123;&#125;" href="http://www.baidu.com/" fasdf&gt;...&lt;/a&gt;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    urlre = <span class="string">"&lt;a.*href=\"(https?://.*?)\".*&gt;"</span></span><br><span class="line">    urllist = re.findall(urlre, html)</span><br><span class="line">    <span class="keyword">return</span> urllist</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPage</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    抓取网页html</span></span><br><span class="line"><span class="string">    :param url:</span></span><br><span class="line"><span class="string">    :return: HTML源码</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    html = requests.get(url, headers=header).text</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vastSpider</span><span class="params">(depth)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> len(urlList) &gt; <span class="number">0</span>:</span><br><span class="line">        url = urlList.pop(<span class="number">0</span>)  <span class="comment"># 弹出首个url</span></span><br><span class="line">        print(<span class="string">"\t\t\t"</span> * depthDict[url], <span class="string">"抓取了第%d级页面：%s"</span> % (depthDict[url], url))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> depthDict[url] &lt; depth:</span><br><span class="line">            sonList = getUrl(url)</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> sonList:</span><br><span class="line">                <span class="keyword">if</span> s <span class="keyword">not</span> <span class="keyword">in</span> depthDict: <span class="comment"># 去重</span></span><br><span class="line">                    depthDict[s] = depthDict[url] + <span class="number">1</span></span><br><span class="line">                    urlList.append(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 去重</span></span><br><span class="line">    urlList = []  <span class="comment"># url列表</span></span><br><span class="line"></span><br><span class="line">    depthDict = &#123;&#125;</span><br><span class="line">    starUrl = <span class="string">"https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;tn=baidu&amp;wd=岛国邮箱"</span></span><br><span class="line">    depthDict[starUrl] = <span class="number">1</span></span><br><span class="line">    urlList.append(starUrl)</span><br><span class="line">    vastSpider(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h1 id="页面解析和数据提取"><a href="#页面解析和数据提取" class="headerlink" title="页面解析和数据提取"></a>页面解析和数据提取</h1><p>一般来讲对我们而言，需要抓取的是某个网站或者某个应用的内容，提取有用的价值。内容一般分为两部分，非结构化的数据和结构化的数据。</p><ul><li>非结构化数据：先有数据，再有结构</li><li>结构化数据：先有结构、再有数据</li></ul><h3 id="不同类型的数据，我们需要采用不同的方式来处理。"><a href="#不同类型的数据，我们需要采用不同的方式来处理。" class="headerlink" title="不同类型的数据，我们需要采用不同的方式来处理。"></a>不同类型的数据，我们需要采用不同的方式来处理。</h3><ul><li>非结构化的数据处理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">正则表达式</span><br><span class="line">HTML 文件</span><br><span class="line">正则表达式</span><br><span class="line">XPath</span><br><span class="line">CSS选择器</span><br></pre></td></tr></table></figure><ul><li>结构化的数据处理</li></ul><figure class="highlight"><figcaption><span>文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JSON Path</span><br><span class="line">转化成Python类型进行操作（json类）</span><br><span class="line">XML 文件</span><br><span class="line">转化成Python类型（xmltodict）</span><br><span class="line">XPath</span><br><span class="line">CSS选择器</span><br><span class="line">正则表达式</span><br></pre></td></tr></table></figure><h1 id="Beautiful-Soup-4-2-0-文档"><a href="#Beautiful-Soup-4-2-0-文档" class="headerlink" title="Beautiful Soup 4.2.0 文档"></a>Beautiful Soup 4.2.0 文档</h1><p>官方文档：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></p><ul><li>爬取智联招聘岗位数量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url)</span>:</span></span><br><span class="line">    headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0);"</span>&#125;</span><br><span class="line">    request = urllib.request.Request(url, headers=headers) <span class="comment"># 请求，修改，模拟http.</span></span><br><span class="line">    data = urllib.request.urlopen(request).read() <span class="comment"># 打开请求，抓取数据</span></span><br><span class="line">    soup = BeautifulSoup(data, <span class="string">"html5lib"</span>, from_encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="comment"># findall</span></span><br><span class="line">    <span class="comment"># 获取岗位数量的多种查找方式</span></span><br><span class="line">    spanlist = soup.find_all(<span class="string">"span"</span>, class_=<span class="string">"search_yx_tj"</span>)</span><br><span class="line">    print(spanlist)</span><br><span class="line">    print(spanlist[<span class="number">0</span>].em.string)</span><br><span class="line">    print(soup.select(<span class="string">'.search_yx_tj'</span>))</span><br><span class="line">    print(((soup.select(<span class="string">'.search_yx_tj'</span>)[<span class="number">0</span>]).select(<span class="string">"em"</span>)[<span class="number">0</span>]).get_text())</span><br><span class="line">    print(((soup.select(<span class="string">'span[class="search_yx_tj"]'</span>)[<span class="number">0</span>]).select(<span class="string">"em"</span>)[<span class="number">0</span>]).get_text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">download(<span class="string">"http://sou.zhaopin.com/jobs/searchresult.ashx?jl=%E6%B7%B1%E5%9C%B3&amp;kw=python&amp;sm=0&amp;p=1"</span>)</span><br></pre></td></tr></table></figure><ul><li>爬取股票基金</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">stockList = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url)</span>:</span></span><br><span class="line">    headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0);"</span>&#125;</span><br><span class="line">    request = urllib.request.Request(url, headers=headers)  <span class="comment"># 请求，修改，模拟http.</span></span><br><span class="line">    data = urllib.request.urlopen(request).read()  <span class="comment"># 打开请求，抓取数据</span></span><br><span class="line">    soup = BeautifulSoup(data, <span class="string">"html5lib"</span>, from_encoding=<span class="string">"gb2312"</span>)</span><br><span class="line">    mytable = soup.select(<span class="string">"#datalist"</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> mytable[<span class="number">0</span>].find_all(<span class="string">"tr"</span>):</span><br><span class="line">        print(line.get_text())  <span class="comment"># 提取每一个行业</span></span><br><span class="line"></span><br><span class="line">        print(line.select(<span class="string">"td:nth-of-type(3)"</span>)[<span class="number">0</span>].text) <span class="comment"># 提取具体的某一个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    download(<span class="string">"http://quote.stockstar.com/fund/stock_3_1_2.html"</span>)</span><br></pre></td></tr></table></figure><ul><li>爬取腾讯岗位说明</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url)</span>:</span></span><br><span class="line">    headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0);"</span>&#125;</span><br><span class="line">    request = urllib.request.Request(url, headers=headers) <span class="comment"># 请求，修改，模拟http.</span></span><br><span class="line">    data = urllib.request.urlopen(request).read() <span class="comment"># 打开请求，抓取数据</span></span><br><span class="line">    soup = BeautifulSoup(data, <span class="string">"html5lib"</span>)</span><br><span class="line">    print(soup)</span><br><span class="line">    data = soup.find_all(<span class="string">"ul"</span>, class_=<span class="string">"squareli"</span>)</span><br><span class="line">    <span class="keyword">for</span> dataline <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">for</span> linedata <span class="keyword">in</span> dataline.find_all(<span class="string">"li"</span>):</span><br><span class="line">            print(linedata.string)</span><br><span class="line">        </span><br><span class="line">    data = soup.select(<span class="string">'ul[class="squareli"]'</span>)</span><br><span class="line">    <span class="keyword">for</span> dataline <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">for</span> linedata <span class="keyword">in</span> dataline.select(<span class="string">"li"</span>):</span><br><span class="line">            print(linedata.get_text())</span><br><span class="line"></span><br><span class="line">download(<span class="string">"https://hr.tencent.com/position_detail.php?id=37446&amp;keywords=&amp;tid=0&amp;lid=0"</span>)</span><br></pre></td></tr></table></figure><ul><li>获取腾讯岗位列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url)</span>:</span></span><br><span class="line">    headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0);"</span>&#125;</span><br><span class="line">    request = urllib.request.Request(url, headers=headers) <span class="comment"># 请求，修改，模拟http.</span></span><br><span class="line">    data = urllib.request.urlopen(request).read() <span class="comment"># 打开请求，抓取数据</span></span><br><span class="line">    soup = BeautifulSoup(data, <span class="string">"html5lib"</span>)</span><br><span class="line">    </span><br><span class="line">    data = soup.find_all(<span class="string">"table"</span>, class_=<span class="string">"tablelist"</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> data[<span class="number">0</span>].find_all(<span class="string">"tr"</span>, class_=[<span class="string">"even"</span>, <span class="string">"odd"</span>]):</span><br><span class="line">        print(line.find_all(<span class="string">"td"</span>)[<span class="number">0</span>].a[<span class="string">"href"</span>])</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> line.find_all(<span class="string">"td"</span>):</span><br><span class="line">            print(data.string)</span><br><span class="line"></span><br><span class="line">download(<span class="string">"http://hr.tencent.com/position.php?keywords=python&amp;lid=0&amp;tid=0&amp;start=100#a"</span>)</span><br></pre></td></tr></table></figure><h3 id="数据插入数据库"><a href="#数据插入数据库" class="headerlink" title="数据插入数据库"></a>数据插入数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InsertMySql</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 连接数据库配置</span></span><br><span class="line">    coon = pymysql.connect(</span><br><span class="line">        host=<span class="string">"127.0.0.1"</span>,</span><br><span class="line">        user=<span class="string">'root'</span>,</span><br><span class="line">        password=<span class="string">"root"</span>,</span><br><span class="line">        database=<span class="string">'tencent'</span>,</span><br><span class="line">        port=<span class="number">3306</span>,</span><br><span class="line">        charset=<span class="string">'utf8'</span></span><br><span class="line">    )</span><br><span class="line">    print(coon)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 游标</span></span><br><span class="line">    cursor = coon.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"tencent.txt"</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        jobList = f.readlines()</span><br><span class="line">        <span class="keyword">for</span> job <span class="keyword">in</span> jobList:</span><br><span class="line">            job = job.split(<span class="string">","</span>)</span><br><span class="line">            <span class="comment"># print(job)</span></span><br><span class="line">            print(job[<span class="number">0</span>][<span class="number">1</span>:])</span><br><span class="line">            print(job[<span class="number">4</span>][:<span class="number">-2</span>])</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                sql = <span class="string">"insert into tencentjob(jobName, jobAddr, jobType, jobNum, jobRes, jobReq) VALUE(%s,%s,%s,%s,%s,%s) "</span> % (</span><br><span class="line">                    job[<span class="number">0</span>][<span class="number">1</span>:], job[<span class="number">1</span>], job[<span class="number">2</span>], job[<span class="number">3</span>], job[<span class="number">4</span>], job[<span class="number">5</span>][:<span class="number">-2</span>]</span><br><span class="line">                )</span><br><span class="line">                print(sql)</span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                coon.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">"+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"</span>)</span><br><span class="line"></span><br><span class="line">    cursor.close()</span><br><span class="line">    coon.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print("%s======%r" % ("asdfasdf","asdfasfd"))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    InsertMySql()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01e50f5b3b10e1a80120b959f3e2ff.gif&quot; width=&quot;688&quot; height=&quot;400&quot; alt=&quot;git&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://lidx.club/categories/Python/"/>
    
    
      <category term="爬虫" scheme="https://lidx.club/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="BeautifulSoup" scheme="https://lidx.club/tags/BeautifulSoup/"/>
    
  </entry>
  
  <entry>
    <title>requests</title>
    <link href="https://lidx.club/2017/06/25/requests/"/>
    <id>https://lidx.club/2017/06/25/requests/</id>
    <published>2017-06-25T06:17:57.000Z</published>
    <updated>2018-07-18T15:40:04.479Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zcool.cn/community/013fe55b39eabca80120b9595f3d65.jpg@1280w_1l_2o_100sh.webp" width="688" height="400" alt="git" align="center"></p><a id="more"></a><h1 id="Requests-让-HTTP-服务人类"><a href="#Requests-让-HTTP-服务人类" class="headerlink" title="Requests: 让 HTTP 服务人类"></a>Requests: 让 HTTP 服务人类</h1><p>虽然Python的标准库中 urllib2 模块已经包含了平常我们使用的大多数功能，但是它的 API 使用起来让人感觉不太好，而 Requests 自称 “HTTP for Humans”，说明使用更简洁方便。</p><p>Requests 唯一的一个非转基因的 Python HTTP 库，人类可以安全享用。</p><p>Requests 继承了urllib2的所有特性。Requests支持HTTP连接保持和连接池，支持使用cookie保持会话，支持文件上传，支持自动确定响应内容的编码，支持国际化的 URL 和 POST 数据自动编码。</p><p>Requests 的底层实现其实就是 urllib3。</p><p>Requests的文档非常完备，中文文档也相当不错。Requests能完全满足当前网络的需求，支持Python 2.6—3.5，而且能在PyPy下完美运行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开源地址：https:<span class="comment">//github.com/kennethreitz/requests</span></span><br><span class="line"></span><br><span class="line">中文文档 API：http:<span class="comment">//docs.python-requests.org/zh_CN/latest/index.html</span></span><br></pre></td></tr></table></figure><h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><p>利用 pip 安装 或者 利用 easy_install 都可以完成安装：</p><p><code>$ pip install requests</code></p><p><code>$ easy_install requests</code></p><h2 id="1-基本GET请求（headers参数-和-parmas参数）"><a href="#1-基本GET请求（headers参数-和-parmas参数）" class="headerlink" title="1. 基本GET请求（headers参数 和 parmas参数）"></a>1. 基本GET请求（headers参数 和 parmas参数）</h2><ol><li>最基本的GET请求可以直接用get方法</li></ol><p><code>response = requests.get(&quot;http://www.baidu.com/&quot;)</code></p><p>​       也可以这样写</p><p><code>response = requests.request(&quot;get&quot;, &quot;http://www.baidu.com/&quot;)</code></p><ol><li>添加 headers 和 查询参数<br>如果想添加 headers，可以传入headers参数来增加请求头中的headers信息。如果要将参数放在url中传递，可以利用params参数。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">kw = &#123;<span class="string">'wd'</span>:<span class="string">'长城'</span>&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()</span></span><br><span class="line">response = requests.get(<span class="string">"http://www.baidu.com/s?"</span>, params = kw, headers = headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看响应内容，response.text 返回的是Unicode格式的数据</span></span><br><span class="line"><span class="keyword">print</span> response.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看响应内容，response.content返回的字节流数据</span></span><br><span class="line"><span class="keyword">print</span> respones.content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看完整url地址</span></span><br><span class="line"><span class="keyword">print</span> response.url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看响应头部字符编码</span></span><br><span class="line"><span class="keyword">print</span> response.encoding</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看响应码</span></span><br><span class="line"><span class="keyword">print</span> response.status_code</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="string">'http://www.baidu.com/s?wd=%E9%95%BF%E5%9F%8E'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'utf-8'</span></span><br><span class="line"></span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure><p>使用response.text 时，Requests 会基于 HTTP 响应的文本编码自动解码响应内容，大多数 Unicode 字符集都能被无缝地解码。</p><p>使用response.content 时，返回的是服务器响应数据的原始二进制字节流，可以用来保存图片等二进制文件。</p><h2 id="基本POST请求（data参数）"><a href="#基本POST请求（data参数）" class="headerlink" title="基本POST请求（data参数）"></a>基本POST请求（data参数）</h2><ol><li>最基本的GET请求可以直接用post方法<br><code>response = requests.post(&quot;http://www.baidu.com/&quot;, data = data)</code></li><li>传入data数据<br>对于 POST 请求来说，我们一般需要为它增加一些参数。那么最基本的传参方法可以利用data这个参数。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">youdaoAPI</span><span class="params">(kw)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    :param kw: 翻译的内容</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"><span class="comment"># translate_o 去掉_o</span></span><br><span class="line">    url = <span class="string">"http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule"</span></span><br><span class="line">    response = requests.post(url, data=kw, headers=header)</span><br><span class="line">    res = response.content</span><br><span class="line">    tgt = json.loads(res)</span><br><span class="line">    print(tgt[<span class="string">"translateResult"</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    kw = input(<span class="string">"请输入你想翻译的内容："</span>)</span><br><span class="line">    timet = int(time.time() * <span class="number">1000</span>)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"i"</span>: kw,</span><br><span class="line">        <span class="string">"from"</span>: <span class="string">"AUTO"</span>,</span><br><span class="line">        <span class="string">"to"</span>: <span class="string">"AUTO"</span>,</span><br><span class="line">        <span class="string">"smartresult"</span>: <span class="string">"dict"</span>,</span><br><span class="line">        <span class="string">"client"</span>: <span class="string">"fanyideskweb"</span>,</span><br><span class="line">        <span class="string">"salt"</span>: timet,</span><br><span class="line">        <span class="string">"sign"</span>: <span class="string">"f66461b42fe9edb6d88230788fb33cfb"</span>,</span><br><span class="line">        <span class="string">"doctype"</span>: <span class="string">"json"</span>,</span><br><span class="line">        <span class="string">"version"</span>: <span class="string">"2.1"</span>,</span><br><span class="line">        <span class="string">"keyfrom"</span>: <span class="string">"fanyi.web"</span>,</span><br><span class="line">        <span class="string">"action"</span>: <span class="string">"FY_BY_REALTIME"</span>,</span><br><span class="line">        <span class="string">"typoResult"</span>: <span class="string">"false"</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    youdaoAPI(data)</span><br></pre></td></tr></table></figure><h1 id="如果是json文件可以直接显示"><a href="#如果是json文件可以直接显示" class="headerlink" title="如果是json文件可以直接显示"></a>如果是json文件可以直接显示</h1><p><code>print response.json()</code></p><p>运行结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"type"</span>:<span class="string">"EN2ZH_CN"</span>,<span class="attr">"errorCode"</span>:<span class="number">0</span>,<span class="attr">"elapsedTime"</span>:<span class="number">2</span>,<span class="attr">"translateResult"</span>:[[&#123;<span class="attr">"src"</span>:<span class="string">"i love python"</span>,<span class="attr">"tgt"</span>:<span class="string">"我喜欢python"</span>&#125;]],<span class="attr">"smartResult"</span>:&#123;<span class="attr">"type"</span>:<span class="number">1</span>,<span class="attr">"entries"</span>:[<span class="string">""</span>,<span class="string">"肆文"</span>,<span class="string">"高德纳"</span>]&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;u'errorCode': 0, u'elapsedTime': 0, u'translateResult': [[&#123;u'src': u'i love python', u'tgt': u'\u6211\u559c\u6b22python'&#125;]], u'smartResult': &#123;u'type': 1, u'entries': [u'', u'\u8086\u6587', u'\u9ad8\u5fb7\u7eb3']&#125;, u'type': u'EN2ZH_CN'&#125;</span><br></pre></td></tr></table></figure><p>代理（proxies参数）<br>如果需要使用代理，你可以通过为任意请求方法提供proxies参数来配置单个请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据协议类型，选择不同的代理</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">"http"</span>: <span class="string">"http://12.34.56.79:9527"</span>,</span><br><span class="line">  <span class="string">"https"</span>: <span class="string">"http://12.34.56.79:9527"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">"http://www.baidu.com"</span>, proxies = proxies)</span><br><span class="line"><span class="keyword">print</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带密码代理</span></span><br><span class="line">httpProxy = &#123;<span class="string">"https"</span>: <span class="string">"http://User1:123456@10.3.132.6:808"</span>&#125;</span><br></pre></td></tr></table></figure><p>web客户端验证<br>如果是Web客户端验证，需要添加 auth = (账户名, 密码)</p><p>web客户端验证<br>如果是Web客户端验证，需要添加 auth = (账户名, 密码)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">auth=(<span class="string">'test'</span>, <span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://192.168.199.107'</span>, auth = auth)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> response.text</span><br></pre></td></tr></table></figure><h2 id="Cookies-和-Sission"><a href="#Cookies-和-Sission" class="headerlink" title="Cookies 和 Sission"></a>Cookies 和 Sission</h2><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><p>如果一个响应中包含了cookie，那么我们可以利用 cookies参数拿到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">"http://www.baidu.com/"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 返回CookieJar对象:</span></span><br><span class="line">cookiejar = response.cookies</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 将CookieJar转为字典：</span></span><br><span class="line">cookiedict = requests.utils.dict_from_cookiejar(cookiejar)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> cookiejar</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> cookiedict</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;RequestsCookieJar[&lt;Cookie BDORZ=<span class="number">27315</span> <span class="keyword">for</span> .baidu.com/&gt;]&gt;</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">'BDORZ'</span>: <span class="string">'27315'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Sission"><a href="#Sission" class="headerlink" title="Sission"></a>Sission</h3><p>在 requests 里，session对象是一个非常常用的对象，这个对象代表一次用户会话：从客户端浏览器连接服务器开始，到客户端浏览器与服务器断开。</p><p>会话能让我们在跨请求时候保持某些参数，比如在同一个 Session 实例发出的所有请求之间保持 cookie 。</p><p>实现人人网登录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建session对象，可以保存Cookie值</span></span><br><span class="line">ssion = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 处理 headers</span></span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 需要登录的用户名和密码</span></span><br><span class="line">data = &#123;<span class="string">"email"</span>:<span class="string">"youremail"</span>, <span class="string">"password"</span>:<span class="string">"yourpassword"</span>&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 发送附带用户名和密码的请求，并获取登录后的Cookie值，保存在ssion里</span></span><br><span class="line">ssion.post(<span class="string">"http://www.renren.com/PLogin.do"</span>, data = data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. ssion包含用户登录后的Cookie值，可以直接访问那些登录后才可以访问的页面</span></span><br><span class="line">response = ssion.get(<span class="string">"http://www.renren.com/410043129/profile"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 打印响应内容</span></span><br><span class="line"><span class="keyword">print</span> response.text</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理HTTPS请求 SSL证书验证</span></span><br><span class="line"><span class="comment"># Requests也可以为HTTPS请求验证SSL证书：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要想检查某个主机的SSL证书，你可以使用 verify 参数（也可以不写）</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">"https://www.baidu.com/"</span>, verify=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以省略不写</span></span><br><span class="line"><span class="comment"># response = requests.get("https://www.baidu.com/")</span></span><br><span class="line"><span class="keyword">print</span> response.text</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">百度一下，你就知道 . . .</span><br></pre></td></tr></table></figure><p>如果SSL证书验证不通过，或者不信任服务器的安全证书，则会报出SSLError，比如12306的SSL证书：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">"https://www.12306.cn/mormhweb/"</span>)</span><br><span class="line">print response.text</span><br><span class="line"></span><br><span class="line"># 果然：</span><br><span class="line"># SSLError: ("bad handshake: Error([('SSL routines', 'ssl3_get_server_certificate', 'certificate verify failed')],)",)</span><br><span class="line"></span><br><span class="line"># 如果我们想跳过 12306 的证书验证，把 verify 设置为 False 就可以正常请求了。</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">"https://www.12306.cn/mormhweb/"</span>,verify=False)</span><br><span class="line">print response.text</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/013fe55b39eabca80120b9595f3d65.jpg@1280w_1l_2o_100sh.webp&quot; width=&quot;688&quot; height=&quot;400&quot; alt=&quot;git&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://lidx.club/categories/Python/"/>
    
    
      <category term="爬虫" scheme="https://lidx.club/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requests" scheme="https://lidx.club/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>handler 和 opener</title>
    <link href="https://lidx.club/2017/06/24/handler%20%E5%92%8C%20opener/"/>
    <id>https://lidx.club/2017/06/24/handler 和 opener/</id>
    <published>2017-06-24T02:42:27.000Z</published>
    <updated>2018-07-19T06:47:01.665Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zcool.cn/community/01d2775b323a2aa80120b9591c0f08.jpg@1280w_1l_2o_100sh.jpg" width="688" height="400" alt="git" align="center"></p><a id="more"></a><h1 id="Handler处理器和自定义Opener"><a href="#Handler处理器和自定义Opener" class="headerlink" title="Handler处理器和自定义Opener"></a>Handler处理器和自定义Opener</h1><p>opener是 urllib2.OpenerDirector 的实例，我们之前一直都在使用的urlopen，它是一个特殊的opener（也就是模块帮我们构建好的）。<br>但是基本的urlopen()方法不支持代理、cookie等其他的HTTP/HTTPS高级功能。所以要支持这些功能：</p><p>1、使用相关的Handler处理器来创建特定功能的处理器对象；<br>2、然后通过urllib2.build_opener()方法使用这些处理器对象，创建自定义opener对象；<br>3、使用自定义的opener对象，调用open()方法发送请求。<br>如果程序里所有的请求都使用自定义的opener，可以使用urllib2.install_opener()将自定义的 opener 对象 定义为 全局opener，表示如果之后凡是调用urlopen，都将使用这个opener。（根据自己的需求来选择）</p><h2 id="简单的自定义opener"><a href="#简单的自定义opener" class="headerlink" title="简单的自定义opener()"></a>简单的自定义opener()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建一个HTTPHandler 处理器对象，支持处理HTTP请求</span></span><br><span class="line">http_handler = urllib2.HTTPHandler()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建一个HTTPHandler 处理器对象，支持处理HTTPS请求</span></span><br><span class="line"><span class="comment"># http_handler = urllib2.HTTPSHandler()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用urllib2.build_opener()方法，创建支持处理HTTP请求的opener对象</span></span><br><span class="line">opener = urllib2.build_opener(http_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 Request请求</span></span><br><span class="line">request = urllib2.Request(<span class="string">"http://www.baidu.com/"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用自定义opener对象的open()方法，发送request请求</span></span><br><span class="line">response = opener.open(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取服务器响应内容</span></span><br><span class="line"><span class="keyword">print</span> response.read()</span><br></pre></td></tr></table></figure><p>这种方式发送请求得到的结果，和使用urllib2.urlopen()发送HTTP/HTTPS请求得到的结果是一样的。</p><p>如果在 HTTPHandler()增加 debuglevel=1参数，还会将 Debug Log 打开，这样程序在执行的时候，会把收包和发包的报头在屏幕上自动打印出来，方便调试，有时可以省去抓包的工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 仅需要修改的代码部分：</span><br><span class="line"></span><br><span class="line"># 构建一个HTTPHandler 处理器对象，支持处理HTTP请求，同时开启Debug Log，debuglevel 值默认 0</span><br><span class="line">http_handler = urllib2.HTTPHandler(debuglevel=1)</span><br><span class="line"></span><br><span class="line"># 构建一个HTTPHSandler 处理器对象，支持处理HTTPS请求，同时开启Debug Log，debuglevel 值默认 0</span><br><span class="line">https_handler = urllib2.HTTPSHandler(debuglevel=1)</span><br></pre></td></tr></table></figure><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie 是指某些网站服务器为了辨别用户身份和进行Session跟踪，而储存在用户浏览器上的文本文件，Cookie可以保持登录信息到用户下次与服务器的会话。</p><p>Cookie原理<br>HTTP是无状态的面向连接的协议, 为了保持连接状态, 引入了Cookie机制 Cookie是http消息头中的一种属性，包括：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Cookie名字（Name）</span><br><span class="line">Cookie的值（Value）</span><br><span class="line">Cookie的过期时间（Expires/Max-Age）</span><br><span class="line">Cookie作用路径（Path）</span><br><span class="line">Cookie所在域名（Domain），</span><br><span class="line">使用Cookie进行安全连接（Secure）。</span><br><span class="line"></span><br><span class="line">前两个参数是Cookie应用的必要条件，另外，还包括Cookie大小（Size，不同浏览器对Cookie个数及大小限制是有差异的）。</span><br></pre></td></tr></table></figure><p>Cookie由变量名和值组成，根据 Netscape公司的规定，Cookie格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set－Cookie: NAME=VALUE；Expires=DATE；Path=PATH；Domain=DOMAIN_NAME；SECURE</span><br></pre></td></tr></table></figure><p>Cookie应用<br>Cookies在爬虫方面最典型的应用是判定注册用户是否已经登录网站，用户可能会得到提示，是否在下一次进入此网站时保留用户信息以便简化登录手续。</p><p>cookielib库 和 HTTPCookieProcessor处理器<br>在Python处理Cookie，一般是通过cookielib模块和 urllib2模块的HTTPCookieProcessor处理器类一起使用。</p><p>cookielib模块：主要作用是提供用于存储cookie的对象</p><p>HTTPCookieProcessor处理器：主要作用是处理这些cookie对象，并构建handler对象。</p><p>cookielib 库<br>该模块主要的对象有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。</p><p>CookieJar：管理HTTP cookie值、存储HTTP请求生成的cookie、向传出的HTTP请求添加cookie的对象。整个cookie都存储在内存中，对CookieJar实例进行垃圾回收后cookie也将丢失。</p><p>FileCookieJar (filename,delayload=None,policy=None)：从CookieJar派生而来，用来创建FileCookieJar实例，检索cookie信息并将cookie存储到文件中。filename是存储cookie的文件名。delayload为True时支持延迟访问访问文件，即只有在需要时才读取文件或在文件中存储数据。</p><p>MozillaCookieJar (filename,delayload=None,policy=None)：从FileCookieJar派生而来，创建与Mozilla浏览器 cookies.txt兼容的FileCookieJar实例。</p><p>LWPCookieJar (filename,delayload=None,policy=None)：从FileCookieJar派生而来，创建与libwww-perl标准的 Set-Cookie3 文件格式兼容的FileCookieJar实例。</p><p>其实大多数情况下，我们只用CookieJar()，如果需要和本地文件交互，就用 MozillaCookjar() 或 LWPCookieJar()</p><p>我们来做几个案例：<br>1.获取Cookie，并保存到CookieJar()对象中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!C:\Python36\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> cookielib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个对象存储cookie</span></span><br><span class="line">cookie = cookielib.CookieJar()</span><br><span class="line"><span class="comment"># 提取cookie</span></span><br><span class="line">header = urllib2.HTTPCookieProcessor(cookie)</span><br><span class="line"><span class="comment"># 处理 cookie</span></span><br><span class="line">opener = urllib2.build_opener(header)</span><br><span class="line">response = opener.open(<span class="string">"http://www.baidu.com/"</span>)</span><br><span class="line">cookies = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cookie:</span><br><span class="line"><span class="keyword">print</span> c</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> cookie:</span><br><span class="line">cookies = cookies + data.name + <span class="string">"="</span> + data.value + <span class="string">"\r\n"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> cookies</span><br></pre></td></tr></table></figure><ol><li>访问网站获得cookie，并把获得的cookie保存在cookie文件中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!C:\Python36\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> cookielib</span><br><span class="line"></span><br><span class="line">filePath = <span class="string">"cookie.txt"</span></span><br><span class="line"></span><br><span class="line">cookie = cookielib.LWPCookieJar(filePath) <span class="comment"># 设置保存路径</span></span><br><span class="line">header = urllib2.HTTPCookieProcessor(cookie)</span><br><span class="line">opner = urllib2.build_opener(header)</span><br><span class="line">response = opner.open(<span class="string">"http://www.baidu.com/"</span>)</span><br><span class="line">cookie.save(ignore_discard=<span class="keyword">True</span>, ignore_expires=<span class="keyword">True</span>) <span class="comment"># 忽略错误</span></span><br></pre></td></tr></table></figure><ol><li>从文件中获取cookies，做为请求的一部分去访问</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!C:\Python36\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> cookielib</span><br><span class="line"></span><br><span class="line">filePath = <span class="string">"cookie.txt"</span></span><br><span class="line"></span><br><span class="line">cookie = cookielib.LWPCookieJar() <span class="comment"># 设置保存路径</span></span><br><span class="line">cookie.load(filePath, ignore_discard=<span class="keyword">True</span>, ignore_expires=<span class="keyword">True</span>) <span class="comment"># 忽略错误</span></span><br><span class="line">header = urllib2.HTTPCookieProcessor(cookie)</span><br><span class="line">opner = urllib2.build_opener(header)</span><br><span class="line">response = opner.open(<span class="string">"http://www.baidu.com/"</span>)</span><br><span class="line"><span class="keyword">print</span> response.read()</span><br></pre></td></tr></table></figure><h1 id="HTTP代理神器Fiddler"><a href="#HTTP代理神器Fiddler" class="headerlink" title="HTTP代理神器Fiddler"></a>HTTP代理神器Fiddler</h1><p>Fiddler是一款强大Web调试工具，它能记录所有客户端和服务器的HTTP请求。 Fiddler启动的时候，默认IE的代理设为了127.0.0.1:8888，而其他浏览器是需要手动设置。</p><h2 id="请求-Request-部分详解"><a href="#请求-Request-部分详解" class="headerlink" title="请求 (Request) 部分详解"></a>请求 (Request) 部分详解</h2><p>Headers —— 显示客户端发送到服务器的 HTTP 请求的 header，显示为一个分级视图，包含了 Web 客户端信息、Cookie、传输状态等。<br>Textview —— 显示 POST 请求的 body 部分为文本。<br>WebForms —— 显示请求的 GET 参数 和 POST body 内容。<br>HexView —— 用十六进制数据显示请求。<br>Auth —— 显示响应 header 中的 Proxy-Authorization(代理身份验证) 和 Authorization(授权) 信息.<br>Raw —— 将整个请求显示为纯文本。<br>JSON - 显示JSON格式文件。<br>XML —— 如果请求的 body 是 XML 格式，就是用分级的 XML 树来显示它。</p><h2 id="响应-Response-部分详解"><a href="#响应-Response-部分详解" class="headerlink" title="响应 (Response) 部分详解"></a>响应 (Response) 部分详解</h2><p>Transformer —— 显示响应的编码信息。<br>Headers —— 用分级视图显示响应的 header。<br>TextView —— 使用文本显示相应的 body。<br>ImageVies —— 如果请求是图片资源，显示响应的图片。<br>HexView —— 用十六进制数据显示响应。<br>WebView —— 响应在 Web 浏览器中的预览效果。<br>Auth —— 显示响应 header 中的 Proxy-Authorization(代理身份验证) 和 Authorization(授权) 信息。<br>Caching —— 显示此请求的缓存信息。<br>Privacy —— 显示此请求的私密 (P3P) 信息。<br>Raw —— 将整个响应显示为纯文本。<br>JSON - 显示JSON格式文件。<br>XML —— 如果响应的 body 是 XML 格式，就是用分级的 XML 树来显示它 。</p><h3 id="模拟登陆人人网"><a href="#模拟登陆人人网" class="headerlink" title="模拟登陆人人网"></a>模拟登陆人人网</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!C:\Python36\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Time : 2018/5/4 16:11</span></span><br><span class="line"><span class="string">@Author : Fate</span></span><br><span class="line"><span class="string">@File : urllibCookie.py</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, parse</span><br><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> cookiejar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个cookie对象</span></span><br><span class="line">filename = <span class="string">"cookie.txt"</span></span><br><span class="line">cookie = cookiejar.LWPCookieJar(filename)</span><br><span class="line"><span class="comment"># 提取cookie</span></span><br><span class="line">hander_cookie = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line"><span class="comment"># 创建一个打开启</span></span><br><span class="line">opener = urllib.request.build_opener(hander_cookie)</span><br><span class="line"><span class="comment"># 安装opener,可全局使用</span></span><br><span class="line">urllib.request.install_opener(opener)</span><br><span class="line">header = &#123;</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36"</span>&#125;</span><br><span class="line">loginUrl = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">"email"</span>: <span class="string">"18588403840"</span>,</span><br><span class="line"><span class="string">"password"</span>: <span class="string">"Changeme_123"</span></span><br><span class="line">&#125;</span><br><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">req = urllib.request.Request(url=loginUrl, headers=header, data=data)</span><br><span class="line">response = urllib.request.urlopen(req)</span><br><span class="line">cookie.save(ignore_discard=<span class="keyword">True</span>, ignore_expires=<span class="keyword">True</span>) <span class="comment"># 保存cookie可重复使用</span></span><br><span class="line">print(response.read())</span><br><span class="line"></span><br><span class="line">indexurl = <span class="string">"http://zhibo.renren.com/top"</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"=================="</span>)</span><br><span class="line">print(urllib.request.urlopen(indexurl).read().decode())</span><br></pre></td></tr></table></figure><h2 id="重复使用cookies"><a href="#重复使用cookies" class="headerlink" title="重复使用cookies"></a>重复使用cookies</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!C:\Python36\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Time : 2018/5/4 16:11</span></span><br><span class="line"><span class="string">@Author : Fate</span></span><br><span class="line"><span class="string">@File : urllibCookie.py</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, parse</span><br><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> cookiejar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个cookie对象</span></span><br><span class="line">filename = <span class="string">"cookie.txt"</span></span><br><span class="line">cookie = cookiejar.LWPCookieJar()</span><br><span class="line">cookie.load(filename, ignore_expires=<span class="keyword">True</span>, ignore_discard=<span class="keyword">True</span>) <span class="comment"># 加载cookie</span></span><br><span class="line"><span class="comment"># 提取cookie</span></span><br><span class="line">hander_cookie = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line"><span class="comment"># 创建一个打开启</span></span><br><span class="line">opener = urllib.request.build_opener(hander_cookie)</span><br><span class="line"><span class="comment"># 安装opener,可全局使用</span></span><br><span class="line">urllib.request.install_opener(opener)</span><br><span class="line">header = &#123;</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line">indexurl = <span class="string">"http://zhibo.renren.com/top"</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"=================="</span>)</span><br><span class="line">print(urllib.request.urlopen(indexurl).read().decode())</span><br></pre></td></tr></table></figure><h1 id="ProxyHandler处理器（代理设置）"><a href="#ProxyHandler处理器（代理设置）" class="headerlink" title="ProxyHandler处理器（代理设置）"></a>ProxyHandler处理器（代理设置）</h1><p>使用代理IP，这是爬虫/反爬虫的第二大招，通常也是最好用的。</p><p>很多网站会检测某一段时间某个IP的访问次数(通过流量统计，系统日志等)，如果访问次数多的不像正常人，它会禁止这个IP的访问。</p><p>所以我们可以设置一些代理服务器，每隔一段时间换一个代理，就算IP被禁止，依然可以换个IP继续爬取。</p><p>urllib2中通过ProxyHandler来设置使用代理服务器，下面代码说明如何使用自定义opener来使用代理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noPasswd</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 安装ccproxy代理</span></span><br><span class="line">    <span class="comment"># 禁止外部用户访问--》设置-》高级-》网络-》禁止局域网外用户，取消勾选</span></span><br><span class="line">    httpproxy = urllib2.ProxyHandler(&#123;<span class="string">"http"</span>: <span class="string">"10.36.100.109:808"</span>&#125;)  <span class="comment"># 代理，无需账号</span></span><br><span class="line">    opener = urllib2.build_opener(httpproxy)  <span class="comment"># 创建一个打开器</span></span><br><span class="line">    request = urllib2.Request(<span class="string">"https://www.baidu.com/"</span>)  <span class="comment"># 访问百度</span></span><br><span class="line">    response = opener.open(request)  <span class="comment"># 使用代理打开网页</span></span><br><span class="line">    <span class="keyword">print</span> response.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用密码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">usePasswd</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">    httpproxy = urllib2.ProxyHandler(&#123;"http": "User:123456@10.36.100.109:808"&#125;)  # 代理，无需账号</span><br><span class="line">    opener = urllib2.build_opener(httpproxy)  <span class="comment"># 创建一个打开器</span></span><br><span class="line">    request = urllib2.Request(<span class="string">"http://www.baidu.com/"</span>)  <span class="comment"># 访问百度</span></span><br><span class="line">    response = opener.open(request)  <span class="comment"># 使用代理打开网页</span></span><br><span class="line">    <span class="keyword">print</span> response.read()</span><br></pre></td></tr></table></figure><p>免费的开放代理获取基本没有成本，我们可以在一些代理网站上收集这些免费代理，测试后如果可以用，就把它收集起来用在爬虫上面。</p><p>免费短期代理网站举例：</p><p>西刺免费代理IP<br>快代理免费代理<br>Proxy360代理<br>全网代理IP<br>如果代理IP足够多，就可以像随机获取User-Agent一样，随机选择一个代理去访问网站。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设此时有一已经格式化好的ip代理地址proxies</span></span><br><span class="line"><span class="comment"># 西刺代理：http://www.xicidaili.com/</span></span><br><span class="line">iplist = [</span><br><span class="line">    <span class="string">"http://183.159.84.198:18118"</span>,</span><br><span class="line">    <span class="string">"http://183.159.92.206:18118"</span>,</span><br><span class="line">    <span class="string">"http://119.179.209.43:61234"</span>,</span><br><span class="line">    <span class="string">"http://183.159.82.181:18118"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(random.choice(iplist))</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36X-Requested-With: XMLHttpRequest"</span>&#125;</span><br><span class="line">url = <span class="string">'https://blog.csdn.net/linangfs/article/details/78331419?locationNum=9&amp;fps=1'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    proxies = &#123;<span class="string">"http"</span>: random.choice(iplist)&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page = requests.get(url, headers=headers, proxies=proxies)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'失败'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'成功'</span>)</span><br></pre></td></tr></table></figure><h1 id="HTTP响应状态码参考"><a href="#HTTP响应状态码参考" class="headerlink" title="HTTP响应状态码参考"></a>HTTP响应状态码参考</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line">1xx:信息</span><br><span class="line"></span><br><span class="line">100 Continue</span><br><span class="line">服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。</span><br><span class="line">101 Switching Protocols</span><br><span class="line">服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2xx:成功</span><br><span class="line"></span><br><span class="line">200 OK</span><br><span class="line">请求成功（其后是对GET和POST请求的应答文档）</span><br><span class="line">201 Created</span><br><span class="line">请求被创建完成，同时新的资源被创建。</span><br><span class="line">202 Accepted</span><br><span class="line">供处理的请求已被接受，但是处理未完成。</span><br><span class="line">203 Non-authoritative Information</span><br><span class="line">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。</span><br><span class="line">204 No Content</span><br><span class="line">没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</span><br><span class="line">205 Reset Content</span><br><span class="line">没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</span><br><span class="line">206 Partial Content</span><br><span class="line">客户发送了一个带有Range头的GET请求，服务器完成了它。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3xx:重定向</span><br><span class="line"></span><br><span class="line">300 Multiple Choices</span><br><span class="line">多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</span><br><span class="line">301 Moved Permanently</span><br><span class="line">所请求的页面已经转移至新的url。</span><br><span class="line">302 Moved Temporarily</span><br><span class="line">所请求的页面已经临时转移至新的url。</span><br><span class="line">303 See Other</span><br><span class="line">所请求的页面可在别的url下被找到。</span><br><span class="line">304 Not Modified</span><br><span class="line">未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</span><br><span class="line">305 Use Proxy</span><br><span class="line">客户请求的文档应该通过Location头所指明的代理服务器提取。</span><br><span class="line">306 Unused</span><br><span class="line">此代码被用于前一版本。目前已不再使用，但是代码依然被保留。</span><br><span class="line">307 Temporary Redirect</span><br><span class="line">被请求的页面已经临时移至新的url。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4xx:客户端错误</span><br><span class="line"></span><br><span class="line">400 Bad Request</span><br><span class="line">服务器未能理解请求。</span><br><span class="line">401 Unauthorized</span><br><span class="line">被请求的页面需要用户名和密码。</span><br><span class="line">401.1</span><br><span class="line">登录失败。</span><br><span class="line">401.2</span><br><span class="line">服务器配置导致登录失败。</span><br><span class="line">401.3</span><br><span class="line">由于 ACL 对资源的限制而未获得授权。</span><br><span class="line">401.4</span><br><span class="line">筛选器授权失败。</span><br><span class="line">401.5</span><br><span class="line">ISAPI/CGI 应用程序授权失败。</span><br><span class="line">401.7</span><br><span class="line">访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。</span><br><span class="line">402 Payment Required</span><br><span class="line">此代码尚无法使用。</span><br><span class="line">403 Forbidden</span><br><span class="line">对被请求页面的访问被禁止。</span><br><span class="line">403.1</span><br><span class="line">执行访问被禁止。</span><br><span class="line">403.2</span><br><span class="line">读访问被禁止。</span><br><span class="line">403.3</span><br><span class="line">写访问被禁止。</span><br><span class="line">403.4</span><br><span class="line">要求 SSL。</span><br><span class="line">403.5</span><br><span class="line">要求 SSL 128。</span><br><span class="line">403.6</span><br><span class="line">IP 地址被拒绝。</span><br><span class="line">403.7</span><br><span class="line">要求客户端证书。</span><br><span class="line">403.8</span><br><span class="line">站点访问被拒绝。</span><br><span class="line">403.9</span><br><span class="line">用户数过多。</span><br><span class="line">403.10</span><br><span class="line">配置无效。</span><br><span class="line">403.11</span><br><span class="line">密码更改。</span><br><span class="line">403.12</span><br><span class="line">拒绝访问映射表。</span><br><span class="line">403.13</span><br><span class="line">客户端证书被吊销。</span><br><span class="line">403.14</span><br><span class="line">拒绝目录列表。</span><br><span class="line">403.15</span><br><span class="line">超出客户端访问许可。</span><br><span class="line">403.16</span><br><span class="line">客户端证书不受信任或无效。</span><br><span class="line">403.17</span><br><span class="line">客户端证书已过期或尚未生效。</span><br><span class="line">403.18</span><br><span class="line">在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。</span><br><span class="line">403.19</span><br><span class="line">不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。</span><br><span class="line">403.20</span><br><span class="line">Passport 登录失败。这个错误代码为 IIS 6.0 所专用。</span><br><span class="line">404 Not Found</span><br><span class="line">服务器无法找到被请求的页面。</span><br><span class="line">404.0</span><br><span class="line">没有找到文件或目录。</span><br><span class="line">404.1</span><br><span class="line">无法在所请求的端口上访问 Web 站点。</span><br><span class="line">404.2</span><br><span class="line">Web 服务扩展锁定策略阻止本请求。</span><br><span class="line">404.3</span><br><span class="line">MIME 映射策略阻止本请求。</span><br><span class="line">405 Method Not Allowed</span><br><span class="line">请求中指定的方法不被允许。</span><br><span class="line">406 Not Acceptable</span><br><span class="line">服务器生成的响应无法被客户端所接受。</span><br><span class="line">407 Proxy Authentication Required</span><br><span class="line">用户必须首先使用代理服务器进行验证，这样请求才会被处理。</span><br><span class="line">408 Request Timeout</span><br><span class="line">请求超出了服务器的等待时间。</span><br><span class="line">409 Conflict</span><br><span class="line">由于冲突，请求无法被完成。</span><br><span class="line">410 Gone</span><br><span class="line">被请求的页面不可用。</span><br><span class="line">411 Length Required</span><br><span class="line">&quot;Content-Length&quot; 未被定义。如果无此内容，服务器不会接受请求。</span><br><span class="line">412 Precondition Failed</span><br><span class="line">请求中的前提条件被服务器评估为失败。</span><br><span class="line">413 Request Entity Too Large</span><br><span class="line">由于所请求的实体的太大，服务器不会接受请求。</span><br><span class="line">414 Request-url Too Long</span><br><span class="line">由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况。</span><br><span class="line">415 Unsupported Media Type</span><br><span class="line">由于媒介类型不被支持，服务器不会接受请求。</span><br><span class="line">416 Requested Range Not Satisfiable</span><br><span class="line">服务器不能满足客户在请求中指定的Range头。</span><br><span class="line">417 Expectation Failed</span><br><span class="line">执行失败。</span><br><span class="line">423</span><br><span class="line">锁定的错误。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5xx:服务器错误</span><br><span class="line"></span><br><span class="line">500 Internal Server Error</span><br><span class="line">请求未完成。服务器遇到不可预知的情况。</span><br><span class="line">500.12</span><br><span class="line">应用程序正忙于在 Web 服务器上重新启动。</span><br><span class="line">500.13</span><br><span class="line">Web 服务器太忙。</span><br><span class="line">500.15</span><br><span class="line">不允许直接请求 Global.asa。</span><br><span class="line">500.16</span><br><span class="line">UNC 授权凭据不正确。这个错误代码为 IIS 6.0 所专用。</span><br><span class="line">500.18</span><br><span class="line">URL 授权存储不能打开。这个错误代码为 IIS 6.0 所专用。</span><br><span class="line">500.100</span><br><span class="line">内部 ASP 错误。</span><br><span class="line">501 Not Implemented</span><br><span class="line">请求未完成。服务器不支持所请求的功能。</span><br><span class="line">502 Bad Gateway</span><br><span class="line">请求未完成。服务器从上游服务器收到一个无效的响应。</span><br><span class="line">502.1</span><br><span class="line">CGI 应用程序超时。　·</span><br><span class="line">502.2</span><br><span class="line">CGI 应用程序出错。</span><br><span class="line">503 Service Unavailable</span><br><span class="line">请求未完成。服务器临时过载或当机。</span><br><span class="line">504 Gateway Timeout</span><br><span class="line">网关超时。</span><br><span class="line">505 HTTP Version Not Supported</span><br><span class="line">服务器不支持请求中指明的HTTP协议版本</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01d2775b323a2aa80120b9591c0f08.jpg@1280w_1l_2o_100sh.jpg&quot; width=&quot;688&quot; height=&quot;400&quot; alt=&quot;git&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://lidx.club/categories/Python/"/>
    
    
      <category term="handler" scheme="https://lidx.club/tags/handler/"/>
    
      <category term="爬虫" scheme="https://lidx.club/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>urllib</title>
    <link href="https://lidx.club/2017/06/23/urllib/"/>
    <id>https://lidx.club/2017/06/23/urllib/</id>
    <published>2017-06-23T01:54:16.000Z</published>
    <updated>2018-07-18T15:39:16.635Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zcool.cn/community/01e6db5b367f69a80121b99455baae.jpg@1280w_1l_2o_100sh.webp" width="688" height="400" alt="git" align="center"></p><a id="more"></a><h1 id="urllib2的基本使用"><a href="#urllib2的基本使用" class="headerlink" title="urllib2的基本使用"></a>urllib2的基本使用</h1><p>所谓网页抓取，就是把URL地址中指定的网络资源从网络流中读取出来，保存到本地。 在Python中有很多库可以用来抓取网页，我们先学习urllib2。</p><p>urllib2 是 Python2.7 自带的模块(不需要下载，导入即可使用)</p><p>urllib2 官方文档：<a href="https://docs.python.org/2/library/urllib2.html" target="_blank" rel="noopener">https://docs.python.org/2/library/urllib2.html</a></p><p>urllib2 源码：<a href="https://hg.python.org/cpython/file/2.7/Lib/urllib2.py" target="_blank" rel="noopener">https://hg.python.org/cpython/file/2.7/Lib/urllib2.py</a></p><p>urllib2 在 python3.x 中被改为urllib.request</p><h2 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h2><ul><li>01读取网页的三种方式</li></ul><h2 id="urlopen"><a href="#urlopen" class="headerlink" title="urlopen"></a>urlopen</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向指定的url发送请求，返回一个类文件对象，支持python文件操作</span></span><br><span class="line">read()</span><br><span class="line">readlines()</span><br><span class="line">readline()</span><br></pre></td></tr></table></figure><h2 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h2><p>有一些网站不喜欢被爬虫程序访问，所以会检测连接对象，如果是爬虫程序，也就是非人点击访问，它就会不让你继续访问，所以为了要让程序可以正常运行，需要隐藏自己的爬虫程序的身份。此时，我们就可以通过设置User Agent的来达到隐藏身份的目的，User Agent的中文名为用户代理，简称UA。</p><p>User Agent存放于Headers中，服务器就是通过查看Headers中的User Agent来判断是谁在访问。在Python中，如果不设置User Agent，程序将使用默认的参数，那么这个User Agent就会有Python的字样，如果服务器检查User Agent，那么没有设置User Agent的Python程序将无法正常访问网站。</p><p>常用消息头(详解http请求消息头)</p><ul><li>Accept:text/html,image/*(告诉服务器，浏览器可以接受文本，网页图片)</li><li>Accept-Charaset:ISO-8859-1 [接受字符编码：iso-8859-1]</li><li>Accept-Encoding:gzip,compress[可以接受  gzip,compress压缩后数据]</li><li>Accept-Language:zh-cn[浏览器支持的语言]   </li><li>Host:localhost:8080[浏览器要找的主机]</li><li>Referer:<a href="http://localhost:8080/test/abc.html[告诉服务器我来自哪里,常用于防止下载，盗链]" target="_blank" rel="noopener">http://localhost:8080/test/abc.html[告诉服务器我来自哪里,常用于防止下载，盗链]</a></li><li>User-Agent:Mozilla/4.0(Com…)[告诉服务器我的浏览器内核]</li><li>Cookie：[会话]</li><li>Connection:close/Keep-Alive [保持链接，发完数据后，我不关闭链接]</li><li>Date:[浏览器发送数据的请求时间]</li><li>02大灰狼冒充大白兔</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header = &#123;</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36"</span>&#125;</span><br><span class="line">request = urllib2.Request(url, headers=header) <span class="comment"># 构造一个请求对象发送请求，伪装浏览器访问</span></span><br></pre></td></tr></table></figure><h2 id="添加更多的Header信息"><a href="#添加更多的Header信息" class="headerlink" title="添加更多的Header信息"></a>添加更多的Header信息</h2><p>在 HTTP Request 中加入特定的 Header，来构造一个完整的HTTP请求消息。</p><p>可以通过调用Request.add_header() 添加/修改一个特定的header 也可以通过调用Request.get_header()来查看已有的header。</p><p>添加一个特定的header</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.add_header(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>) <span class="comment"># 一直活着</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">request.add_header(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>) <span class="comment"># 一直活着</span></span><br><span class="line"><span class="keyword">print</span> request.get_full_url() <span class="comment"># 访问的网页链接</span></span><br><span class="line"><span class="keyword">print</span> request.get_host() <span class="comment"># 服务器域名</span></span><br><span class="line"><span class="keyword">print</span> request.get_method() <span class="comment"># get或post</span></span><br><span class="line"><span class="keyword">print</span> request.get_type() <span class="comment"># http/https/ftp</span></span><br><span class="line"></span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line"><span class="keyword">print</span> response.code <span class="comment"># 状态码200, 404，500</span></span><br><span class="line"><span class="keyword">print</span> response.info <span class="comment"># 网页详细信息</span></span><br><span class="line"></span><br><span class="line">data = response.read().decode(<span class="string">"gb2312"</span>)</span><br><span class="line"><span class="keyword">print</span> response.code <span class="comment"># 响应状态码</span></span><br><span class="line"><span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p>我们都知道Http协议中参数的传输是”key=value”这种简直对形式的，如果要传多个参数就需要用“&amp;”符号对键值对进行分割。如”?name1=value1&amp;name2=value2”，这样在服务端在收到这种字符串的时候，会用“&amp;”分割出每一个参数，然后再用“=”来分割出参数值。</p><ul><li>03模拟百度搜索<br>urllib.urlencode()</li></ul><p>urllib 和 urllib2 都是接受URL请求的相关模块，但是提供了不同的功能。两个最显著的不同如下：<br>urllib 仅可以接受URL，不能创建 设置了headers 的Request 类实例；</p><p>但是 urllib 提供 urlencode 方法用来GET查询字符串的产生，而 urllib2 则没有。（这是 urllib 和 urllib2 经常一起使用的主要原因）</p><p>编码工作使用urllib的urlencode()函数，帮我们将key:value这样的键值对转换成”key=value”这样的字符串，解码工作可以使用urllib的unquote()函数。(注意，不是urllib2.urlencode())</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">urllib.urlencode(keyWord) <span class="comment"># url编码</span></span><br><span class="line">urllib.unquote(kw) <span class="comment"># 解码</span></span><br></pre></td></tr></table></figure><ul><li>04模拟搜索爬取智联招聘抓取岗位数量<br><a href="http://sou.zhaopin.com/jobs/searchresult.ashx?jl=深圳&amp;kw=python" target="_blank" rel="noopener">http://sou.zhaopin.com/jobs/searchresult.ashx?jl=深圳&amp;kw=python</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">mystr = <span class="string">"""&lt;span class=\"search_yx_tj\"&gt;</span></span><br><span class="line"><span class="string">共&lt;em&gt;7287&lt;/em&gt;个职位满足条件</span></span><br><span class="line"><span class="string">&lt;/span&gt;"""</span></span><br><span class="line"></span><br><span class="line">myre = <span class="string">"&lt;em&gt;(\d+)&lt;/em&gt;"</span></span><br><span class="line">regex = re.compile(myre, re.I)</span><br><span class="line"></span><br><span class="line">mylist = regex.findall(mystr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> mylist[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="GET和POST请求"><a href="#GET和POST请求" class="headerlink" title="GET和POST请求"></a>GET和POST请求</h2><ul><li>05POST爬取网易云音乐评论</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">json_dict = json.loads(list)</span><br><span class="line"><span class="keyword">print</span> list</span><br><span class="line">hot_comments = json_dict[<span class="string">'hotComments'</span>] <span class="comment"># 热门评论</span></span><br><span class="line"></span><br><span class="line">hot_comments_list = []</span><br><span class="line">print(<span class="string">"共有%d条热门评论!"</span> % len(hot_comments))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> hot_comments:</span><br><span class="line"></span><br><span class="line">comment = item[<span class="string">'content'</span>] <span class="comment"># 评论内容</span></span><br><span class="line"></span><br><span class="line">likedCount = item[<span class="string">'likedCount'</span>] <span class="comment"># 点赞总数</span></span><br><span class="line"></span><br><span class="line">comment_time = item[<span class="string">'time'</span>] <span class="comment"># 评论时间(时间戳)</span></span><br><span class="line"></span><br><span class="line">userID = item[<span class="string">'user'</span>][<span class="string">'userId'</span>] <span class="comment"># 评论者id</span></span><br><span class="line"></span><br><span class="line">nickname = item[<span class="string">'user'</span>][<span class="string">'nickname'</span>] <span class="comment"># 昵称</span></span><br><span class="line"></span><br><span class="line">avatarUrl = item[<span class="string">'user'</span>][<span class="string">'avatarUrl'</span>] <span class="comment"># 头像地址</span></span><br><span class="line">comment_info = (comment, likedCount, comment_time, userID, nickname, avatarUrl)</span><br><span class="line">hot_comments_list.append(comment_info)</span><br></pre></td></tr></table></figure><h2 id="处理HTTPS请求-SSL证书验证"><a href="#处理HTTPS请求-SSL证书验证" class="headerlink" title="处理HTTPS请求 SSL证书验证"></a>处理HTTPS请求 SSL证书验证</h2><p>现在随处可见 https 开头的网站，urllib2可以为 HTTPS 请求验证SSL证书，就像web浏览器一样，如果网站的SSL证书是经过CA认证的，则能够正常访问，如：<a href="https://www.baidu.com/等.." target="_blank" rel="noopener">https://www.baidu.com/等..</a>.</p><p>如果SSL证书验证不通过，或者操作系统不信任服务器的安全证书，比如浏览器在访问12306网站如：<a href="https://www.12306.cn/mormhweb/的时候，会警告用户证书不受信任。（据说" target="_blank" rel="noopener">https://www.12306.cn/mormhweb/的时候，会警告用户证书不受信任。（据说</a> 12306 网站证书是自己做的，没有通过CA认证）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 导入Python SSL处理模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 表示忽略未经核实的SSL证书认证</span></span><br><span class="line"></span><br><span class="line">context = ssl._create_unverified_context()</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://www.12306.cn/mormhweb/"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line">request = urllib2.Request(url, headers = headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 在urlopen()方法里 指明添加 context 参数</span></span><br><span class="line"></span><br><span class="line">response = urllib2.urlopen(request, context = context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> response.read()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01e6db5b367f69a80121b99455baae.jpg@1280w_1l_2o_100sh.webp&quot; width=&quot;688&quot; height=&quot;400&quot; alt=&quot;git&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://lidx.club/categories/Python/"/>
    
    
      <category term="爬虫" scheme="https://lidx.club/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="urllib" scheme="https://lidx.club/tags/urllib/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy 框架</title>
    <link href="https://lidx.club/2017/06/10/Scrapy%20%E6%A1%86%E6%9E%B6/"/>
    <id>https://lidx.club/2017/06/10/Scrapy 框架/</id>
    <published>2017-06-10T12:30:09.000Z</published>
    <updated>2018-07-18T15:44:11.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scrapy-框架"><a href="#Scrapy-框架" class="headerlink" title="Scrapy 框架"></a>Scrapy 框架</h1><ul><li>Scrapy是用纯Python实现一个为了爬取网站数据、提取结构性数据而编写的应用框架，用途非常广泛。</li><li>框架的力量，用户只需要定制开发几个模块就可以轻松的实现一个爬虫，用来抓取网页内容以及各种图片，非常方便。</li><li>Scrapy 使用了 Twisted(其主要对手是Tornado)多线程异步网络框架来处理网络通讯，可以加快我们的下载速度，不用自己去实现异步框架，并且包含了各种中间件接口，可以灵活的完成各种需求。</li></ul><h1 id="Scrapy架构图-绿线是数据流向"><a href="#Scrapy架构图-绿线是数据流向" class="headerlink" title="Scrapy架构图(绿线是数据流向)"></a>Scrapy架构图(绿线是数据流向)</h1><p><img src="D:\F\Project\Marine\day07\scrapy数据流向.png" alt="image"></p><ul><li>Scrapy Engine(引擎): 负责Spider、ItemPipeline、Downloader、Scheduler中间的通讯，信号、数据传递等。</li><li><code>Scheduler(调度器)</code>: 它负责接受<code>引擎</code>发送过来的Request请求，并按照一定的方式进行整理排列，入队，当<code>引擎</code>需要时，交还给<code>引擎</code>。</li><li><code>Downloader（下载器）</code>：负责下载<code>Scrapy Engine(引擎)</code>发送的所有Requests请求，并将其获取到的Responses交还给<code>Scrapy Engine(引擎)</code>，由<code>引擎</code>交给<code>Spider</code>来处理。</li><li><code>Spider（爬虫）</code>：它负责处理所有Responses,从中分析提取数据，获取Item字段需要的数据，并将需要跟进的URL提交给<code>引擎</code>，再次进入<code>Scheduler(调度器)</code>。</li><li><code>Item Pipeline(管道)</code>：它负责处理<code>Spider</code>中获取到的Item，并进行进行后期处理（详细分析、过滤、存储等）的地方。</li><li><code>Downloader Middlewares（下载中间件）</code>：你可以当作是一个可以自定义扩展下载功能的组件。</li><li><code>Spider Middlewares（Spider中间件）</code>：你可以理解为是一个可以自定扩展和操作<code>引擎</code>和<code>Spider</code>中间<code>通信</code>的功能组件（比如进入<code>Spider</code>的Responses;和从<code>Spider</code>出去的Requests）</li></ul><h1 id="Scrapy的运作流程"><a href="#Scrapy的运作流程" class="headerlink" title="Scrapy的运作流程"></a>Scrapy的运作流程</h1><p>代码写好，程序开始运行…</p><ol><li><code>引擎</code>：Hi！<code>Spider</code>, 你要处理哪一个网站？</li><li><code>Spider</code>：老大要我处理xxx.com。</li><li><code>引擎</code>：你把第一个需要处理的URL给我吧。</li><li><code>Spider</code>：给你，第一个URL是xxxxxxx.com。</li><li><code>引擎</code>：Hi！<code>调度器</code>，我这有request请求你帮我排序入队一下。</li><li><code>调度器</code>：好的，正在处理你等一下。</li><li><code>引擎</code>：Hi！<code>调度器</code>，把你处理好的request请求给我。</li><li><code>调度器</code>：给你，这是我处理好的request。</li><li><code>引擎</code>：Hi！下载器，你按照老大的<code>下载中间件</code>的设置帮我下载一下这个request请求。</li><li><code>下载器</code>：好的！给你，这是下载好的东西。（如果失败：sorry，这个request下载失败了。然后<code>引擎</code>告诉<code>调度器</code>，这个request下载失败了，你记录一下，我们待会儿再下载）</li><li><code>引擎</code>：Hi！<code>Spider</code>，这是下载好的东西，并且已经按照老大的<code>下载中间件</code>处理过了，你自己处理一下（注意！这儿responses默认是交给<code>def parse()</code>这个函数处理的）</li><li><code>Spider</code>：（处理完毕数据之后对于需要跟进的URL），Hi！<code>引擎</code>，我这里有两个结果，这个是我需要跟进的URL，还有这个是我获取到的Item数据。</li><li><code>引擎</code>：Hi ！<code>管道</code>我这儿有个item你帮我处理一下！<code>调度器</code>！这是需要跟进URL你帮我处理下。然后从第四步开始循环，直到获取完老大需要全部信息。</li><li><code>管道`</code>调度器`：好的，现在就做！</li></ol><p><strong>注意！只有当</strong><code>调度器</code><strong>中不存在任何request了，整个程序才会停止，（也就是说，对于下载失败的URL，Scrapy也会重新下载。）</strong></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、安装wheel</span><br><span class="line">pip install wheel</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、安装lxml</span><br><span class="line">pip install lxml</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、安装pyopenssl</span><br><span class="line">pip install pyopenssl</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、安装Twisted</span><br><span class="line">①从 http://www.lfd.uci.edu/~gohlke/pythonlibs/ Ctrl + F 输入Twisted下载</span><br><span class="line">②把下载好的文件放到python3<span class="number">.6</span>安装目录下的Scripts目录下，然后Shift+鼠标右键此处打开命令行，运行pip install Twisted + Tab键自动补全</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、安装pywin32</span><br><span class="line">pip install pywin32</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、安装scrapy</span><br><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure><h1 id="Scrapy官网"><a href="#Scrapy官网" class="headerlink" title="Scrapy官网"></a>Scrapy官网</h1><p>Scrapy框架官方网址：<a href="https://legacy.gitbook.com/book/fategithub/pythonspider/edit#" target="_blank" rel="noopener">http://doc.scrapy.org/en/latest</a></p><p>Scrapy中文维护站点：<a href="https://legacy.gitbook.com/book/fategithub/pythonspider/edit#" target="_blank" rel="noopener">http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html</a></p><h3 id="Ubuntu-需要9-10或以上版本安装方式"><a href="#Ubuntu-需要9-10或以上版本安装方式" class="headerlink" title="Ubuntu 需要9.10或以上版本安装方式"></a>Ubuntu 需要9.10或以上版本安装方式</h3><ul><li><p>Python 2 / 3</p></li><li><p>安装非Python的依赖</p><p><code>sudo apt-get install python-dev python-pip libxml2-dev libxslt1-dev zlib1g-dev libffi-dev libssl-dev</code></p></li><li><p>通过pip 安装 Scrapy 框架</p><p><code>sudo pip install scrapy</code></p></li></ul><p>安装后，只要在命令终端输入 scrapy，提示类似以下结果，代表已经安装成功</p><p>具体Scrapy安装流程参考：<a href="http://doc.scrapy.org/en/latest/intro/install.html#intro-install-platform-notes里面有各个平台的安装方法" target="_blank" rel="noopener">http://doc.scrapy.org/en/latest/intro/install.html#intro-install-platform-notes里面有各个平台的安装方法</a></p><h1 id="Scrapy-爬虫-一共需要4步："><a href="#Scrapy-爬虫-一共需要4步：" class="headerlink" title="Scrapy 爬虫 一共需要4步："></a>Scrapy 爬虫 一共需要4步：</h1><ul><li>新建项目 (scrapy startproject xxx)：新建一个新的爬虫项目</li><li>明确目标 （编写items.py）：明确你想要抓取的目标</li><li>制作爬虫 （spiders/xxspider.py）：制作爬虫开始爬取网页</li><li>存储内容 （pipelines.py）：设计管道存储爬取内容</li></ul><h1 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h1><ul><li>创建一个Scrapy项目</li><li>定义提取的结构化数据(Item)</li><li>编写爬取网站的 Spider 并提取出结构化数据(Item)</li><li>编写 Item Pipelines 来存储提取到的Item(即结构化数据)</li></ul><h2 id="一-新建项目-scrapy-startproject"><a href="#一-新建项目-scrapy-startproject" class="headerlink" title="一. 新建项目(scrapy startproject)"></a>一. 新建项目(scrapy startproject)</h2><ul><li>在开始爬取之前，必须创建一个新的Scrapy项目。进入自定义的项目目录中，运行下列命令：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject mySpider</span><br></pre></td></tr></table></figure><ul><li>其中， mySpider 为项目名称，可以看到将会创建一个 mySpider 文件夹，目录结构大致如下：</li></ul><p><img src="D:\F\Project\Marine\day07\scrapy项目结构.png" alt="img"></p><p>下面来简单介绍一下各个主要文件的作用：</p><blockquote><p>scrapy.cfg ：项目的配置文件</p><p>mySpider/ ：项目的Python模块，将会从这里引用代码</p><p>mySpider/items.py ：项目的目标文件</p><p>mySpider/pipelines.py ：项目的管道文件</p><p>mySpider/settings.py ：项目的设置文件</p><p>mySpider/spiders/ ：存储爬虫代码目录</p></blockquote><h2 id="二、明确目标-mySpider-items-py"><a href="#二、明确目标-mySpider-items-py" class="headerlink" title="二、明确目标(mySpider/items.py)"></a>二、明确目标(mySpider/items.py)</h2><p>我们打算抓取：<a href="http://bbs.tianya.cn/post-140-393968-1.shtml" target="_blank" rel="noopener">http://bbs.tianya.cn/post-140-393968-1.shtml</a> 网站里的邮箱。</p><ol><li>打开mySpider目录下的items.py</li><li>Item 定义结构化数据字段，用来保存爬取到的数据，有点像Python中的dict，但是提供了一些额外的保护减少错误。</li><li>可以通过创建一个 scrapy.Item 类， 并且定义类型为 scrapy.Field的类属性来定义一个Item（可以理解成类似于ORM的映射关系）。</li><li>接下来，创建一个TianyaItem类，和构建item模型（model）。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TianyaItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    email = scrapy.Field()</span><br></pre></td></tr></table></figure><h2 id="三、制作爬虫-（spiders-itcastSpider-py）"><a href="#三、制作爬虫-（spiders-itcastSpider-py）" class="headerlink" title="三、制作爬虫 （spiders/itcastSpider.py）"></a>三、制作爬虫 （spiders/itcastSpider.py）</h2><p><strong>爬虫功能要分两步：</strong></p><h3 id="1-爬数据"><a href="#1-爬数据" class="headerlink" title="1. 爬数据"></a>1. 爬数据</h3><ul><li>在当前目录下输入命令</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider mytianya <span class="string">"bbs.tianya.cn"</span></span><br></pre></td></tr></table></figure><ul><li>打开 mySpider/spider目录里的 mytianya .py，默认增加了下列代码:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> tianya <span class="keyword">import</span> items</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MytianyaSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'mytianya'</span></span><br><span class="line">    allowed_domains = [<span class="string">'bbs.tianya.cn'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://bbs.tianya.cn/post-140-393977-1.shtml'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>其实也可以由我们自行创建itcast.py并编写上面的代码，只不过使用命令可以免去编写固定代码的麻烦；</p><p>要建立一个Spider， 你必须用scrapy.Spider类创建一个子类，并确定了三个强制的属性 和 一个方法。</p><ul><li><code>name = &quot;&quot;</code>：这个爬虫的识别名称，必须是唯一的，在不同的爬虫必须定义不同的名字。</li><li><code>allow_domains = []</code>是搜索的域名范围，也就是爬虫的约束区域，规定爬虫只爬取这个域名下的网页，不存在的URL会被忽略。</li><li><code>start_urls = ()</code>：爬取的URL元祖/列表。爬虫从这里开始抓取数据，所以，第一次下载的数据将会从这些urls开始。其他子URL将会从这些起始URL中继承性生成。</li><li><code>parse(self, response)</code>：解析的方法，每个初始URL完成下载后将被调用，调用的时候传入从每一个URL传回的Response对象来作为唯一参数，主要作用如下：<ol><li>负责解析返回的网页数据(response.body)，提取结构化数据(生成item)</li><li>生成需要下一页的URL请求。</li></ol></li><li>将start_urls的值修改为需要爬取的第一个url</li></ul><h5 id="修改parse-方法"><a href="#修改parse-方法" class="headerlink" title="修改parse()方法"></a>修改parse()方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    html = response.body.decode()</span><br><span class="line">    <span class="comment"># ftsd@21cn.com</span></span><br><span class="line">    email = re.compile(<span class="string">r"([A-Z0-9_]+@[A-Z0-9]+\.[A-Z]&#123;2,4&#125;)"</span>, re.I)</span><br><span class="line">    emailList = email.findall(html)</span><br><span class="line">    mydict = []</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> emailList:</span><br><span class="line">        item = items.TianyaItem()</span><br><span class="line">        item[<span class="string">"email"</span>] = e</span><br><span class="line">        <span class="comment"># mydict[e] = "http://bbs.tianya.cn/post-140-393977-1.shtml"</span></span><br><span class="line">        mydict.append(item)</span><br><span class="line">    <span class="keyword">return</span> mydict</span><br></pre></td></tr></table></figure><p>然后运行一下看看，在mySpider目录下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl mytianya</span><br></pre></td></tr></table></figure><h2 id="2-保存数据"><a href="#2-保存数据" class="headerlink" title="2.保存数据"></a>2.保存数据</h2><h5 id="scrapy保存信息的最简单的方法主要有四种，-o-输出指定格式的文件，命令如下："><a href="#scrapy保存信息的最简单的方法主要有四种，-o-输出指定格式的文件，命令如下：" class="headerlink" title="scrapy保存信息的最简单的方法主要有四种，-o 输出指定格式的文件，命令如下："></a>scrapy保存信息的最简单的方法主要有四种，-o 输出指定格式的文件，命令如下：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl mytianya -o mytianya.json</span><br><span class="line"></span><br><span class="line">scrapy crawl mytianya -o mytianya.csv</span><br><span class="line"></span><br><span class="line">scrapy crawl mytianya -o mytianya.xml</span><br></pre></td></tr></table></figure><h4 id="如果将代码改成下面形式，结果完全一样。"><a href="#如果将代码改成下面形式，结果完全一样。" class="headerlink" title="如果将代码改成下面形式，结果完全一样。"></a>如果将代码改成下面形式，结果完全一样。</h4><h4 id="yield-在这里的作用？"><a href="#yield-在这里的作用？" class="headerlink" title="yield 在这里的作用？"></a>yield 在这里的作用？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    html = response.body.decode()</span><br><span class="line">    <span class="comment"># ftsd@21cn.com</span></span><br><span class="line">    email = re.compile(<span class="string">r"([A-Z0-9_]+@[A-Z0-9]+.[A-Z]&#123;2,4&#125;)"</span>, re.I)</span><br><span class="line">    emailList = email.findall(html)</span><br><span class="line">    mydict = []</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> emailList:</span><br><span class="line">        item = items.TianyaItem()</span><br><span class="line">        item[<span class="string">"email"</span>] = e</span><br><span class="line">        <span class="comment"># mydict[e] = "http://bbs.tianya.cn/post-140-393977-1.shtml"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># mydict.append(item)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#将获取的数据交给pipelines</span></span><br><span class="line">        <span class="keyword">yield</span> mydict</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回数据，不经过pipeline</span></span><br><span class="line">    <span class="keyword">return</span> mydict</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Scrapy-框架&quot;&gt;&lt;a href=&quot;#Scrapy-框架&quot; class=&quot;headerlink&quot; title=&quot;Scrapy 框架&quot;&gt;&lt;/a&gt;Scrapy 框架&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Scrapy是用纯Python实现一个为了爬取网站数据、提取结构性数据而
      
    
    </summary>
    
      <category term="Python" scheme="https://lidx.club/categories/Python/"/>
    
    
      <category term="Scrapy" scheme="https://lidx.club/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Python与Redis的交互+Redis事务</title>
    <link href="https://lidx.club/2017/06/06/Python%E4%B8%8ERedis%E7%9A%84%E4%BA%A4%E4%BA%92+Redis%E4%BA%8B%E5%8A%A1/"/>
    <id>https://lidx.club/2017/06/06/Python与Redis的交互+Redis事务/</id>
    <published>2017-06-06T02:14:12.000Z</published>
    <updated>2018-07-19T08:42:16.726Z</updated>
    
    <content type="html"><![CDATA[<p><strong>@ 概述</strong></p><ul><li>Python与Redis的交互可以通过第三方类库redis来进行</li><li>交互的一般流程：创建Redis客户端-&gt;通过客户端的API完成数据交互</li><li>交互结束也无需断开连接，这一点与磁盘型数据库不同，毕竟访问内存是无所谓“释放IO资源”一说的</li><li>redis的PythonAPI和redis的shell操作命令是极为相似的；</li><li>安装第三方库redis</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">pip</span> <span class="selector-tag">install</span> <span class="selector-tag">redis</span></span><br></pre></td></tr></table></figure><p><strong>@redis支持事务的方式</strong></p><ul><li>将批量数据操作逐个加入待执行队列；</li><li>如果批量操作过程中发生异常，不提交事务即可；</li><li>提交事务=执行队列中的所有操作，并保证其原子性；</li><li>文档参考：<a href="http://www.redis.cn/topics/transactions.html" target="_blank" rel="noopener">http://www.redis.cn/topics/transactions.html</a></li></ul><p><strong>@注意事项</strong></p><ul><li>数据操作在加入队列时不会进行语法检查；</li><li>如果数据操作存在语法错误，会造成只有部分数据提交的BUG；</li><li>此时redis也并不支持事务回滚（处处拍摄快照会导致效率的下降）；</li><li>所以语法错误必须在上线前自行完成检查和修正（这是Redis的官方态度）；</li></ul><p><strong>@事务操作流程</strong></p><ul><li>监控要保障【并发安全】的数据；</li><li>开启事务；</li><li>具体CRUD操作；</li><li>提交事务（如果被监控的数据发生了并发修改，则提交不成功）；</li></ul><p><strong>@在Redis命令行执行事务</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 观察本次事务要修改的key，如果该key在事务执行过程中被其它事务修改，则当前事务提交不能成功</span><br><span class="line">//目的：保证并发安全</span><br><span class="line">WATCH key1 key2 key3</span><br><span class="line"></span><br><span class="line">//开启事务 </span><br><span class="line">multi</span><br><span class="line"></span><br><span class="line">//执行具体事务操作（增删改查）</span><br><span class="line">//这些操作会被加入队列</span><br><span class="line">incr key1</span><br><span class="line">incr key2</span><br><span class="line">incr key3</span><br><span class="line"></span><br><span class="line">//提交事务，如果观察的key被其它事务并发修改，则本次事务提交无效</span><br><span class="line"><span class="keyword">exec</span></span><br></pre></td></tr></table></figure><p><strong>@在Python代码中执行事务</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建客户端</span></span><br><span class="line">txClient = redis.Redis(</span><br><span class="line">    host=<span class="string">'localhost'</span>,</span><br><span class="line">    port=<span class="number">6379</span>,</span><br><span class="line">    db=<span class="number">7</span>,</span><br><span class="line">    password=<span class="string">'123456'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建事务管道</span></span><br><span class="line">pipe = txClient.pipeline(transaction=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 监视要保证并发安全的数据</span></span><br><span class="line">    pipe.watch(<span class="string">'who'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启事务</span></span><br><span class="line">    pipe.multi()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行CRUD操作</span></span><br><span class="line">    pipe.writeDict(<span class="string">'who'</span>, <span class="string">'雷军'</span>, ex=<span class="number">60</span> * <span class="number">5</span>)</span><br><span class="line">    print(pipe.get(<span class="string">'who'</span>))</span><br><span class="line">    pipe.hmset(<span class="string">'p1'</span>, &#123;<span class="string">'who'</span>: <span class="string">'雷军'</span>, <span class="string">'age'</span>: <span class="number">50</span>, <span class="string">'word'</span>: <span class="string">'are you ok'</span>&#125;)</span><br><span class="line">    print(pipe.hgetall(<span class="string">'p1'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(5 / 0)  # 普通业务异常，被try所捕获，事务不会提交</span></span><br><span class="line">    <span class="comment"># pipe.incr("p1")  # redis语法错误，只有提交时才会发生异常且无法回滚，必须在上线前予以修正</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行CRUD操作</span></span><br><span class="line">    pipe.incr(<span class="string">'a'</span>)</span><br><span class="line">    pipe.incr(<span class="string">'b'</span>)</span><br><span class="line">    pipe.incr(<span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果被监视的数据被其它并发事务所修改</span></span><br><span class="line"><span class="keyword">except</span> WatchError <span class="keyword">as</span> we:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清空事务管道，不提交，结束事务</span></span><br><span class="line">    pipe.reset()</span><br><span class="line">    print(<span class="string">'监控数据被外界污染，事务已取消！we='</span>,we)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发生普通异常（非Redis语法错误）</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"bad luck:e="</span>, e)</span><br><span class="line">    print(<span class="string">'事务未提交'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有发生异常时提交事务</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pipe.execute()</span><br><span class="line">        print(<span class="string">'事务已提交'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果队列中的数据操作有语法错误，则事务的提交会【完成一半且无法回滚】，必须杜绝语法错误</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'事务提交异常，请检查代码语法！e='</span>,e)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;@ 概述&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python与Redis的交互可以通过第三方类库redis来进行&lt;/li&gt;
&lt;li&gt;交互的一般流程：创建Redis客户端-&amp;gt;通过客户端的API完成数据交互&lt;/li&gt;
&lt;li&gt;交互结束也无需断开连接，
      
    
    </summary>
    
      <category term="Python" scheme="https://lidx.club/categories/Python/"/>
    
    
      <category term="Redis" scheme="https://lidx.club/tags/Redis/"/>
    
      <category term="Python" scheme="https://lidx.club/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://lidx.club/2017/06/05/Redis/"/>
    <id>https://lidx.club/2017/06/05/Redis/</id>
    <published>2017-06-05T08:14:22.000Z</published>
    <updated>2018-07-22T08:17:52.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>Redis 是完全开源免费的，是一个高性能的<code>key-value</code>内存数据库。</p><blockquote><p>中文网站 <a href="http://redis.cn/" target="_blank" rel="noopener">http://redis.cn</a></p><p>官方网站 <a href="http://redis.io/" target="_blank" rel="noopener">http://redis.io</a></p></blockquote><p>Redis 有三个主要的特点, 有别于其它很多竞争对手 ：</p><ul><li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用</li><li>Redis不仅仅支持简单的<code>key-value</code>类型的数据，同时还提供<code>list</code>，<code>set</code>，<code>zset</code>，<code>hash</code>等数据结构的存储</li><li>Redis支持数据的备份，即<code>master-slave</code>模式的数据备份。</li></ul><p><strong>Redis优点</strong></p><ul><li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li><p>支持丰富的数据类型 - Redis支持最大多数开发人员已经知道如列表，集合，可排序集合，哈希等数据类型。 这使得在应用中很容易解决的各种问题，因为我们知道哪些问题处理, 使用哪种数据类型更好解决。</p></li><li><p>操作都是原子的 - 所有 Redis 的操作都是原子，从而确保当两个客户同时访问 Redis 服务器得到的是更新后的值（最新值）。 原子性（atomicity）：一个事务是一个不可分割的最小工作单位，事务中包括的诸操作要么都做，要么都不做。 Redis所有单个命令的执行都是原子性的，这与它的单线程机制有关；</p></li></ul><p>Redis是一个多功能实用工具，可以在很多如：</p><ul><li>缓存</li><li>消息传递队列中使用（Redis原生支持发布/订阅），</li><li>在应用程序中，如：Web应用程序会话，网站页面点击数等任何短暂的数据；</li></ul><h3 id="Redis-实际应用案例"><a href="#Redis-实际应用案例" class="headerlink" title="Redis 实际应用案例"></a>Redis 实际应用案例</h3><p>目前全球最大的 Redis 用户是新浪微博，公布一下Redis平台实际情况：</p><ul><li>2200+亿 commands/day 5000亿Read/day 500亿Write/day</li><li>18TB+ Memory</li><li>500+ Servers in 6 IDC（互联网数据中心，机房） 2000+instances</li></ul><p>在新浪微博 Redis 的部署场景很多，大概分为如下的 2 种:</p><p>第一种是应用程序直接访问 Redis 数据库</p><p>第二种是应用程序直接访问 Redis，只有当 Redis 访问失败时才访问 MySQL</p><p><strong>@字符串操作举例</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set name bill //设置键值</span><br><span class="line">setex name 20 bill //键值20秒后过期</span><br><span class="line">mset age 60 gender male //一次性存储多个键值</span><br><span class="line">get name //不存在则返回null</span><br><span class="line">mget name age //一次性拿取多个键值</span><br><span class="line">incr/decr age //将age加减1</span><br><span class="line">incrby/decrby age 20 //将age加减20</span><br><span class="line">append name gates //向原有value追加内容</span><br><span class="line">strlen key //获取值长度</span><br></pre></td></tr></table></figure><p><strong>@key键操作举例</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">keys * //显示所有键，慎用，数据量大时导致卡死</span><br><span class="line">keys a* // 显示所有以a开头的键</span><br><span class="line">exists name age //判断name和age这两个键存在几个</span><br><span class="line">type name //查看值的类型</span><br><span class="line">del name age //删除键</span><br><span class="line">expire name 30 //name键值30秒过期</span><br><span class="line">ttl name //查看键值的过期时间</span><br><span class="line">persist name // 取消键的过期时间</span><br><span class="line">rename name nickname // 重命名键（这样做不安全，容易覆盖已有数据）</span><br><span class="line">renamenx name nickname // 确保不会覆盖其它键才重命名（nx=not exists,x后缀=exists）</span><br></pre></td></tr></table></figure><p><strong>@哈希hash操作举例</strong></p><ul><li>hash是将多个字段和值存储在一个键中，类似对象；</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hset p1 name bill // 设置p1对象的name为bill</span><br><span class="line">hset p1 age 18 // 设置p1对象的age为18</span><br><span class="line">hmset p2 name jobs age -1 //设置p2对象的name为jobs，age为-1</span><br><span class="line">hget p1 name // 获取p1的name属性值</span><br><span class="line">hmget p1 name age // 同时获取p1的name和age</span><br><span class="line">hgetall p1 // 获取p1的全部字段和值</span><br><span class="line">hkeys p1 // 获取p1的全部字段</span><br><span class="line">hvals p1 // 获取p1的全部字段值</span><br><span class="line">hlen p1 // 获取p1中所有字段数</span><br><span class="line">hexists p1 name // 判断p1中是否有name字段</span><br><span class="line">hdel p1 name // 删除p1中的name字段</span><br><span class="line">hdel p2 name age // 删除p2中的name和age字段</span><br><span class="line">hstrlen p1 age // p1中的age的长度</span><br></pre></td></tr></table></figure><p><strong>@列表list操作举例</strong></p><ul><li>在redis中也称队列，可按下标获取元素，也可从头尾弹出或放入；</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lpush mlist 2 // 从左侧向列表mlist追加元素2</span><br><span class="line">rpush mlist 3 // 从右侧向列表mlist追加元素3</span><br><span class="line">linsert mlist after 3 4 // 在列表mlist中3的后边追加元素4</span><br><span class="line">lset mlist 1 200 // 设置列表mlist中的第1个元素为200（下标从0开始）</span><br><span class="line">lrange mlist 0 3 // 查看列表mlist中下标[0到3]的元素</span><br><span class="line">lrange mlist 0 -1 //从头看到尾</span><br><span class="line">lpop mlist // 从列表左侧弹出一个值</span><br><span class="line">rpop mlist // 从列表右侧弹出一个值</span><br><span class="line">ltrim mlist 0 1 // 修剪掉mlist下标[0,1]以外的元素</span><br><span class="line">llen mlist // 列表元素个数</span><br><span class="line">lindex mlist 0 // 获取mlist中下标0的元素</span><br></pre></td></tr></table></figure><p><strong>@集合set操作举例</strong></p><ul><li>无序元素集，经常用于求交集、并集、差集等；</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sadd mset 1 2 3 4 // 向集合mset中添加元素1,2,3,4</span><br><span class="line">smembers mset // 查看集合mset中的元素</span><br><span class="line">scard mset // 查询集合元素个数</span><br><span class="line">sinter mset mset2 //求mset和mset2的交集</span><br><span class="line">sdiff mset mset2 //求mset相比mset2的差集（mset有而mset2无的部分）</span><br><span class="line">sunion mset mset2 // 求mset和mset2的并集</span><br><span class="line">sismember mset 3 //判断3是否是mset中的元素</span><br></pre></td></tr></table></figure><p><strong>@有序集合zset</strong></p><ul><li>可按权重对元素进行排列；</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zadd mzset 10 bill 9 jobs 6 jackma // 添加多个值及相应权重</span><br><span class="line">zrange mzset 0 -1 // 返回第一个到最后一个之间所有的元素，按权重升序排列</span><br><span class="line">zcard mzset // 元素个数</span><br><span class="line">zcount mzset 6 10 // 权重6-10之间的元素个数</span><br><span class="line">zscore mzset jackma // 返回 jackma在mzset中的权重</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;p&gt;Redis 是完全开源免费的，是一个高性能的&lt;code&gt;key-value&lt;/code&gt;内存数据库。&lt;/p&gt;
&lt;bl
      
    
    </summary>
    
      <category term="Redis" scheme="https://lidx.club/categories/Redis/"/>
    
    
      <category term="命令" scheme="https://lidx.club/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>RESTful 和 flask-restful</title>
    <link href="https://lidx.club/2017/06/05/RESTful/"/>
    <id>https://lidx.club/2017/06/05/RESTful/</id>
    <published>2017-06-05T07:28:12.000Z</published>
    <updated>2018-07-22T07:37:40.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RESTful-和-flask-restful"><a href="#RESTful-和-flask-restful" class="headerlink" title="RESTful 和 flask-restful"></a>RESTful 和 flask-restful</h1><h3 id="前后端分离简单理解"><a href="#前后端分离简单理解" class="headerlink" title="前后端分离简单理解"></a>前后端分离简单理解</h3><p>flask中返回json格式数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</span><br><span class="line"><span class="comment"># 返回json数据</span></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'msg'</span>: <span class="string">'ok'</span>,</span><br><span class="line">        <span class="string">'status'</span>: <span class="string">'200'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(data)</span><br></pre></td></tr></table></figure><p>简单前后端分离：</p><p>前端页面变成一个静态文件。存放在项目的static/html目录下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Score List<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        $(function ()&#123;</span></span><br><span class="line"><span class="undefined">            $.getJSON("/getscores/", function (data)&#123;</span></span><br><span class="line"><span class="undefined">                console.log(data);</span></span><br><span class="line"><span class="undefined">                var scores = data["scores"];</span></span><br><span class="line"><span class="undefined">                var $ul = $("#score_container");</span></span><br><span class="line"><span class="undefined">                for(var i=0; i &lt; scores.length; i++)&#123;</span></span><br><span class="line"><span class="xml">                    var $li = $("<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>").html(scores[i]);</span></span><br><span class="line"><span class="undefined">                    $ul.append($li);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>机试成绩表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"score_container"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端只需要返回json数据即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/getscores/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_scores</span><span class="params">()</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'msg'</span>: <span class="string">'ok'</span>,</span><br><span class="line">        <span class="string">'status'</span>: <span class="string">'200'</span>,</span><br><span class="line">        <span class="string">'scores'</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">30</span>,<span class="number">40</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(data)</span><br></pre></td></tr></table></figure><h3 id="什么是RESTFul？"><a href="#什么是RESTFul？" class="headerlink" title="什么是RESTFul？"></a>什么是RESTFul？</h3><ol><li><p>简介</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">REST</span>即表述性状态传递（英文：<span class="selector-tag">Representational</span> <span class="selector-tag">State</span> <span class="selector-tag">Transfer</span>，简称<span class="selector-tag">REST</span>）是<span class="selector-tag">Roy</span> <span class="selector-tag">Fielding</span>博士在2000年他的博士论文中提出来的一种软件架构风格。它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。</span><br><span class="line"></span><br><span class="line">一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">REST</span> 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 <span class="selector-tag">RESTful</span>。遵循<span class="selector-tag">restful</span>开发的应用程序接口(<span class="selector-tag">API</span>)称为<span class="selector-tag">RESTFul</span> <span class="selector-tag">API</span>。</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">RESTFul</span>的接口都是围绕资源以及对资源的各种动作展开的。</span><br></pre></td></tr></table></figure></li><li><p>资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所谓的资源就是在网络中存在的任意实体，哪怕是一条简单信息。</span><br></pre></td></tr></table></figure></li><li><p>动作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所谓动作就是数据的CURD。在开发者设计良好的前提下，对网络资源的动作都可抽象为对资源的CURD操作。RESTFul对网络的操作抽象为HTTP的GET、POST、PUT、DELETE等请求的方式以完成对资源的增删改查。具体对照如下：</span><br></pre></td></tr></table></figure><p>| 方法   | 行为         | 示例                             |<br>| —— | ———— | ——————————– |<br>| GET    | 获取资源信息 | <a href="http://127.0.0.1:5000/source" target="_blank" rel="noopener">http://127.0.0.1:5000/source</a>     |<br>| GET    | 获取指定资源 | <a href="http://127.0.0.1:5000/source/250" target="_blank" rel="noopener">http://127.0.0.1:5000/source/250</a> |<br>| POST   | 创建新的资源 | <a href="http://127.0.0.1:5000/source" target="_blank" rel="noopener">http://127.0.0.1:5000/source</a>     |<br>| PUT    | 更新指定资源 | <a href="http://127.0.0.1:5000/source/250" target="_blank" rel="noopener">http://127.0.0.1:5000/source/250</a> |<br>| DELETE | 删除指定资源 | <a href="http://127.0.0.1:5000/source/250" target="_blank" rel="noopener">http://127.0.0.1:5000/source/250</a> |</p></li><li><p>数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通常传输的数据格式都采用JSON，有时也可以通过URL的参数进行传递</span><br></pre></td></tr></table></figure></li><li><p>工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">说明：postman是一款非常好用的API开发测试工具，可以模拟各种请求</span><br><span class="line">提醒：安装包，一路next完成安装，演示一个地址的访问</span><br></pre></td></tr></table></figure></li></ol><p>参考阮一峰大神的博客：<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/09/restful.html</a></p><p>理解之后再来看RESTful api开发遵循的原则：<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></p><p>假如获取电影资源，遵循RESTful api开发原则的代码应该怎么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/movie/', methods=["GET", "POST", "PUT", "DELETE"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">movie</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">        <span class="comment"># 获取资源</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"m_name"</span>: <span class="string">"捉妖记"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonify(data)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"msg"</span>: <span class="string">"存储成功"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonify(data)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">"PUT"</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"msg"</span>: <span class="string">"更新成功"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonify(data)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">"DELETE"</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"msg"</span>: <span class="string">"删除成功"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonify(data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        abort(<span class="number">405</span>)</span><br></pre></td></tr></table></figure><h3 id="原生实现RESTful"><a href="#原生实现RESTful" class="headerlink" title="原生实现RESTful"></a>原生实现RESTful</h3><p>定义一个user模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>, autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    u_name = db.Column(db.String(<span class="number">16</span>), unique=<span class="keyword">True</span>)</span><br><span class="line">    u_password = db.Column(db.String(<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_dict</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"u_name"</span>: self.u_name, <span class="string">'u_password'</span>: self.u_password&#125;</span><br></pre></td></tr></table></figure><p>实现原生RESTful：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blue.route("/users/&lt;int:id&gt;/", methods=["GET", "POST", "PUT", "DELETE", "PATCH"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">users</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">        page = int(request.args.get(<span class="string">"page"</span>, default=<span class="number">1</span>))</span><br><span class="line">        per_page = int(request.args.get(<span class="string">"per_page"</span>, default=<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">        users = User.query.paginate(page=page, per_page=per_page, error_out=<span class="keyword">False</span>).items</span><br><span class="line">        users_dict = []</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">            users_dict.append(user.to_dict())</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"message"</span>: <span class="string">"ok"</span>,</span><br><span class="line">            <span class="string">"status"</span>: <span class="string">"200"</span>,</span><br><span class="line">            <span class="string">"data"</span>: users_dict</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jsonify(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        <span class="comment"># 更新或创建</span></span><br><span class="line">        username = request.form.get(<span class="string">"username"</span>)</span><br><span class="line">        password = request.form.get(<span class="string">"password"</span>)</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"message"</span>: <span class="string">"ok"</span>,</span><br><span class="line">            <span class="string">"status"</span>: <span class="string">"422"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> <span class="keyword">not</span> password:</span><br><span class="line">            data[<span class="string">"message"</span>] = <span class="string">"参数不正确"</span></span><br><span class="line">            <span class="keyword">return</span> jsonify(data), <span class="number">422</span></span><br><span class="line"></span><br><span class="line">        user = User()</span><br><span class="line">        user.u_name = username</span><br><span class="line">        user.u_password = generate_password(password=password)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">            db.session.add(user)</span><br><span class="line">            db.session.commit()</span><br><span class="line">            data[<span class="string">"status"</span>] = <span class="string">"201"</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            data[<span class="string">"status"</span>] = <span class="string">"901"</span></span><br><span class="line">            data[<span class="string">"message"</span>] = str(e)</span><br><span class="line">            <span class="keyword">return</span> jsonify(data), <span class="number">422</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jsonify(data), <span class="number">201</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">"PUT"</span>:</span><br><span class="line">        username = request.form.get(<span class="string">"username"</span>)</span><br><span class="line">        password = request.form.get(<span class="string">"password"</span>)</span><br><span class="line">        user = User.query.get(id)</span><br><span class="line"></span><br><span class="line">        user.u_name = username</span><br><span class="line">        user.u_password = generate_password(password)</span><br><span class="line"></span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"message"</span>: <span class="string">"update success"</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jsonify(data), <span class="number">201</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">"DELETE"</span>:</span><br><span class="line">        user = User.query.get(id)</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"message"</span>: <span class="string">"delete success"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            db.session.delete(user)</span><br><span class="line">            db.session.commit()</span><br><span class="line">            <span class="keyword">return</span> jsonify(data), <span class="number">204</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data[<span class="string">"message"</span>] = <span class="string">"指定数据不存在"</span></span><br><span class="line">            <span class="keyword">return</span> jsonify(data)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">"PATCH"</span>:</span><br><span class="line">        password = request.form.get(<span class="string">"password"</span>)</span><br><span class="line">        user = User.query.get(id)</span><br><span class="line">        user.u_password = generate_password(password)</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"messgage"</span>: <span class="string">"update success"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jsonify(data), <span class="number">201</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        abort(<span class="number">405</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_password</span><span class="params">(password)</span>:</span></span><br><span class="line">    hash = hashlib.md5()</span><br><span class="line">    hash.update(password.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="keyword">return</span> hash.hexdigest()</span><br></pre></td></tr></table></figure><p>前端只需要根据ajax的方法类型来控制对资源的操作：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>UserLogin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        $(function () &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                $("button").click(function () &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                    var username = $("#username").val();</span></span><br><span class="line"><span class="undefined">                    var password = $("#password").val();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                    $.ajax("/users/5/", &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                        datatype: "json",</span></span><br><span class="line"><span class="undefined">                        type: "PATCH",</span></span><br><span class="line"><span class="undefined">                        data: "username=" + username + "&amp;password=" + password,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                        success: function (data) &#123;</span></span><br><span class="line"><span class="undefined">                            console.log(data);</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                &#125;)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        )</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用Flask-restful"><a href="#使用Flask-restful" class="headerlink" title="使用Flask-restful"></a>使用Flask-restful</h3><p>flask-restuflu中每种资源抽象成类，需要继承自Resource，来看一个最简单的例子，把我们的helloword转化为一个资源：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(Resource)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"msg"</span>: <span class="string">"ok"</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"msg"</span>: <span class="string">"create success"</span>&#125;</span><br></pre></td></tr></table></figure><p>现在流行吸猫，以猫为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>, autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    c_name = db.Column(db.String(<span class="number">16</span>), unique=<span class="keyword">True</span>)</span><br><span class="line">    c_age = db.Column(db.Integer, default=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="格式化工具"><a href="#格式化工具" class="headerlink" title="格式化工具"></a>格式化工具</h4><ul><li>fields进行定义</li><li><p>marshal_with 进行使用</p><ul><li>特性</li><li>显示我们设计的数据结构<ul><li>默认返回的数据如果在预定义结构中不存在，数据会被自动过滤</li><li>如果返回的数据在预定义的结构中存在，数据会正常返回</li><li>如果返回的数据比预定义结构中的字段少，预定义的字段会呈现一个默认值</li><li>使用attribute参数可以映射的字段重命名。</li><li>使用default可以给定默认值</li></ul></li></ul><p>基础用法：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义猫资源返回的字段</span></span><br><span class="line">cat_fields = &#123;</span><br><span class="line">    <span class="string">'msg'</span>: fields.String,</span><br><span class="line">    <span class="string">'status'</span>: fields.String(default=<span class="string">'404'</span>),</span><br><span class="line">    <span class="string">'data'</span>: fields.String(attribute=<span class="string">'private_data'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义猫资源</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CatResource</span><span class="params">(Resource)</span>:</span></span><br><span class="line"><span class="meta">    @marshal_with(cat_fields)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">'msg'</span>: <span class="string">'hehehe'</span>, <span class="string">'data'</span>: <span class="string">'没有数据'</span>, <span class="string">'language'</span>: <span class="string">'en'</span>, <span class="string">'private_data'</span>: <span class="string">'表中的字段内容'</span>&#125;</span><br><span class="line"></span><br><span class="line">api.add_resource(CatResource, <span class="string">'/cats/'</span>)</span><br></pre></td></tr></table></figure><p>Nested用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">catmodel_fields = &#123;</span><br><span class="line">    <span class="string">'id'</span>: fields.Integer,</span><br><span class="line">    <span class="string">'c_name'</span>: fields.String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cat2_fields = &#123;</span><br><span class="line">    <span class="string">'msg'</span>: fields.String(default=<span class="string">'ok'</span>),</span><br><span class="line">    <span class="string">'status'</span>: fields.String(default=<span class="string">'200'</span>),</span><br><span class="line">    <span class="string">'data'</span>: fields.Nested(catmodel_fields)</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "msg": "ok",</span></span><br><span class="line"><span class="string">    "status": "200",</span></span><br><span class="line"><span class="string">    "data": &#123;</span></span><br><span class="line"><span class="string">        "id": 1,</span></span><br><span class="line"><span class="string">        "c_name": "kitty"</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CatResource2</span><span class="params">(Resource)</span>:</span></span><br><span class="line"><span class="meta">    @marshal_with(cat2_fields)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        cat = Cat.query.first()</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'msg'</span>: <span class="string">'ok'</span>,</span><br><span class="line">            <span class="string">'data'</span>: cat</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">api.add_resource(CatResource2, <span class="string">'/cats2/'</span>)</span><br></pre></td></tr></table></figure><p>List和Nested结合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">cat3_fields = &#123;</span><br><span class="line">    <span class="string">'msg'</span>: fields.String(default=<span class="string">'ok'</span>),</span><br><span class="line">    <span class="string">'status'</span>: fields.String(default=<span class="string">'200'</span>),</span><br><span class="line">    <span class="string">'data'</span>: fields.List(fields.Nested(catmodel_fields))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "msg": "ok",</span></span><br><span class="line"><span class="string">    "status": "200",</span></span><br><span class="line"><span class="string">    "data": [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "id": 1,</span></span><br><span class="line"><span class="string">            "c_name": "kitty"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "id": 2,</span></span><br><span class="line"><span class="string">            "c_name": "tom"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "id": 3,</span></span><br><span class="line"><span class="string">            "c_name": "john"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "id": 4,</span></span><br><span class="line"><span class="string">            "c_name": "bigface"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CatResource3</span><span class="params">(Resource)</span>:</span></span><br><span class="line"><span class="meta">    @marshal_with(cat3_fields)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        cats = Cat.query.all()</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'msg'</span>: <span class="string">'ok'</span>,</span><br><span class="line">            <span class="string">'data'</span>: cats</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">api.add_resource(CatResource3, <span class="string">'/cats3/'</span>)</span><br></pre></td></tr></table></figure><h4 id="定义字段输出"><a href="#定义字段输出" class="headerlink" title="定义字段输出"></a>定义字段输出</h4><ul><li><p>使用字典进行定义</p></li><li><p>支持格式</p><ul><li>常用都是基本类型<ul><li>String</li><li>Integer</li></ul></li><li>略微复杂<ul><li>List （字典的value是list,list中每个元素又是个字典。）</li></ul></li><li>级联数据<ul><li>Nested (字典的value是字典)</li></ul></li><li>结构允许嵌套<ul><li>fields.List(fields.Nested) </li></ul></li></ul></li><li><p>定义好的格式通过装饰器进行使用</p><ul><li>@marshal_with（需要返回的数据格式） </li><li>return返回 字典就ok了</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RESTful-和-flask-restful&quot;&gt;&lt;a href=&quot;#RESTful-和-flask-restful&quot; class=&quot;headerlink&quot; title=&quot;RESTful 和 flask-restful&quot;&gt;&lt;/a&gt;RESTful 和 flask-r
      
    
    </summary>
    
      <category term="Flask" scheme="https://lidx.club/categories/Flask/"/>
    
    
      <category term="RESTful" scheme="https://lidx.club/tags/RESTful/"/>
    
      <category term="flask-restful" scheme="https://lidx.club/tags/flask-restful/"/>
    
  </entry>
  
  <entry>
    <title>Flask 文件上传及邮件发送</title>
    <link href="https://lidx.club/2017/06/03/Flask%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8F%8A%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    <id>https://lidx.club/2017/06/03/Flask 文件上传及邮件发送/</id>
    <published>2017-06-03T10:40:12.000Z</published>
    <updated>2018-07-19T11:49:23.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传及邮件发送"><a href="#文件上传及邮件发送" class="headerlink" title="文件上传及邮件发送"></a>文件上传及邮件发送</h1><h3 id="原生文件上传"><a href="#原生文件上传" class="headerlink" title="原生文件上传"></a>原生文件上传</h3><p>基本思路：</p><ol><li><p>一个 <code>&lt;form&gt;</code> 标签被标记有 <code>enctype=multipart/form-data</code> ，并且在里面包含一个 <code>&lt;input type=file&gt;</code> 标签，提交方法必须为post方法。</p></li><li><p>服务端应用通过请求对象上的 <code>files</code> 字典访问文件。</p></li><li><p>使用文件的 <a href="http://werkzeug.pocoo.org/docs/datastructures/#werkzeug.datastructures.FileStorage.save" target="_blank" rel="noopener"><code>save()</code></a> 方法将文件永久地保存在文件系统上的某处。</p></li><li><p>创建模板文件，upload.html，内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>原生文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>原生文件上传<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"photo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    &#123;% if img_url %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; img_url &#125;&#125;"</span> /&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>最基础版本视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="comment"># 判断文件是否允许上传</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="comment"># 是否存在点，并且，以点分割的后缀名是否在指定列表中。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'.'</span> <span class="keyword">in</span> filename <span class="keyword">and</span> filename.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">1</span>] <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/upload/', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 判断是否是post方法，</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 获取文件对象</span></span><br><span class="line">        file = request.files.get(<span class="string">'photo'</span>)</span><br><span class="line">        <span class="comment"># 判断文件对象是否存在及后缀是否满足要求</span></span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">            <span class="comment"># 检查文件名是否安全 </span></span><br><span class="line">            filename = secure_filename(file.filename)</span><br><span class="line">            <span class="comment"># 保存上传后的文件，save方法接收保存文件的绝对路径。</span></span><br><span class="line">            file.save(os.path.join(app.config[<span class="string">'UPLOAD_FOLDER'</span>], filename))</span><br><span class="line">            <span class="comment">#提示用户图片上传成功，注意使用flash必须设置SECRET_KEY</span></span><br><span class="line">            flash(<span class="string">'图片上传成功'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'upload.html'</span>)</span><br></pre></td></tr></table></figure></li><li><p>加入生成随机文件名功能及显示图片功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成随机的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_string</span><span class="params">(length=<span class="number">32</span>)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    base_str = <span class="string">'abcdefghijklmnopqrstuvwxyz1234567890'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(random.choice(base_str) <span class="keyword">for</span> i <span class="keyword">in</span> range(length))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/upload/', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">()</span>:</span></span><br><span class="line">    img_url = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 获取上传信息</span></span><br><span class="line">        file = request.files.get(<span class="string">'photo'</span>)</span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">            <span class="comment"># 生成随机的文件名</span></span><br><span class="line">            suffix = os.path.splitext(file.filename)[<span class="number">1</span>]</span><br><span class="line">            filename = random_string() + suffix</span><br><span class="line">            <span class="comment"># 保存上传后的文件</span></span><br><span class="line">            file.save(os.path.join(app.config[<span class="string">'UPLOAD_FOLDER'</span>], </span><br><span class="line">                                   filename))</span><br><span class="line">            <span class="comment"># 获取上传文的URL</span></span><br><span class="line">            img_url = url_for(<span class="string">'uploaded_file'</span>, filename=filename)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'upload.html'</span>, img_url=img_url)</span><br><span class="line"><span class="comment"># 安全的获取上传文件</span></span><br><span class="line"><span class="meta">@app.route('/uploads/&lt;filename&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploaded_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> send_from_directory(app.config[<span class="string">'UPLOAD_FOLDER'</span>], filename)</span><br></pre></td></tr></table></figure></li><li><p>相关配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许上传的文件后缀</span></span><br><span class="line">ALLOWED_EXTENSIONS = set([<span class="string">'png'</span>, <span class="string">'jpg'</span>, <span class="string">'jpeg'</span>, <span class="string">'gif'</span>])</span><br><span class="line"><span class="comment"># 上传文件的保存地址</span></span><br><span class="line">app.config[<span class="string">'UPLOAD_FOLDER'</span>] = os.getcwd()</span><br><span class="line"><span class="comment"># 设置上传文件的大小</span></span><br><span class="line">app.config[<span class="string">'MAX_CONTENT_LENGTH'</span>] = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>注意事项，当上传文件不成功时，可以从以下几个方面着手</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.表单的提交方法必须是post</span><br><span class="line">2.表单的enctype必须是multipart/form-data</span><br><span class="line">3.上传文件字段类型为file，必须要有name属性</span><br><span class="line">4.是否超过了最大的允许大小</span><br><span class="line">5.文件保存位置是否有空间，是否有权限</span><br></pre></td></tr></table></figure></li></ol><h3 id="flask-uploads"><a href="#flask-uploads" class="headerlink" title="flask-uploads"></a>flask-uploads</h3><p>官网  <a href="http://pythonhosted.org/Flask-Uploads/" target="_blank" rel="noopener">http://pythonhosted.org/Flask-Uploads/</a></p><ol><li><p>说明：flask-uploads扩展库可以很好帮助你解决上传文件时的问题，使用非常方便</p></li><li><p>安装：<code>pip install flask-uploads</code></p></li><li><p>配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_uploads <span class="keyword">import</span> UploadSet, IMAGES</span><br><span class="line"><span class="keyword">from</span> flask_uploads <span class="keyword">import</span> configure_uploads, patch_request_class</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件上传</span></span><br><span class="line">photos = UploadSet(<span class="string">'photos'</span>, IMAGES)</span><br><span class="line"><span class="comment"># 设置上传文件的地址</span></span><br><span class="line">app.config[<span class="string">'UPLOADED_PHOTOS_DEST'</span>] = os.getcwd()</span><br><span class="line"><span class="comment"># 上传的初始化</span></span><br><span class="line">configure_uploads(app, photos)</span><br><span class="line"><span class="comment"># 配置上传文件大小，默认64M，设置None则会采用MAX_CONTENT_LENGTH配置选项</span></span><br><span class="line">app.config[<span class="string">'MAX_CONTENT_LENGTH'</span>] = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">patch_request_class(app, size=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></li><li><p>添加视图函数，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/upload/', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">()</span>:</span></span><br><span class="line">    img_url = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span> <span class="keyword">and</span> <span class="string">'photo'</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="comment"># 生成随机的文件名</span></span><br><span class="line">        suffix = os.path.splitext(request.files[<span class="string">'photo'</span>].filename)[<span class="number">1</span>]</span><br><span class="line">        filename = random_string() + suffix</span><br><span class="line">        <span class="comment"># 保存上传文件</span></span><br><span class="line">        photos.save(request.files[<span class="string">'photo'</span>], name=filename)</span><br><span class="line">        <span class="comment"># 获取上传图片的URL</span></span><br><span class="line">        img_url = photos.url(filename)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'upload.html'</span>, img_url=img_url)</span><br></pre></td></tr></table></figure></li><li><p>模板文件与原生文件上传相同</p></li></ol><h3 id="完整的文件上传"><a href="#完整的文件上传" class="headerlink" title="完整的文件上传"></a>完整的文件上传</h3><ol><li><p>配置flask-uploads，同上</p></li><li><p>配置flask-wtf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> flask_wtf.file <span class="keyword">import</span> FileField, FileRequired, FileAllowed</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> SubmitField</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件上传表单</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadForm</span><span class="params">(FlaskForm)</span>:</span></span><br><span class="line">    photo = FileField(validators=[FileRequired(message=<span class="string">'未选择文件'</span>), </span><br><span class="line">                      FileAllowed(photos, message=<span class="string">'只能上传图片'</span>)])</span><br><span class="line">    submit = SubmitField(<span class="string">'上传'</span>)</span><br></pre></td></tr></table></figure></li><li><p>添加视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入图片处理类库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/upload/', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">()</span>:</span></span><br><span class="line">    img_url = <span class="keyword">None</span></span><br><span class="line">    form = UploadForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        <span class="comment"># 生成随机的文件名</span></span><br><span class="line">        suffix = os.path.splitext(form.photo.data.filename)[<span class="number">1</span>]</span><br><span class="line">        filename = random_string() + suffix</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存上传文件</span></span><br><span class="line">        photos.save(form.photo.data, name=filename)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成缩略图</span></span><br><span class="line">        pathname = os.path.join(app.config[<span class="string">'UPLOADED_PHOTOS_DEST'</span>], </span><br><span class="line">                                filename)</span><br><span class="line">        <span class="comment"># 1.打开文件</span></span><br><span class="line">        img = Image.open(pathname)</span><br><span class="line">        <span class="comment"># 2.设置尺寸</span></span><br><span class="line">        img.thumbnail((<span class="number">128</span>, <span class="number">128</span>))</span><br><span class="line">        <span class="comment"># 3.保存修改后的文件</span></span><br><span class="line">        img.save(pathname)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取上传文件的URL</span></span><br><span class="line">        img_url = photos.url(filename)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'upload.html'</span>, form=form, img_url=img_url)</span><br></pre></td></tr></table></figure></li><li><p>添加模板文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>完整的文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>图片上传，结合flask-wtf,flask-uploads,生成缩略图<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">        &#123;&#123; form.photo() &#125;&#125;</span><br><span class="line">        &#123;% for error in form.photo.errors %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        &#123;&#123; form.submit() &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    &#123;% if img_url %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; img_url &#125;&#125;"</span> /&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>PIL只支持python2.x版本，社区开发人员对其进行了维护，以支持python3.x，</p><p>使用时需要安装，方法如下：pip install pillow</p></blockquote></li></ol><h3 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h3><p>说明：邮件发送本身可以使用任意的方式完成，flask框架中有flask-mail库完成此功能</p><p>安装：<code>pip install flask-mail</code></p><p>配置：一定要放在创建Mail对象之前</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 邮箱服务器</span></span><br><span class="line">app.config[<span class="string">'MAIL_SERVER'</span>] = os.environ.get(<span class="string">'MAIL_SERVER'</span>) <span class="keyword">or</span> <span class="string">'smtp.1000phone.com'</span></span><br><span class="line"><span class="comment"># 邮箱用户名</span></span><br><span class="line">app.config[<span class="string">'MAIL_USERNAME'</span>] = os.environ.get(<span class="string">'MAIL_USERNAME'</span>) <span class="keyword">or</span> <span class="string">'xuke@1000phone.com'</span></span><br><span class="line"><span class="comment"># 邮箱密码</span></span><br><span class="line">app.config[<span class="string">'MAIL_PASSWORD'</span>] = os.environ.get(<span class="string">'MAIL_PASSWORD'</span>) <span class="keyword">or</span> <span class="string">'123456'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入类库</span></span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail, Message</span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">mail = Mail(app)</span><br></pre></td></tr></table></figure><p>添加视图函数，如下：同步发送邮件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/send/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 准备发送邮件消息</span></span><br><span class="line">    msg = Message(subject=<span class="string">'账户激活'</span>,</span><br><span class="line">                  recipients=[<span class="string">'15600037563@163.com'</span>],</span><br><span class="line">                  sender=app.config[<span class="string">'MAIL_USERNAME'</span>])</span><br><span class="line">    <span class="comment"># 浏览器显示内容</span></span><br><span class="line">    msg.html = <span class="string">'&lt;h1&gt;Hello 德莱文&lt;/h1&gt;'</span></span><br><span class="line">    <span class="comment"># 终端接受显示内容</span></span><br><span class="line">    msg.body = <span class="string">'Hello 德莱文'</span></span><br><span class="line">    <span class="comment"># 发送邮件</span></span><br><span class="line">    mail.send(msg)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'邮件已发送'</span></span><br></pre></td></tr></table></figure><p>将邮件的发送封装成一个函数，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 封装函数发送邮件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(to, subject, template, **kwargs)</span>:</span></span><br><span class="line">    msg = Message(subject=subject, recipients=[to],</span><br><span class="line">                  sender=app.config[<span class="string">'MAIL_USERNAME'</span>])</span><br><span class="line">    msg.html = render_template(template + <span class="string">'.html'</span>, **kwargs)</span><br><span class="line">    msg.body = render_template(template + <span class="string">'.txt'</span>, **kwargs)</span><br><span class="line">    mail.send(msg)</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment"># 调用专门的函数完成邮件的发送</span></span><br><span class="line">   send_mail(<span class="string">'15600037563@163.com'</span>, <span class="string">'找回密码'</span>, </span><br><span class="line">             <span class="string">'password'</span>, name=<span class="string">'德莱文'</span>)</span><br><span class="line">   <span class="keyword">return</span> <span class="string">'邮件发送'</span></span><br></pre></td></tr></table></figure><p>异步发送邮件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_send_mail</span><span class="params">(app, msg)</span>:</span></span><br><span class="line">    <span class="comment"># 发送邮件必须在程序上下文中，新的线程中需要手动创建</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">      mail.send(msg)</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 封装函数发送邮件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(to, subject, template, **kwargs)</span>:</span></span><br><span class="line">    <span class="comment"># 根据代理对象current_app，找到实例化的app对象</span></span><br><span class="line">    app = current_app._get_current_object()</span><br><span class="line">    msg = Message(subject=subject, recipients=[to],</span><br><span class="line">                  sender=app.config[<span class="string">'MAIL_USERNAME'</span>])</span><br><span class="line">    msg.html = render_template(template + <span class="string">'.html'</span>, **kwargs)</span><br><span class="line">    msg.body = render_template(template + <span class="string">'.txt'</span>, **kwargs)</span><br><span class="line">    <span class="comment"># 创建线程</span></span><br><span class="line">    thr = Thread(target=async_send_mail, args=[app, msg])</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    thr.start()</span><br><span class="line">    <span class="keyword">return</span> thr</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件上传及邮件发送&quot;&gt;&lt;a href=&quot;#文件上传及邮件发送&quot; class=&quot;headerlink&quot; title=&quot;文件上传及邮件发送&quot;&gt;&lt;/a&gt;文件上传及邮件发送&lt;/h1&gt;&lt;h3 id=&quot;原生文件上传&quot;&gt;&lt;a href=&quot;#原生文件上传&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Flask" scheme="https://lidx.club/categories/Flask/"/>
    
    
      <category term="Flask" scheme="https://lidx.club/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Python之禅</title>
    <link href="https://lidx.club/2017/06/01/Python%E4%B9%8B%E7%A6%85/"/>
    <id>https://lidx.club/2017/06/01/Python之禅/</id>
    <published>2017-06-01T02:24:21.000Z</published>
    <updated>2018-07-22T07:38:12.686Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> Beautiful <span class="keyword">is</span> better than ugly.</span><br><span class="line"> <span class="number">2</span> <span class="comment"># 优美胜于丑陋（Python以编写优美的代码为目标）</span></span><br><span class="line"> <span class="number">3</span> Explicit <span class="keyword">is</span> better than implicit.</span><br><span class="line"> <span class="number">4</span> <span class="comment"># 明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似） </span></span><br><span class="line"> <span class="number">5</span> Simple <span class="keyword">is</span> better than complex.</span><br><span class="line"> <span class="number">6</span> <span class="comment"># 简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现） </span></span><br><span class="line"> <span class="number">7</span> Complex <span class="keyword">is</span> better than complicated.</span><br><span class="line"> <span class="number">8</span> <span class="comment"># 复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</span></span><br><span class="line"> <span class="number">9</span> Flat <span class="keyword">is</span> better than nested.</span><br><span class="line"><span class="number">10</span> <span class="comment"># 扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套） </span></span><br><span class="line"><span class="number">11</span> Sparse <span class="keyword">is</span> better than dense.</span><br><span class="line"><span class="number">12</span> <span class="comment"># 间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题） </span></span><br><span class="line"><span class="number">13</span> Readability counts.</span><br><span class="line"><span class="number">14</span> <span class="comment"># 可读性很重要（优美的代码是可读的） </span></span><br><span class="line"><span class="number">15</span> Special cases aren<span class="string">'t special enough to break the rules.</span></span><br><span class="line"><span class="string">16 Although practicality beats purity.</span></span><br><span class="line"><span class="string">17 # 即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上） </span></span><br><span class="line"><span class="string">18 Errors should never pass silently.</span></span><br><span class="line"><span class="string">19 Unless explicitly silenced.</span></span><br><span class="line"><span class="string">20 # 不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写except:pass风格的代码） </span></span><br><span class="line"><span class="string">21 In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class="line"><span class="string">22 # 当存在多种可能，不要尝试去猜测 </span></span><br><span class="line"><span class="string">23 There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class="line"><span class="string">24 # 而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法） </span></span><br><span class="line"><span class="string">25 Although that way may not be obvious at first unless you'</span>re Dutch.</span><br><span class="line"><span class="number">26</span> <span class="comment"># 虽然这并不容易，因为你不是 Python 之父（这里的Dutch是指Guido）</span></span><br><span class="line"><span class="number">27</span> Now <span class="keyword">is</span> better than never.</span><br><span class="line"><span class="number">28</span> Although never <span class="keyword">is</span> often better than *right* now.</span><br><span class="line"><span class="number">29</span> <span class="comment"># 做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）</span></span><br><span class="line"><span class="number">30</span> If the implementation <span class="keyword">is</span> hard to explain, it<span class="string">'s a bad idea.</span></span><br><span class="line"><span class="string">31 If the implementation is easy to explain, it may be a good idea.</span></span><br><span class="line"><span class="string">32 # 如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准） </span></span><br><span class="line"><span class="string">33 Namespaces are one honking great idea -- let'</span>s do more of those!</span><br><span class="line"><span class="number">34</span> <span class="comment"># 命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="Python" scheme="https://lidx.club/categories/Python/"/>
    
    
      <category term="禅" scheme="https://lidx.club/tags/%E7%A6%85/"/>
    
  </entry>
  
  <entry>
    <title>Django 博客项目（4）</title>
    <link href="https://lidx.club/2017/05/29/Django%20%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%EF%BC%884%EF%BC%89/"/>
    <id>https://lidx.club/2017/05/29/Django 博客项目（4）/</id>
    <published>2017-05-29T09:14:12.000Z</published>
    <updated>2018-07-19T07:06:59.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-博客项目（4）"><a href="#Django-博客项目（4）" class="headerlink" title="Django 博客项目（4）"></a>Django 博客项目（4）</h1><p>课前甜点：使用mixin优化PostDetailView</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 优化postdetailview</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostDetialViewPrime</span><span class="params">(SingleObjectMixin, ListView)</span>:</span></span><br><span class="line">    paginate_by = <span class="number">1</span></span><br><span class="line">    template_name = <span class="string">'blog/detail.html'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写get方法，调用increse_view方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 生成self.object</span></span><br><span class="line">        self.object = self.get_object()</span><br><span class="line">        <span class="comment"># 调用increase_view</span></span><br><span class="line">        self.object.increase_views()</span><br><span class="line">        <span class="comment"># 最后调用父类的get</span></span><br><span class="line">        <span class="keyword">return</span> super().get(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写get_object方法，加入markdown渲染的代码</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object</span><span class="params">(self, queryset=Post.objects.all<span class="params">()</span>)</span>:</span></span><br><span class="line">        post = super().get_object(queryset=Post.objects.all())</span><br><span class="line">        <span class="comment"># 进行markdown处理</span></span><br><span class="line">        md = markdown.Markdown(extensions=[</span><br><span class="line">            <span class="string">'markdown.extensions.extra'</span>,</span><br><span class="line">            <span class="string">'markdown.extensions.codehilite'</span>,</span><br><span class="line">            TocExtension(slugify=slugify)</span><br><span class="line">        ])</span><br><span class="line">        post.content = md.convert(post.content)</span><br><span class="line">        <span class="comment"># 增加目录</span></span><br><span class="line">        post.toc = md.toc</span><br><span class="line">        <span class="comment"># 返回对象</span></span><br><span class="line">        <span class="keyword">return</span> post</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写get_context_data方法，来增加额外的上下文变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 先调用父类的get_context_data方法来获取context</span></span><br><span class="line">        context = super().get_context_data(**kwargs)</span><br><span class="line">        form = CommentForm()</span><br><span class="line">        page_obj = context.get(<span class="string">'page_obj'</span>, <span class="keyword">None</span>)</span><br><span class="line">        paginator = context.get(<span class="string">'paginator'</span>, <span class="keyword">None</span>)</span><br><span class="line">        start, end = custom_paginator(current_page=page_obj.number, num_pages=paginator.num_pages)</span><br><span class="line">        context.update(&#123;</span><br><span class="line">            <span class="string">'post'</span>: self.object,</span><br><span class="line">            <span class="string">'form'</span>: form,</span><br><span class="line">            <span class="string">'page_range'</span>: range(start, end + <span class="number">1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> context</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.object.comment_set.filter(parent_comment=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><h3 id="1-拓展User模型"><a href="#1-拓展User模型" class="headerlink" title="1. 拓展User模型"></a>1. 拓展User模型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Django 用户认证系统提供了一个内置的 User 对象，用于记录用户的用户名，密码等个人信息。</span><br><span class="line">对于 Django 内置的 User 模型， 仅包含以下一些主要的属性：</span><br><span class="line">username，即用户名</span><br><span class="line">password，密码</span><br><span class="line">email，邮箱</span><br><span class="line">first_name，名</span><br><span class="line">last_name，姓</span><br><span class="line">对于一些网站来说，用户可能还包含有昵称、头像、个性签名等等其它属性。</span><br><span class="line">因此仅仅使用 Django 内置的 User 模型是不够。</span><br><span class="line">好在 Django 用户系统遵循可拓展的设计原则。</span><br><span class="line">我们可以方便地拓展 User 模型。</span><br></pre></td></tr></table></figure><h4 id="1-1-继承-AbstractUser-拓展用户模型"><a href="#1-1-继承-AbstractUser-拓展用户模型" class="headerlink" title="1.1 继承 AbstractUser 拓展用户模型"></a>1.1 继承 AbstractUser 拓展用户模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">这是推荐做法。</span><br><span class="line">事实上，查看 User 模型的源码就知道，User 也是继承自 AbstractUser 抽象基类。</span><br><span class="line">而且仅仅就是继承了 AbstractUser，没有对 AbstractUser 做任何的拓展。</span><br><span class="line">所以，如果我们继承 AbstractUser，将获得 User 的全部特性，而且还可以根据自己的需求进行拓展。</span><br><span class="line">打开 users/models.py 文件，写上我们自定义的用户模型代码：</span><br><span class="line">user/models.py</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    nickname = models.CharField(max_length=<span class="number">50</span>,blank=<span class="keyword">True</span>)</span><br><span class="line">    headshot = models.ImageField(upload_to=<span class="string">'avatar/%Y/%m/%d'</span>,default=<span class="string">'default.jpg'</span>)</span><br><span class="line">    signature = models.CharField(max_length=<span class="number">128</span>, default=<span class="string">'This guy is too lazy to leave anything here!'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span><span class="params">(AbstractUser.Meta)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">为了让 Django 用户认证系统使用我们自定义的用户模型,必须要在settings.py里通过 AUTH_USER_MODEL 指定自定义用户模型所在的位置，即需要如下设置：</span><br><span class="line">myblog/settings.py</span><br><span class="line"><span class="comment"># 其它设置...</span></span><br><span class="line">AUTH_USER_MODEL = <span class="string">'users.User'</span></span><br><span class="line">即告诉 Django，使用 users 应用下的 User 用户模型。</span><br><span class="line">然后在blog/models.py中修改Post的作者外键为新的User类：</span><br><span class="line">即把<span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User删除。</span><br><span class="line">加上：<span class="keyword">from</span> users.models <span class="keyword">import</span> User</span><br><span class="line">然后执行数据库迁移命令。</span><br><span class="line">如报下面这种错误：</span><br><span class="line">django.db.migrations.exceptions.InconsistentMigrationHistory: Migration admin<span class="number">.0001</span>_initial <span class="keyword">is</span> applied before its dependency users<span class="number">.0001</span>_initial on database <span class="string">'default'</span>.</span><br><span class="line">删除数据库的所有表重新执行数据库迁移命令。</span><br></pre></td></tr></table></figure><h3 id="2-注册"><a href="#2-注册" class="headerlink" title="2. 注册"></a>2. 注册</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户注册就是创建用户对象，将用户的个人信息保存到数据库里。</span><br></pre></td></tr></table></figure><h4 id="2-1-编写用户注册表单"><a href="#2-1-编写用户注册表单" class="headerlink" title="2.1 编写用户注册表单"></a>2.1 编写用户注册表单</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Django 用户系统内置了登录、修改密码、找回密码等视图</span><br><span class="line">但是唯独用户注册的视图函数没有提供，这一部分需要我们自己来写。</span><br><span class="line">Django 已经内置了一个用户注册表单：django.contrib.auth.forms.UserCreationForm，</span><br><span class="line">不过这个表单的一个小问题是它关联的是 django 内置</span><br><span class="line">的 User 模型，从它的源码中可以看出：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCreationForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = (<span class="string">"username"</span>,)</span><br><span class="line">        field_classes = &#123;<span class="string">'username'</span>: UsernameField&#125;</span><br><span class="line">我们可以继承它，对它做一点小小的修改就可以了。</span><br><span class="line">在 users 应用下新建一个 forms.py 文件用于存放表单代码，然后写上如下代码：</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.forms <span class="keyword">import</span> UserCreationForm</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterForm</span><span class="params">(UserCreationForm)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span><span class="params">(UserCreationForm.Meta)</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fileds = (<span class="string">'username'</span>, <span class="string">'email'</span>, <span class="string">'nickname'</span>, <span class="string">'headshot'</span>, <span class="string">'signature'</span>)</span><br></pre></td></tr></table></figure><h4 id="2-2-编写用户注册视图函数"><a href="#2-2-编写用户注册视图函数" class="headerlink" title="2.2 编写用户注册视图函数"></a>2.2 编写用户注册视图函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">users/views.py</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> RegisterForm</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        form = RegisterForm(request.POST, request.FILES)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> redirect(reverse(<span class="string">'blog:index'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = RegisterForm()</span><br><span class="line">    retun render(request, <span class="string">'users/register.html'</span>, &#123;<span class="string">'form'</span>:form&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-3-设置-URL-模式"><a href="#2-3-设置-URL-模式" class="headerlink" title="2.3 设置 URL 模式"></a>2.3 设置 URL 模式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">users/urls.py</span><br><span class="line"><span class="selector-tag">from</span> <span class="selector-tag">django</span><span class="selector-class">.conf</span><span class="selector-class">.urls</span> <span class="selector-tag">import</span> <span class="selector-tag">url</span></span><br><span class="line"><span class="selector-tag">from</span> . <span class="selector-tag">import</span> <span class="selector-tag">views</span></span><br><span class="line"></span><br><span class="line">app_name = 'users'</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r'^register/', views.register, name='register'),</span><br><span class="line">]</span><br><span class="line">接下来需要在工程的 <span class="selector-tag">urls</span><span class="selector-class">.py</span> 文件里包含 <span class="selector-tag">users</span> 应用的 <span class="selector-tag">URL</span> 模式</span><br><span class="line">django_auth_example/urls.py</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">from</span> <span class="selector-tag">django</span><span class="selector-class">.conf</span><span class="selector-class">.urls</span> <span class="selector-tag">import</span> <span class="selector-tag">url</span>, <span class="selector-tag">include</span></span><br><span class="line"><span class="selector-tag">from</span> <span class="selector-tag">django</span><span class="selector-class">.contrib</span> <span class="selector-tag">import</span> <span class="selector-tag">admin</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r'^admin/', admin.site.urls),</span><br><span class="line">...</span><br><span class="line">    url(r'^users/', include('users.urls')),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="2-4-编写注册页面模板"><a href="#2-4-编写注册页面模板" class="headerlink" title="2.4 编写注册页面模板"></a>2.4 编写注册页面模板</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">已提供模板。在模板中写入下面代码：</span><br><span class="line">&lt;form class="form" action="&#123;% url 'users:register' %&#125;" method="post"&gt;</span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        &#123;% for field in form %&#125;</span><br><span class="line">            &#123;&#123; field.label_tag &#125;&#125;</span><br><span class="line">            &#123;&#123; field &#125;&#125;</span><br><span class="line">            &#123;&#123; field.errors &#125;&#125;</span><br><span class="line">            &#123;% if field.help_text %&#125;</span><br><span class="line">                &lt;p class="help text-small text-muted"&gt;&#123;&#123; field.help_text|safe &#125;&#125;&lt;/p&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h3 id="3-登录"><a href="#3-登录" class="headerlink" title="3 登录"></a>3 登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Django 已经为我们写好了登录功能的全部代码。</span><br><span class="line">我们不必像之前处理注册流程那样费劲了。</span><br><span class="line">只需几分钟的简单配置，就可为用户提供登录功能。</span><br></pre></td></tr></table></figure><h4 id="3-1-引入内置的-URL-模型"><a href="#3-1-引入内置的-URL-模型" class="headerlink" title="3.1 引入内置的 URL 模型"></a>3.1 引入内置的 URL 模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Django 内置的登录、修改密码、找回密码等视图函数对应</span><br><span class="line">的 URL 模式位于django.contrib.auth.urls.py 中。</span><br><span class="line">首先在工程的 urls.py 文件里包含这些 URL 模式。</span><br><span class="line">url(<span class="string">r'^users/'</span>, include(<span class="string">'django.contrib.auth.urls'</span>)),</span><br><span class="line">这将包含以下的 URL 模式：</span><br><span class="line">^users/login/$ [name=<span class="string">'login'</span>]</span><br><span class="line">^users/logout/$ [name=<span class="string">'logout'</span>]</span><br><span class="line">^users/password_change/$ [  name=<span class="string">'password_change'</span>]</span><br><span class="line">^users/password_change/done/$ [name=<span class="string">'password_change_done'</span>]</span><br><span class="line">^users/password_reset/$ [name=<span class="string">'password_reset'</span>]</span><br><span class="line">^users/password_reset/done/$ [name=<span class="string">'password_reset_done'</span>]</span><br><span class="line">^users/reset/(?P&lt;uidb64&gt;[0-9A-Za-z_\-]+)/(?P&lt;token&gt;[0-9A-Za-z]&#123;1,13&#125;-[0-9A-Za-z]&#123;1,20&#125;)/$ [name='password_reset_confirm']</span><br><span class="line">^users/reset/done/$ [name=<span class="string">'password_reset_complete'</span>]</span><br></pre></td></tr></table></figure><h4 id="3-2-设置模板路径"><a href="#3-2-设置模板路径" class="headerlink" title="3.2 设置模板路径"></a>3.2 设置模板路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">默认的登录视图函数渲染的是 registration/login.html 模板。</span><br><span class="line">因此需要在 templates/ 目录下新建一个 registration 文件夹。</span><br><span class="line">再在 registration/ 目录下新建 login.html 模板文件。</span><br></pre></td></tr></table></figure><h4 id="3-3-编写登录模板"><a href="#3-3-编写登录模板" class="headerlink" title="3.3 编写登录模板"></a>3.3 编写登录模板</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">登录模板的代码和注册模板的代码十分类似。</span><br><span class="line">已提供模板。</span><br><span class="line">关注表单部分的代码：</span><br><span class="line">&lt;form class="form" action="&#123;% url 'login' %&#125;" method="post"&gt;</span><br><span class="line">  &#123;% csrf_token %&#125;</span><br><span class="line">  &#123;&#123; form.non_field_errors &#125;&#125;</span><br><span class="line">  &#123;% for field in form %&#125;</span><br><span class="line">    &#123;&#123; field.label_tag &#125;&#125;</span><br><span class="line">    &#123;&#123; field &#125;&#125;</span><br><span class="line">    &#123;&#123; field.errors &#125;&#125;</span><br><span class="line">    &#123;% if field.help_text %&#125;</span><br><span class="line">        &lt;p class="help text-small text-muted"&gt;&#123;&#123; field.help_text|safe &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">  &lt;button type="submit" class="btn btn-primary btn-block"&gt;登录&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">需要特别说明的是&#123;&#123; form.non_field_errors &#125;&#125;。</span><br><span class="line">这显示的同样是表单错误，但是显示的表单错误是和具体的某个表单字段无关的。</span><br><span class="line">相对 &#123;&#123; field.errors &#125;&#125;显示的是具体某个字段的错误。</span><br><span class="line">比如对于字段 <span class="selector-tag">username</span>，如果用户输入的 <span class="selector-tag">username</span> 不</span><br><span class="line">符合要求，比如太长了或者太短了，表单会在 <span class="selector-tag">username</span> </span><br><span class="line">下方渲染这个错误。</span><br><span class="line">但有些表单错误不和任何具体的字段相关，比如用户输入的</span><br><span class="line">用户名和密码无法通过验证，这可能是用户输入的用户名不</span><br><span class="line">存在，也可能是用户输入的密码错误，因此这个错误信息将</span><br><span class="line">通过 &#123;&#123; form.non_field_errors &#125;&#125; 渲染。</span><br></pre></td></tr></table></figure><h4 id="3-4-设置登录登出的跳转-URL"><a href="#3-4-设置登录登出的跳转-URL" class="headerlink" title="3.4 设置登录登出的跳转 URL"></a>3.4 设置登录登出的跳转 URL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在settings中设置以下参数：</span><br><span class="line">LOGOUT_REDIRECT_URL = &apos;/index/&apos;</span><br><span class="line">LOGIN_REDIRECT_URL = &apos;/index/&apos;</span><br><span class="line">表示登录后跳转到index页面。</span><br></pre></td></tr></table></figure><h3 id="4-注销和页面跳转"><a href="#4-注销和页面跳转" class="headerlink" title="4. 注销和页面跳转"></a>4. 注销和页面跳转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当用户想切换登录账号，或者想退出登录状态时，这时候就需要注销已登录的账号。</span><br><span class="line">现在我们来为网站添加注销登录的功能，这个功能 Django 也已经为</span><br><span class="line">我们提供，我们只需做一点简单配置。</span><br></pre></td></tr></table></figure><h4 id="4-1-注销登录"><a href="#4-1-注销登录" class="headerlink" title="4.1 注销登录"></a>4.1 注销登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注销登录的视图为 logout</span><br></pre></td></tr></table></figure><h4 id="4-2-页面跳转"><a href="#4-2-页面跳转" class="headerlink" title="4.2 页面跳转"></a>4.2 页面跳转</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">对于一个网站来说，比较好的用户体验是登录、注册和注销后跳转回用户之前访问的页面。</span><br><span class="line">在登录和注销的视图函数中，Django 已经为我们处理了跳转回用户之前访问页面的流程。</span><br><span class="line">其实现的原理是，在登录和注销的流程中，始终传递一个 next 参数记录用户之前访问页面的 URL。</span><br><span class="line">我们需要做的就是在用户访问登录或者注销的页面时，在 URL 中传递一个 next 参数给视图函数，具体做法如下：</span><br><span class="line">&lt;button class="btn btn-default"&gt;</span><br><span class="line">  &lt;a href="&#123;% url 'logout' %&#125;?next=&#123;&#123; request.path &#125;&#125;"&gt;注销登录&lt;/a&gt;</span><br><span class="line">&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button class="btn btn-default"&gt;</span><br><span class="line">  &lt;a href="&#123;% url 'login' %&#125;?next=&#123;&#123; request.path &#125;&#125;"&gt;登录&lt;/a&gt;</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">可以看到，我们在登录和注销的 URL 后加了 next 参数，其值为 &#123;&#123; request.path &#125;&#125;。request.path 是用户当前访问页面的 URL。</span><br><span class="line">为了在整个登录流程中记录 next 的值，还需要在登录表单中增加一个表单控件，用于传递 next 值。</span><br><span class="line">registration/login.html</span><br><span class="line"></span><br><span class="line">&lt;form class="form" action="&#123;% url 'login' %&#125;" method="post"&gt;</span><br><span class="line">  ...                 </span><br><span class="line">  &lt;button type="submit" class="btn btn-primary btn-block"&gt;登录&lt;/button&gt;</span><br><span class="line">  &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"next"</span> value=<span class="string">"&#123;&#123; next &#125;&#125;"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">即在表单中增加了一个隐藏的 input 控件，其值为 &#123;&#123; next &#125;&#125;，即之前通过 URL 参数传递给登录视图函数的，然后登录视图函数又将该值传递给了 login.html 模板。</span><br><span class="line">这样在整个登录流程中，始终有一个记录着用户在登录前页面 URL 的变量 next 在视图和模板间来回传递，直到用户登录成功后再跳转回 next 记录的页面。</span><br><span class="line">类似的，我们也希望用户注册后返回注册前页面。</span><br><span class="line">不过由于注册视图函数是我们自己写的，所以需要我们自己去获取跳转的地址。</span><br><span class="line">需要修改一下注册视图函数：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(request)</span>:</span></span><br><span class="line">    redirect_to = request.POST.get(<span class="string">'next'</span>, request.GET.get(<span class="string">'next'</span>, <span class="string">''</span>))</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        form = RegisterForm(request.POST)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">if</span> redirect_to:</span><br><span class="line">                <span class="keyword">return</span> redirect(redirect_to)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> redirect(reverse(<span class="string">'blog:index'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = RegisterForm()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'users/register.html'</span>, &#123;<span class="string">'form'</span>:form,<span class="string">'next'</span>:redirect_to&#125;)</span><br><span class="line">然后修改模板</span><br><span class="line">base.html</span><br><span class="line"> &lt;a href="&#123;% url 'users:register' %&#125;?next=&#123;&#123; request.path &#125;&#125;"&gt;注册&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="5-修改密码"><a href="#5-修改密码" class="headerlink" title="5. 修改密码"></a>5. 修改密码</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改密码的的视图函数默认渲染的模板名为 <span class="selector-tag">password_change_form</span><span class="selector-class">.html</span></span><br><span class="line">首先在 registration/ 下新建一个password_change_form.html 文件，写入表单代码。代码几乎和登录界页面一样。</span><br><span class="line"><span class="selector-tag">base</span><span class="selector-class">.html</span>中增加修改密码的超链接，注意必须是登录才能显示这个超链接：</span><br><span class="line">&lt;li class="cl-effect-11"&gt;&lt;a href="&#123;% url 'password_change' %&#125;?next=&#123;&#123; request.path &#125;&#125;" data-hover="修改密码"&gt;修改密码&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">然后编写密码修改成功页面模板。</span><br></pre></td></tr></table></figure><h3 id="6-重置密码"><a href="#6-重置密码" class="headerlink" title="6. 重置密码"></a>6. 重置密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当用户不小心忘记了密码时，网站需要提供让用户找回账户密码的功能。</span><br><span class="line">我们将发送一封含有重置用户密码链接的邮件到用户注册时的邮箱，用户点击收到的链接就可以重置他的密码。</span><br></pre></td></tr></table></figure><h4 id="6-1-发送邮件设置"><a href="#6-1-发送邮件设置" class="headerlink" title="6.1 发送邮件设置"></a>6.1 发送邮件设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Django 内置了非常方便的发送邮件的功能，不过需要在 settings.py 中做一些简单配置。</span><br><span class="line">生产环境下通常需要使用真实的邮件发送服务器，配置步骤会比较多一点。</span><br><span class="line">不过 Django 为开发环境下发送邮件提供了一些方便的 Backends 来模拟真实邮件的发送，例如直接发送邮件到终端。</span><br><span class="line">在 settings.py 中加入以下设置：</span><br><span class="line">EMAIL_BACKEND = &apos;django.core.mail.backends.console.EmailBackend&apos;</span><br><span class="line">这样 Django 将把邮件发送到终端。</span><br></pre></td></tr></table></figure><h4 id="6-2-编写重置密码模板"><a href="#6-2-编写重置密码模板" class="headerlink" title="6.2 编写重置密码模板"></a>6.2 编写重置密码模板</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">重置的视图函数默认渲染的模板名为 password_reset_form.html，因此首先在 registration/ 下新建一个 password_reset_form.html 文件.</span><br><span class="line">此外，修改一下重置密码按钮的超链接属性：</span><br><span class="line">registration/login.html</span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex-left top-gap text-small"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"unit-2-3"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>没有账号？<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'users:register' %&#125;"</span>&gt;</span>立即注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"unit-1-3 flex-right"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'password_reset' %&#125;"</span>&gt;</span>忘记密码？<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-2-编写邮件发送成功页面模板"><a href="#6-2-编写邮件发送成功页面模板" class="headerlink" title="6.2 编写邮件发送成功页面模板"></a>6.2 编写邮件发送成功页面模板</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户在重置密码页面输入注册时的邮箱后，Django 会把用户跳转到邮件发送成功页面.</span><br><span class="line">该页面渲染的模板为 password_reset_done.html，因此再添加一个密码修改成功页面的模板.</span><br></pre></td></tr></table></figure><h4 id="6-3-编写设置新密码页面模板"><a href="#6-3-编写设置新密码页面模板" class="headerlink" title="6.3 编写设置新密码页面模板"></a>6.3 编写设置新密码页面模板</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在接收到的重置密码邮件中有一个设置新密码的链接，点击该链接就会跳转到给账户设置新密码的页面，以便用户给已忘记密码的账户设置一个全新的密码。</span><br><span class="line">该页面渲染的模板为 password_reset_confirm.html</span><br></pre></td></tr></table></figure><h4 id="6-4-编写设置新密码成功页面模板"><a href="#6-4-编写设置新密码成功页面模板" class="headerlink" title="6.4 编写设置新密码成功页面模板"></a>6.4 编写设置新密码成功页面模板</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户在设置新密码页面输入新密码后，Django 会把用户跳转到设置新密码成功页面.</span><br><span class="line">该页面渲染的模板为 password_reset_complete.html，因此再添加一个设置新密码成功页面的模板.</span><br></pre></td></tr></table></figure><h3 id="7-自定义认证后台"><a href="#7-自定义认证后台" class="headerlink" title="7 自定义认证后台"></a>7 自定义认证后台</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Django auth 应用默认支持用户名（username）进行登录。</span><br><span class="line">但是在实践中，网站可能还需要邮箱、手机号、身份证号等进行登录。</span><br><span class="line">这就需要我们自己写一个认证后台，用于验证用户输入的用户信息是否正确，从而对拥有正确凭据的用户进行登录认证。</span><br></pre></td></tr></table></figure><h4 id="7-1-Django-验证用户合法性的方式"><a href="#7-1-Django-验证用户合法性的方式" class="headerlink" title="7.1 Django 验证用户合法性的方式"></a>7.1 Django 验证用户合法性的方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Django 对用户登录的验证工作均在一个被称作认证后台（Authentication Backend）的类中进行。</span><br><span class="line">这个类是一个普通的 Python 类，它有一个 authenticate 方法，</span><br><span class="line">接收登录用户提供的凭据（如用户名或者邮箱以及密码）作为参数，</span><br><span class="line">并根据这些凭据判断用户是否合法（即是否是已注册用户，密码是否正确等）。</span><br><span class="line">面是 Django 内置的认证后台的部分源代码：</span><br><span class="line">django.contrib.auth.backends</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelBackend</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Authenticates against settings.AUTH_USER_MODEL.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request, username=None, password=None, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            username = kwargs.get(UserModel.USERNAME_FIELD)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = UserModel._default_manager.get_by_natural_key(username)</span><br><span class="line">        <span class="keyword">except</span> UserModel.DoesNotExist:</span><br><span class="line">            <span class="comment"># Run the default password hasher once to reduce the timing</span></span><br><span class="line">            <span class="comment"># difference between an existing and a non-existing user (#20760).</span></span><br><span class="line">            UserModel().set_password(password)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> user.check_password(password) <span class="keyword">and</span> self.user_can_authenticate(user):</span><br><span class="line">                <span class="keyword">return</span> user</span><br><span class="line">这段代码根据用户传入的 username 和 password，验证该 username 对应的用户是否存在以及密码是否正确，是则返回该 user 对象。</span><br><span class="line">可以定义多个认证后台，Django 内部会逐一调用这些后台的 </span><br><span class="line">authenticate 方法来验证用户提供登录凭据的合法性，一旦</span><br><span class="line">通过某个后台的验证，表明用户提供的凭据合法，从而允许登录该用户。</span><br></pre></td></tr></table></figure><h4 id="7-2-Email-Backend"><a href="#7-2-Email-Backend" class="headerlink" title="7.2 Email Backend"></a>7.2 Email Backend</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">因为 Django auth 应用内置只支持用户名和密码的认证方式，所以</span><br><span class="line">目前用户是无法使用 Email 进行登录的。</span><br><span class="line">为了实现邮箱登录，我们需要编写一个认证后台。</span><br><span class="line">这个后台的作用便是验证用户提供的凭据（这里是邮箱以及密码）是合法的。</span><br><span class="line">完全仿照内置的 ModelBackend 代码即可。</span><br><span class="line">首先在 users 应用下新建一个 backends.py 文件，然后写入如下代码：</span><br><span class="line">users/backends.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmailBackend</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request, **credentials)</span>:</span></span><br><span class="line">        <span class="comment"># 要注意登录表单中用户输入的用户名或者邮箱的 field 名均为 username</span></span><br><span class="line">        email = credentials.get(<span class="string">'email'</span>, credentials.get(<span class="string">'username'</span>))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = User.objects.get(email=email)</span><br><span class="line">        <span class="keyword">except</span> User.DoesNotExist:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> user.check_password(credentials[<span class="string">"password"</span>]):</span><br><span class="line">                <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(self, user_id)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        该方法是必须的</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> User.objects.get(pk=user_id)</span><br><span class="line">        <span class="keyword">except</span> User.DoesNotExist:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">逻辑非常简单，就是根据用户提供的 Email 和密码，检查该 email</span><br><span class="line">对应的用户是否存在，如果存在则检查密码是否正确，如果密码也没有</span><br><span class="line">问题，则返回该 user 对象。</span><br></pre></td></tr></table></figure><h4 id="7-3-配置-Backend"><a href="#7-3-配置-Backend" class="headerlink" title="7.3 配置 Backend"></a>7.3 配置 Backend</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">接下来就要告诉 <span class="selector-tag">Django</span>，需要使用哪些 <span class="selector-tag">Backends</span> 对用户的凭据信息进行验证，这需要在 <span class="selector-tag">settings</span><span class="selector-class">.py</span> 中设置：</span><br><span class="line"><span class="selector-tag">settings</span><span class="selector-class">.py</span></span><br><span class="line"></span><br><span class="line">AUTHENTICATION_BACKENDS = (</span><br><span class="line">    'django.contrib.auth.backends.ModelBackend',</span><br><span class="line">    'users.backends.EmailBackend',</span><br><span class="line">)</span><br><span class="line">第一个 <span class="selector-tag">Backend</span> 是 <span class="selector-tag">Django</span> 内置的 <span class="selector-tag">Backend</span>，当用户提供的是用</span><br><span class="line">户名和正确的密码时该 <span class="selector-tag">Backend</span> 会通过验证；第二个 <span class="selector-tag">Backend</span> 是</span><br><span class="line">刚刚自定义的 <span class="selector-tag">Backend</span>，当用户提供的是 <span class="selector-tag">Email</span> 和正确的密码时该</span><br><span class="line"> <span class="selector-tag">Backend</span> 会通过验证。</span><br></pre></td></tr></table></figure><h3 id="8-使用modelform上传头像。"><a href="#8-使用modelform上传头像。" class="headerlink" title="8 使用modelform上传头像。"></a>8 使用modelform上传头像。</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. 服务器端安装<span class="selector-tag">pillow</span></span><br><span class="line">   <span class="selector-tag">pip</span> <span class="selector-tag">install</span> <span class="selector-tag">pillow</span></span><br><span class="line">2. 添加图片字段到文章<span class="selector-tag">models</span><span class="selector-class">.py</span></span><br><span class="line">   headshot = models.ImageField(upload_to='avatar/%Y/%m/%d/',default='default.jpg', verbose_name='头像')</span><br><span class="line">3. <span class="selector-tag">settings</span><span class="selector-class">.py</span> 增加图片存储路径，同时创建目录。</span><br><span class="line">   MEDIA_URL = '/uploads/'</span><br><span class="line">   MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')</span><br><span class="line">4. 项目<span class="selector-tag">urls</span><span class="selector-class">.py</span>添加如下<span class="selector-tag">static</span></span><br><span class="line">   <span class="selector-tag">from</span> <span class="selector-tag">django</span><span class="selector-class">.conf</span> <span class="selector-tag">import</span> <span class="selector-tag">settings</span></span><br><span class="line">   <span class="selector-tag">from</span> <span class="selector-tag">django</span><span class="selector-class">.conf</span><span class="selector-class">.urls</span><span class="selector-class">.static</span> <span class="selector-tag">import</span> <span class="selector-tag">static</span></span><br><span class="line">   urlpatterns = [</span><br><span class="line">               ........</span><br><span class="line">           ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br><span class="line">5. form表单提交方法为post，且含有enctype="multipart/form-data"属性</span><br><span class="line">6. <span class="selector-tag">view</span>函数接收：</span><br><span class="line">    form = RegisterForm(request.POST, request.FILES)  </span><br><span class="line">7. 在前台展示：</span><br><span class="line">    &lt;img src="&#123;&#123; user.headshot.url &#125;&#125; " height="40" width="40"/&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-博客项目（4）&quot;&gt;&lt;a href=&quot;#Django-博客项目（4）&quot; class=&quot;headerlink&quot; title=&quot;Django 博客项目（4）&quot;&gt;&lt;/a&gt;Django 博客项目（4）&lt;/h1&gt;&lt;p&gt;课前甜点：使用mixin优化PostDeta
      
    
    </summary>
    
      <category term="Django" scheme="https://lidx.club/categories/Django/"/>
    
    
      <category term="博客" scheme="https://lidx.club/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Django 博客项目（3）</title>
    <link href="https://lidx.club/2017/05/24/Django%20%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%EF%BC%883%EF%BC%89/"/>
    <id>https://lidx.club/2017/05/24/Django 博客项目（3）/</id>
    <published>2017-05-24T02:14:12.000Z</published>
    <updated>2018-07-19T07:00:05.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-博客项目（3）"><a href="#Django-博客项目（3）" class="headerlink" title="Django 博客项目（3）"></a>Django 博客项目（3）</h1><h3 id="1-标签云"><a href="#1-标签云" class="headerlink" title="1. 标签云"></a>1. 标签云</h3><h4 id="1-1-获取标签列表"><a href="#1-1-获取标签列表" class="headerlink" title="1.1 获取标签列表"></a>1.1 获取标签列表</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">标签云的实现方式和分类列表完全一样。</span><br><span class="line">定义一个<span class="selector-tag">get_tags</span>模板标签，获取到文章数大于 0 的标签列表，然后在模板中渲染显示它。</span><br><span class="line">@<span class="keyword">register</span>.<span class="keyword">simple_tag</span> </span><br><span class="line">def get_tags(): </span><br><span class="line"># 记得在顶部引入 Tag model </span><br><span class="line">return Tag.objects.annotate(num_posts=Count(<span class="string">'post'</span>)).filter(num_posts__gt=<span class="number">0</span>)</span><br><span class="line">然后在模板中循环显示这些标签：</span><br><span class="line">&lt;div class=<span class="string">"widget widget-tag-cloud"</span>&gt;</span><br><span class="line">        &lt;h3 class=<span class="string">"widget-title"</span>&gt;标签云&lt;/h3&gt;</span><br><span class="line">        &#123;% <span class="selector-tag">get_tags</span> <span class="selector-tag">as</span> <span class="selector-tag">tag_list</span> %&#125;</span><br><span class="line">        &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">           &#123;% for tag in tag_list %&#125;</span><br><span class="line">               &lt;<span class="selector-tag">li</span>&gt;</span><br><span class="line">                &lt;a href="#"&gt;&#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">               &lt;/li&gt;</span><br><span class="line">            &#123;% empty %&#125;</span><br><span class="line">               暂无标签！</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="1-2-显示某个标签下的文章列表"><a href="#1-2-显示某个标签下的文章列表" class="headerlink" title="1.2 显示某个标签下的文章列表"></a>1.2 显示某个标签下的文章列表</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1）标签视图函数</span><br><span class="line">代码和<span class="selector-tag">CategoryView</span>几乎一样：</span><br><span class="line"><span class="selector-tag">class</span> <span class="selector-tag">TagView</span>(<span class="selector-tag">IndexView</span>):</span><br><span class="line">    <span class="selector-tag">def</span> <span class="selector-tag">get_queryset</span>(<span class="selector-tag">self</span>):</span><br><span class="line">        tag = get_object_or_404(Tag, pk=self.kwargs.get('pk'))</span><br><span class="line">        return super().get_queryset().filter(tag=tag)</span><br><span class="line">2）绑定 <span class="selector-tag">URL</span></span><br><span class="line"><span class="selector-tag">URL</span> 模式和分类也是完全类似的：</span><br><span class="line">url(r'^tag/(?P&lt;pk&gt;\d+)/$', views.TagView.as_view(), name='tag'),</span><br><span class="line">3）设置标签跳转链接</span><br><span class="line">设置一下标签的超链接，这样点击标签后就可以跳转到该标签下的文章列表页面了。</span><br><span class="line">&lt;a href="&#123;% url 'blog:tag' tag.pk %&#125;"&gt;&#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="1-3-在文章详情页显示标签"><a href="#1-3-在文章详情页显示标签" class="headerlink" title="1.3 在文章详情页显示标签"></a>1.3 在文章详情页显示标签</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">需求：当在文章详情页面时，我们希望显示的这篇文章所属的标签。</span><br><span class="line">思路：通过<span class="selector-tag">post</span>去查<span class="selector-tag">post</span>所属的标签，那就是正向查找。直接通过<span class="selector-tag">post</span><span class="selector-class">.tags</span><span class="selector-class">.all</span>()即可获得<span class="selector-tag">post</span>下的标签列表。</span><br><span class="line">&lt;div class="entry-content clearfix"&gt;</span><br><span class="line">        &#123;&#123; post.body |safe &#125;&#125;</span><br><span class="line">        &lt;div class="widget-tag-cloud"&gt;</span><br><span class="line">            &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">                标签：</span><br><span class="line">                &#123;% for tag in post.tags.all %&#125;</span><br><span class="line">                    &lt;li&gt;&lt;a href="&#123;% url 'blog:tag' tag.pk %&#125;"&gt;# &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="2-RSS-订阅"><a href="#2-RSS-订阅" class="headerlink" title="2. RSS 订阅"></a>2. RSS 订阅</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">博客提供 RSS 订阅应该是标配。这样读者就可以通过一些聚合阅读工具来订阅你的博客，时时查看是否有更新，而不必每次都跳转到博客上来查看。</span><br></pre></td></tr></table></figure><h4 id="2-1-RSS-简介"><a href="#2-1-RSS-简介" class="headerlink" title="2.1 RSS 简介"></a>2.1 RSS 简介</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RSS（Really Simple Syndication）是一种描述和同步网站内容的格式。，它采用 XML 作为内容传递的格式。</span><br><span class="line">简单来说就是网站可以把内容包装成符合 RSS 标准的 XML 格式文档。</span><br><span class="line">一旦网站内容符合一个统一的规范，那么人们就可以开发一种读取这种规范化的 XML 文档的工具来聚合各大网站的内容。</span><br></pre></td></tr></table></figure><h4 id="2-2-使用-Django-Feed-类"><a href="#2-2-使用-Django-Feed-类" class="headerlink" title="2.2 使用 Django Feed 类"></a>2.2 使用 Django Feed 类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">根据以上对 RSS 的介绍，我们可以发现关键的地方就是根据网站的内容生成规范化的 XML 文档。</span><br><span class="line">Django 已经内置了一些生成这个文档的方法.</span><br><span class="line">在 blog 应用的根目录下（models.py 所在目录）新建一个 feeds.py 文件以存放和 RSS 功能相关的代码.然后在feeds.py中写入如下代码：</span><br><span class="line"><span class="keyword">from</span> django.contrib.syndication.views <span class="keyword">import</span> Feed</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Post</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AllPostRssFeed</span><span class="params">(Feed)</span>:</span></span><br><span class="line">    <span class="comment"># 显示在聚合阅读器上的标题</span></span><br><span class="line">    title = <span class="string">"千峰博客"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过聚合阅读器跳转到网址的地址</span></span><br><span class="line">    link = <span class="string">'/index/'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示在聚合阅读器上的描述信息</span></span><br><span class="line">    description = <span class="string">"千峰博客项目演示测试"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 需要显示的内容条目</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">items</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Post.objects.all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 聚合器中显示的内容条目的标题</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">item_title</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'[%s]%s'</span> % (item.category, item.title)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 聚合器中显示的内容条目的描述</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">item_description</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> item.content</span><br><span class="line">以上代码就是指定要生成的xml文档内容。</span><br></pre></td></tr></table></figure><h4 id="2-3-添加-URL"><a href="#2-3-添加-URL" class="headerlink" title="2.3 添加 URL"></a>2.3 添加 URL</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">接下来就是指定 URL 模式，让人们访问这个 URL 后就可以看到 Feed 生成的内容。</span><br><span class="line">通常 RSS 的 URL 配置直接写在项目的 urls.py 文件里。</span><br><span class="line">项目的urls.py中：</span><br><span class="line">记得在顶部引入 AllPostsRssFeed</span><br><span class="line">url(<span class="string">r'^all/rss/$'</span>, AllPostRssFeed(), name=<span class="string">'rss'</span>),</span><br></pre></td></tr></table></figure><h4 id="2-4-修改模板"><a href="#2-4-修改模板" class="headerlink" title="2.4 修改模板"></a>2.4 修改模板</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">简单修改一下基模板，把 <span class="selector-tag">RSS</span> 的 <span class="selector-tag">URL</span> 添加到模板中，放在标签云下面：</span><br><span class="line">【templates/base.html】</span><br><span class="line">&lt;div class="rss"&gt;</span><br><span class="line">        &lt;a href="&#123;% url 'rss' %&#125;"&gt;&lt;span class="ion-social-rss-outline"&gt;&lt;/span&gt; RSS 订阅&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="2-5-RSS-测试插件"><a href="#2-5-RSS-测试插件" class="headerlink" title="2.5 RSS 测试插件"></a>2.5 RSS 测试插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用360浏览器，安装一个RSS Feed Reader应用。</span><br><span class="line">订阅我们的rss地址即可：http://127.0.0.1:8000/all/rss/</span><br></pre></td></tr></table></figure><h3 id="3-Markdown-自动生成文章目录"><a href="#3-Markdown-自动生成文章目录" class="headerlink" title="3. Markdown 自动生成文章目录"></a>3. Markdown 自动生成文章目录</h3><h4 id="3-1-在文中插入目录"><a href="#3-1-在文中插入目录" class="headerlink" title="3.1 在文中插入目录"></a>3.1 在文中插入目录</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Markdown</span> 在渲染内容的同时还可以自动提取整个内容的目录结构，现在我们来使用 <span class="selector-tag">Markdown</span> 为文章自动生成目录。</span><br><span class="line">在渲染 <span class="selector-tag">Markdown</span> 文本时加入了 <span class="selector-tag">toc</span> 拓展后，就可以在文中插入目录了</span><br><span class="line">方法是在书写 <span class="selector-tag">Markdown</span> 文本时，在你想生成目录的地方插入 <span class="selector-attr">[TOC]</span> 标记即可。</span><br><span class="line">例如新写一篇 <span class="selector-tag">Markdown</span> 博文，其 <span class="selector-tag">Markdown</span> 文本内容如下：</span><br><span class="line"><span class="selector-attr">[TOC]</span></span><br><span class="line">## 我是标题一 </span><br><span class="line">这是标题一下的正文 </span><br><span class="line">## 我是标题二 </span><br><span class="line">这是标题二下的正文 </span><br><span class="line">### 我是标题二下的子标题 </span><br><span class="line">这是标题二下的子标题的正文 </span><br><span class="line">## 我是标题三 </span><br><span class="line">这是标题三下的正文</span><br><span class="line">在<span class="selector-attr">[TOC]</span>标记出现的地方就会出现文档的目录。</span><br></pre></td></tr></table></figure><h4 id="3-2-在页面的任何地方插入目录"><a href="#3-2-在页面的任何地方插入目录" class="headerlink" title="3.2 在页面的任何地方插入目录"></a>3.2 在页面的任何地方插入目录</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">上述方式的一个局限局限性就是只能通过 [TOC] 标记在文章内容中插入目录。</span><br><span class="line">加入了markdown的toc扩展之后，实例化后的markdown对象调用convert方法将会获得toc属性，代表的是内容的目录。</span><br><span class="line">在PostDetailView中修改get_object方法，如下：</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object</span><span class="params">(self, queryset=None)</span>:</span></span><br><span class="line">        <span class="comment"># 复写get_object方法的目的是因为需要对post的body值进行渲染</span></span><br><span class="line">        post = super(PostDetailView, self).get_object(queryset=<span class="keyword">None</span>)</span><br><span class="line">        md = markdown.Markdown(extensions=[</span><br><span class="line">            <span class="string">'markdown.extensions.extra'</span>,</span><br><span class="line">            <span class="string">'markdown.extensions.codehilite'</span>,</span><br><span class="line">            <span class="string">'markdown.extensions.toc'</span></span><br><span class="line">        ])</span><br><span class="line">        post.content = md.convert(post.content)</span><br><span class="line">        post.toc = md.toc</span><br><span class="line">        <span class="keyword">return</span> post</span><br><span class="line">注意：post本身并没有toc这个属性，我们我们给它动态添加了toc属性，这是python动态语言的特性。</span><br><span class="line">在detail.html中的block toc中添加如下代码：</span><br><span class="line">&#123;% block toc %&#125;</span><br><span class="line">    &lt;div class="widget widget-content"&gt;</span><br><span class="line">        &lt;h3 class="widget-title"&gt;文章目录&lt;/h3&gt;</span><br><span class="line">        &#123;&#123; post.toc |safe &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-美化标题的锚点-URL"><a href="#3-3-美化标题的锚点-URL" class="headerlink" title="3.3 美化标题的锚点 URL"></a>3.3 美化标题的锚点 URL</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">文章内容的标题被设置了锚点，点击目录中的某个标题，页面就会跳到该文章内容中标题所在的位置。</span><br><span class="line">这时候浏览器的 URL 显示的值可能不太美观，比如像下面的样子：</span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/post/<span class="number">10</span>/<span class="comment">#_4</span></span><br><span class="line"><span class="comment">#_4 就是锚点。</span></span><br><span class="line">Markdown 在设置锚点时利用的是标题的值.由于通常我们的标题都是中文，Markdown 没法处理。所以它就忽略的标题的值，而是简单地在后面加了个 _1 这样的锚点值。</span><br><span class="line">django.utils.text 中的 slugify 方法来处理标题的中文问题。</span><br><span class="line"><span class="keyword">from</span> django.utils.text <span class="keyword">import</span> slugify</span><br><span class="line"><span class="keyword">from</span> markdown.extensions.toc <span class="keyword">import</span> TocExtension</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_object</span><span class="params">(self, queryset=None)</span>:</span></span><br><span class="line">        post = super(PostDetailView, self).get_object(queryset=<span class="keyword">None</span>)</span><br><span class="line">        md = markdown.Markdown(extensions=[</span><br><span class="line">            <span class="string">'markdown.extensions.extra'</span>,</span><br><span class="line">            <span class="string">'markdown.extensions.codehilite'</span>,</span><br><span class="line">            TocExtension(slugify=slugify),</span><br><span class="line">        ])</span><br><span class="line">        post.body = md.convert(post.body)</span><br><span class="line">        post.toc = md.toc</span><br><span class="line">        <span class="keyword">return</span> post</span><br></pre></td></tr></table></figure><h3 id="4-简单全文搜索"><a href="#4-简单全文搜索" class="headerlink" title="4. 简单全文搜索"></a>4. 简单全文搜索</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">搜索是一个复杂的功能，但对于一些简单的搜索任务，我们可以使用 Django Model 层提供的一些内置方法来完成。现在我们来为我们的博客提供一个简单的搜索功能。</span><br></pre></td></tr></table></figure><h4 id="4-0-需求分析"><a href="#4-0-需求分析" class="headerlink" title="4.0 需求分析"></a>4.0 需求分析</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们希望用户在搜索框中输入关键词后，能够在标题和正文中查找包含关键词的文章。整个搜索过程如下：</span><br><span class="line">1. 用户在搜索框中输入搜索关键词，假设为 “django”，然后用户点击了搜索按钮提交其输入的结果到服务器。</span><br><span class="line">2. 服务器接收到用户输入的搜索关键词 “django” 后去数据库查找文章标题和正文中含有该关键词的全部文章。</span><br><span class="line">3. 服务器将查询结果返回给用户。</span><br><span class="line">我们来实现这个过程。</span><br></pre></td></tr></table></figure><h4 id="4-1-将关键词提交给服务器"><a href="#4-1-将关键词提交给服务器" class="headerlink" title="4.1 将关键词提交给服务器"></a>4.1 将关键词提交给服务器</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改<span class="selector-tag">base</span><span class="selector-class">.html</span>中导航条的搜索表单的<span class="selector-tag">action</span>即可。将用户输入的关键字提交到特定的<span class="selector-tag">url</span>。</span><br><span class="line">&lt;form role="search" method="get" id="searchform" action="&#123;% url 'blog:search' %&#125;"&gt;</span><br><span class="line">        &lt;input type="search" name="q" placeholder="搜索" required&gt;</span><br><span class="line">        &lt;button type="submit"&gt;&lt;span class="ion-ios-search-strong"&gt;&lt;/span&gt;&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="4-2-查找含有搜索关键词的文章"><a href="#4-2-查找含有搜索关键词的文章" class="headerlink" title="4.2 查找含有搜索关键词的文章"></a>4.2 查找含有搜索关键词的文章</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">搜索的功能将由 <span class="selector-tag">search</span> 视图函数提供：</span><br><span class="line"><span class="selector-tag">def</span> <span class="selector-tag">search</span>(<span class="selector-tag">request</span>):</span><br><span class="line">    q = request.GET.get('q')</span><br><span class="line">    error_msg = ''</span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">if</span> <span class="selector-tag">not</span> <span class="selector-tag">q</span>:</span><br><span class="line">        error_msg = '请输入关键字'</span><br><span class="line">        return render(request, 'blog/index.html', &#123;'error_msg': error_msg&#125;)</span><br><span class="line">    post_list = Post.objects.filter(Q(title__icontains=q)|Q(body__icontains=q))</span><br><span class="line">    return render(request,'blog/index.html',&#123;'error_msg':error_msg,</span><br><span class="line">                                             'post_list':post_list&#125;)</span><br><span class="line">使用<span class="selector-tag">Q</span>对象来进行或查找。</span><br></pre></td></tr></table></figure><h4 id="4-3-渲染搜索结果"><a href="#4-3-渲染搜索结果" class="headerlink" title="4.3 渲染搜索结果"></a>4.3 渲染搜索结果</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我们复用了 <span class="selector-tag">index</span><span class="selector-class">.html</span> 模板，唯一需要修改的地方就是当有错误信息时，<span class="selector-tag">index</span><span class="selector-class">.html</span> 应该显示错误信息。只需要在文章列表前加个 <span class="selector-tag">error_msg</span> 模板变量即可：</span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    &#123;% if error_msg %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123; error_msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;%endblock%&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-绑定-URL"><a href="#4-4-绑定-URL" class="headerlink" title="4.4 绑定 URL"></a>4.4 绑定 URL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有了视图函数后记得把视图函数映射到相应的URL，如下：</span><br><span class="line">url(r&apos;^search/$&apos;, views.search, name=&apos;search&apos;)</span><br></pre></td></tr></table></figure><h3 id="4-Django-Haystack-全文检索与关键词高亮"><a href="#4-Django-Haystack-全文检索与关键词高亮" class="headerlink" title="4. Django Haystack 全文检索与关键词高亮"></a>4. Django Haystack 全文检索与关键词高亮</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们已经实现的搜索功能实在过于简单，没有多大的实用性。对于一个搜索引擎来说，至少应该能够根据用户的搜索关键词对搜索结果进行排序以及高亮关键字。</span><br></pre></td></tr></table></figure><h4 id="4-0-Django-Haystack-简介"><a href="#4-0-Django-Haystack-简介" class="headerlink" title="4.0 Django Haystack 简介"></a>4.0 Django Haystack 简介</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">django-haystack</span> 是一个专门提供搜索功能的 <span class="selector-tag">django</span> 第三方应用，</span><br><span class="line">它支持 <span class="selector-tag">Solr</span>、<span class="selector-tag">Elasticsearch</span>、<span class="selector-tag">Whoosh</span>、<span class="selector-tag">Xapian</span> 等多种搜索引擎</span><br><span class="line">配合著名的中文自然语言处理库 <span class="selector-tag">jieba</span> 分词，</span><br><span class="line">就可以为我们的博客提供一个效果不错的博客文章搜索系统。</span><br></pre></td></tr></table></figure><h4 id="4-1-安装必要依赖"><a href="#4-1-安装必要依赖" class="headerlink" title="4.1 安装必要依赖"></a>4.1 安装必要依赖</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">激活虚拟环境执行:</span><br><span class="line">pip install whoosh django-haystack jieba -i https://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure><h4 id="4-2-配置-Haystack"><a href="#4-2-配置-Haystack" class="headerlink" title="4.2 配置 Haystack"></a>4.2 配置 Haystack</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">首先是把 <span class="selector-tag">django</span> <span class="selector-tag">haystack</span> 加入到 <span class="selector-tag">INSTALLED_APPS</span> 选项里.</span><br><span class="line">然后加入如下配置项：</span><br><span class="line">HAYSTACK_CONNECTIONS = &#123;</span><br><span class="line">    'default':&#123;</span><br><span class="line">        'ENGINE':'blog.whoosh_cn_backend.WhooshEngine',</span><br><span class="line">        'PATH':os.path.join(BASE_DIR,'whoosh_index'),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">HAYSTACK_SEARCH_RESULTS_PER_PAGE = 10</span><br><span class="line">HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'</span><br><span class="line">参数说明：</span><br><span class="line"><span class="selector-tag">HAYSTACK_CONNECTIONS</span> 的 <span class="selector-tag">ENGINE</span> 指定了 <span class="selector-tag">django</span> <span class="selector-tag">haystack</span> 使用的搜索引擎。</span><br><span class="line"><span class="selector-tag">PATH</span> 指定了索引文件（搜索引擎需要建立索引文件）需要存放的位置。</span><br><span class="line"><span class="selector-tag">HAYSTACK_SEARCH_RESULTS_PER_PAGE</span> 指定如何对搜索结果分页，这里设置为每 10 项结果为一页。</span><br><span class="line"><span class="selector-tag">HAYSTACK_SIGNAL_PROCESSOR</span> 指定什么时候更新索引，这里我们使用 <span class="selector-tag">haystack</span><span class="selector-class">.signals</span><span class="selector-class">.RealtimeSignalProcessor</span>，作用是每当有文章更新时就更新索引。由于博客文章更新不会太频繁，因此实时更新没有问题。</span><br></pre></td></tr></table></figure><h4 id="4-3-处理数据"><a href="#4-3-处理数据" class="headerlink" title="4.3 处理数据"></a>4.3 处理数据</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">接下来就要告诉 <span class="selector-tag">django</span> <span class="selector-tag">haystack</span> 使用哪些数据建立索引以及如何存放索引。</span><br><span class="line">如果要对 <span class="selector-tag">blog</span> 应用下的数据进行全文检索，做法是在 <span class="selector-tag">blog</span> 应用下建立一个<span class="selector-tag">search_indexes</span><span class="selector-class">.py</span> 文件，写上如下代码：</span><br><span class="line"><span class="selector-tag">from</span> <span class="selector-tag">haystack</span> <span class="selector-tag">import</span> <span class="selector-tag">indexes</span></span><br><span class="line"><span class="selector-tag">from</span> <span class="selector-class">.models</span> <span class="selector-tag">import</span> <span class="selector-tag">Post</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">class</span> <span class="selector-tag">PostIndex</span>(<span class="selector-tag">indexes</span><span class="selector-class">.SearchIndex</span>, <span class="selector-tag">indexes</span><span class="selector-class">.Indexable</span>):</span><br><span class="line">    text = indexes.CharField(document=True, use_template=True)</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">def</span> <span class="selector-tag">get_model</span>(<span class="selector-tag">self</span>):</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">Post</span></span><br><span class="line"></span><br><span class="line">    def index_queryset(self, using=None):</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">self</span><span class="selector-class">.get_model</span>()<span class="selector-class">.objects</span><span class="selector-class">.all</span>()</span><br><span class="line">之所以写上述代码是因为，<span class="selector-tag">haystack</span>规定：要想对某个 <span class="selector-tag">app</span> 下的数据进行全文检索，</span><br><span class="line">就要在该 <span class="selector-tag">app</span> 下创建一个 <span class="selector-tag">search_indexes</span><span class="selector-class">.py</span> 文件，</span><br><span class="line">然后创建一个 <span class="selector-tag">XXIndex</span> 类（<span class="selector-tag">XX</span> 为含有被检索数据的模型，</span><br><span class="line">如这里的 <span class="selector-tag">Post</span>），并且继承 <span class="selector-tag">SearchIndex</span>（注意不是<span class="selector-tag">SearchField</span>) 和 <span class="selector-tag">Indexable</span>。</span><br><span class="line">上述代码创建了一个针对<span class="selector-tag">Post</span>的索引。为什么创建索引，是因为创建索引可以加快搜索速度减小服务器压力。有点类似数据库索引。</span><br><span class="line">每个索引里面必须有且只能有一个字段为 document=True，</span><br><span class="line">这代表 <span class="selector-tag">django</span> <span class="selector-tag">haystack</span> 和搜索引擎将使用此字段的内容</span><br><span class="line">作为索引进行检索(<span class="selector-tag">primary</span> <span class="selector-tag">field</span>)。</span><br><span class="line">如果使用一个字段设置了document=True，则一般约定此字段名为text</span><br><span class="line">这是在 <span class="selector-tag">SearchIndex</span> 类里面一贯的命名，以防止后台混乱。</span><br><span class="line">当然名字你也可以随便改，不过不建议改。就和<span class="selector-tag">request</span>和<span class="selector-tag">response</span>命名一样。</span><br><span class="line">haystack 提供了use_template=True 在 text 字段中，这样就允许我们使用数据模板去建立搜索引擎索引的文件.</span><br><span class="line">模板路径为：templates/search/indexes/blog/post_text.txt</span><br><span class="line">其内容为：</span><br><span class="line">&#123;&#123; object.title &#125;&#125; </span><br><span class="line">&#123;&#123; object.content &#125;&#125;</span><br><span class="line">这个数据模板的作用是对 <span class="selector-tag">Post</span><span class="selector-class">.title</span>、<span class="selector-tag">Post</span><span class="selector-class">.content</span> </span><br><span class="line">这两个字段建立索引，当检索的时候会对这两个字段做</span><br><span class="line">全文检索匹配，然后将匹配的结果排序后作为搜索结果返回。</span><br></pre></td></tr></table></figure><h4 id="4-4-配置-URL"><a href="#4-4-配置-URL" class="headerlink" title="4.4 配置 URL"></a>4.4 配置 URL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">搜索的视图函数和 URL 模式 django haystack 都已经帮我们写好了，直接include(haystack.urls)即可。</span><br><span class="line">同时删掉我们之前配的url，以防止冲突。</span><br></pre></td></tr></table></figure><h4 id="4-5-修改搜索表单"><a href="#4-5-修改搜索表单" class="headerlink" title="4.5 修改搜索表单"></a>4.5 修改搜索表单</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改一下搜索表单，让它提交数据到 <span class="selector-tag">django</span> <span class="selector-tag">haystack</span> 搜索视图对应的 <span class="selector-tag">URL</span>：</span><br><span class="line">&lt;form role="search" method="get" id="searchform" action="&#123;% url 'haystack_search' %&#125;"&gt;</span><br></pre></td></tr></table></figure><h4 id="4-6-创建搜索结果页面"><a href="#4-6-创建搜索结果页面" class="headerlink" title="4.6 创建搜索结果页面"></a>4.6 创建搜索结果页面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">默认情况下，haystack_search 视图函数会将搜索结果传递给模板 search/search.html</span><br><span class="line">因此创建这个模板文件，对搜索结果进行渲染。</span><br><span class="line"><span class="selector-tag">search</span><span class="selector-class">.html</span>模板详情见项目目录。</span><br><span class="line">这个模板基本和 blog/index.html 一样，只是由于 haystack 对搜索结果做了分页，传给模板的变量是一个 page 对象，所以我们从 page 中取出这一页对应的搜索结果，然后对其循环显示，即 &#123;% for result in page.object_list %&#125;。</span><br></pre></td></tr></table></figure><h4 id="4-7-高亮关键词"><a href="#4-7-高亮关键词" class="headerlink" title="4.7 高亮关键词"></a>4.7 高亮关键词</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">haystack 中实现关键词高亮效果非常简单，只需要使用 &#123;% highlight %&#125; 模板标签即可。</span><br><span class="line">&#123;% highlight result.content with query %&#125;</span><br><span class="line">高亮处理的原理其实就是给文本中的关键字包上一个 <span class="selector-tag">span</span> 标签并且为其添加 <span class="selector-tag">highlighted</span> 样式。</span><br><span class="line">我们还要给 <span class="selector-tag">highlighted</span> 类指定样式，在 <span class="selector-tag">base</span><span class="selector-class">.html</span> 中添加即可：</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt; </span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.highlighted</span> &#123; <span class="attribute">color</span>: red; &#125; </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="4-8-修改搜索引擎为中文分词"><a href="#4-8-修改搜索引擎为中文分词" class="headerlink" title="4.8 修改搜索引擎为中文分词"></a>4.8 修改搜索引擎为中文分词</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Whoosh 作为搜索引擎，但在 django haystack 中为 Whoosh 指定的分词器是英文分词器，可能会使得搜索结果不理想。</span><br><span class="line">我们把这个分词器替换成 jieba 中文分词器。</span><br><span class="line">从安装的site-packages目录的 haystack 目录中把 haystack/backends/whoosh_backend.py 文件拷贝到 blog/ 下，重命名为 whoosh_cn_backend.py</span><br><span class="line">然后找到如下一行代码：</span><br><span class="line">【blog/ whoosh_cn_backend.py】 </span><br><span class="line">schema_fields[field_class.index_fieldname] = TEXT(stored=True, analyzer=StemmingAnalyzer(), field_boost=field_class.boost, sortable=True)</span><br><span class="line">将其中的 analyzer 改为 ChineseAnalyzer，当然为了使用它，你需要在文件顶部引入：from jieba.analyse import ChineseAnalyzer。</span><br></pre></td></tr></table></figure><h4 id="4-9-建立索引文件"><a href="#4-9-建立索引文件" class="headerlink" title="4.9 建立索引文件"></a>4.9 建立索引文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最后一步就是建立索引文件了，运行命令 python manage.py rebuild_index 就可以建立索引文件了。</span><br></pre></td></tr></table></figure><h3 id="5-Django-Pagination-简单分页"><a href="#5-Django-Pagination-简单分页" class="headerlink" title="5. Django Pagination 简单分页"></a>5. Django Pagination 简单分页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用Django 内置的 Pagination 能够帮助我们实现简单的分页功能。</span><br></pre></td></tr></table></figure><h4 id="5-1-Paginator-类的常用方法"><a href="#5-1-Paginator-类的常用方法" class="headerlink" title="5.1 Paginator 类的常用方法"></a>5.1 Paginator 类的常用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对 item_list 进行分页，每页包含 2 个数据。 </span></span><br><span class="line">&gt;&gt;&gt; item_list = [<span class="string">'john'</span>, <span class="string">'paul'</span>, <span class="string">'george'</span>, <span class="string">'ringo'</span>] </span><br><span class="line">&gt;&gt;&gt;&gt; p = Paginator(item_list, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 取第 2 页的数据 </span></span><br><span class="line">&gt;&gt;&gt; page2 = p.page(<span class="number">2</span>) </span><br><span class="line">&gt;&gt;&gt; page2.object_list </span><br><span class="line">[<span class="string">'george'</span>, <span class="string">'ringo'</span>]</span><br><span class="line"><span class="comment">#查询特定页的当前页码数</span></span><br><span class="line">&gt;&gt;&gt; page2.number</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="comment">#查看分页后的总页数</span></span><br><span class="line">&gt;&gt;&gt; p.num_pages</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="comment">#查看某一页是否还有上一页</span></span><br><span class="line">&gt;&gt;&gt; page2.has_previous()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="comment"># 查询第二页上一页的页码</span></span><br><span class="line">&gt;&gt;&gt; page2.previous_page_number()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment">#查询第二页是否还有下一页</span></span><br><span class="line">&gt;&gt;&gt; page2.has_next()</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="comment"># 查询第二页下一页的页码</span></span><br><span class="line">&gt;&gt;&gt; page2.next_page_number()</span><br><span class="line">django.core.paginator.EmptyPage: That page contains no results</span><br></pre></td></tr></table></figure><h4 id="5-2-用-Paginator-给文章列表分页"><a href="#5-2-用-Paginator-给文章列表分页" class="headerlink" title="5.2 用 Paginator 给文章列表分页"></a>5.2 用 Paginator 给文章列表分页</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">视图函数中使用分页器的一般套路：</span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listing</span><span class="params">(request)</span>:</span></span><br><span class="line">    contact_list = Contacts.objects.all()</span><br><span class="line"><span class="comment">#把要分页的对象列表，和每页要显示多少条数据传给Paginator，生成一个分页器的实例对象 。</span></span><br><span class="line">    paginator = Paginator(contact_list, <span class="number">25</span>) <span class="comment"># Show 25 contacts per page</span></span><br><span class="line"><span class="comment">#page对象代表被分出来的每一页。通过页码来请求获得页面。</span></span><br><span class="line">    page = request.GET.get(<span class="string">'page'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        contacts = paginator.page(page)</span><br><span class="line">    <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">        <span class="comment"># 如果请求的号码不是整数，那么返回第一页。</span></span><br><span class="line">        contacts = paginator.page(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> EmptyPage:</span><br><span class="line">        <span class="comment"># 如果请求的页码超过了最大页数，那么返回最后一页。</span></span><br><span class="line">        contacts = paginator.page(paginator.num_pages)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'list.html'</span>, &#123;<span class="string">'contacts'</span>: contacts&#125;)</span><br><span class="line">在我们的类视图ListView中已经帮我们写好了上述的分页逻辑，</span><br><span class="line">我们只需通过指定 paginate_by 属性来开启分页功能即可。即在代码中：</span><br><span class="line"><span class="comment"># 指定 paginate_by 属性后开启分页功能，其值代表每一页包含多少篇文章 </span></span><br><span class="line">paginate_by = <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="5-3-在模板中设置分页导航"><a href="#5-3-在模板中设置分页导航" class="headerlink" title="5.3 在模板中设置分页导航"></a>5.3 在模板中设置分页导航</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ListView 传递了以下和分页有关的模板变量供我们在模板中使用：</span><br><span class="line">paginator ，即 Paginator 的实例。</span><br><span class="line">page_obj ，当前请求页面分页对象。</span><br><span class="line">is_paginated，是否已分页。只有当分页后页面超过两页时才算已分页。</span><br><span class="line">object_list，请求页面的对象列表，和 post_list 等价。所以在模板中循环文章列表时可以选 post_list ，也可以选 object_list。</span><br><span class="line">在模板中使用：</span><br><span class="line">&#123;% <span class="keyword">if</span> is_paginated %&#125;</span><br><span class="line">        &lt;div class="pagination-simple"&gt;</span><br><span class="line">            &#123;% <span class="keyword">if</span> page_obj.has_previous %&#125;</span><br><span class="line">                &lt;a href="?page=&#123;&#123; page_obj.previous_page_number &#125;&#125;"&gt;上一页&lt;/a&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">            &lt;span class="current"&gt;第&#123;&#123; page_obj.number &#125;&#125;页/共&#123;&#123; paginator.num_pages &#125;&#125;页&lt;/span&gt;</span><br><span class="line">            &#123;% <span class="keyword">if</span> page_obj.has_next %&#125;</span><br><span class="line">                &lt;a href="?page=&#123;&#123; page_obj.next_page_number &#125;&#125;"&gt;下一页&lt;/a&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">     &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-在模板中设置分页导航"><a href="#5-4-在模板中设置分页导航" class="headerlink" title="5.4 在模板中设置分页导航"></a>5.4 在模板中设置分页导航</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">需求：设置类似百度的的分页。</span><br><span class="line">核心其实只需要把页码列表找出来，前台循环显示页码数即可。</span><br><span class="line">单独定义一个处理分页的函数，放到utils中，作为一个工具函数。</span><br><span class="line">通过分析分页的情况可以分为<span class="number">1</span>种特殊情况，<span class="number">3</span>中普通情况来处理。</span><br><span class="line">特殊情况为总页数小于每个页面最大显示的页码数。</span><br><span class="line">普通情况为当前页在头部，中部和尾部的情况。</span><br><span class="line">utils.py</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">custompaginator</span><span class="params">(num_pages, current_page, max_page)</span>:</span></span><br><span class="line">        middle = math.ceil(max_page / <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 特殊情况，最大页数小于最大显示的页数</span></span><br><span class="line">        <span class="keyword">if</span> num_pages &lt; max_page:</span><br><span class="line">            start = <span class="number">1</span></span><br><span class="line">            end = num_pages</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 当前页小于等于middle 时。</span></span><br><span class="line">            <span class="keyword">if</span> current_page &lt;= middle :</span><br><span class="line">                start = <span class="number">1</span></span><br><span class="line">                end = max_page</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 中间情况</span></span><br><span class="line">                start = current_page - middle</span><br><span class="line">                end = current_page + middle - <span class="number">1</span></span><br><span class="line">                <span class="comment"># 当前页在尾巴的情况</span></span><br><span class="line">                <span class="keyword">if</span> current_page + middle &gt; num_pages:</span><br><span class="line">                    start = num_pages - max_page + <span class="number">1</span></span><br><span class="line">                    end = num_pages</span><br><span class="line">        <span class="keyword">return</span> start,end</span><br><span class="line">views.py</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(ListView)</span>:</span></span><br><span class="line">    model = Post</span><br><span class="line">    template_name = <span class="string">'blog/index.html'</span></span><br><span class="line">    context_object_name = <span class="string">'post_list'</span></span><br><span class="line">    paginate_by = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 复写该方法以便我们能够插入自定义的模板变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 先调用父类的方法，获取默认的context</span></span><br><span class="line">        context = super().get_context_data(**kwargs)</span><br><span class="line">        paginator = context.get(<span class="string">'paginator'</span>)</span><br><span class="line">        page = context.get(<span class="string">'page_obj'</span>)</span><br><span class="line">        start, end = utils.custompaginator(paginator.num_pages, page.number, <span class="number">4</span>)</span><br><span class="line">        context.update(&#123;</span><br><span class="line">            <span class="string">'page_range'</span>: range(start, end + <span class="number">1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> context</span><br><span class="line"> 前端分页代码：</span><br><span class="line">&#123;% <span class="keyword">if</span> is_paginated %&#125;</span><br><span class="line">        &lt;div class="pagination-simple"&gt;</span><br><span class="line">            &#123;% <span class="keyword">if</span> page_obj.has_previous %&#125;</span><br><span class="line">                &lt;a href="?page=&#123;&#123; page_obj.previous_page_number &#125;&#125;"&gt;上一页&lt;/a&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">            &#123;% <span class="keyword">for</span> i <span class="keyword">in</span> page_range %&#125;</span><br><span class="line">                &#123;% <span class="keyword">if</span> page_obj.number == i %&#125;</span><br><span class="line">                    &lt;a style="color:red;font-size:26px;padding: 5px" href="?page=&#123;&#123; i &#125;&#125;"&gt;&#123;&#123; i &#125;&#125;&lt;/a&gt;</span><br><span class="line">                &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">                    &lt;a style="padding: 5px" href="?page=&#123;&#123; i &#125;&#125;"&gt;&#123;&#123; i &#125;&#125;&lt;/a&gt;</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">            &#123;% <span class="keyword">if</span> page_obj.has_next %&#125;</span><br><span class="line">                &lt;a href="?page=&#123;&#123; page_obj.next_page_number &#125;&#125;"&gt;下一页&lt;/a&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>​        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-博客项目（3）&quot;&gt;&lt;a href=&quot;#Django-博客项目（3）&quot; class=&quot;headerlink&quot; title=&quot;Django 博客项目（3）&quot;&gt;&lt;/a&gt;Django 博客项目（3）&lt;/h1&gt;&lt;h3 id=&quot;1-标签云&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="Django" scheme="https://lidx.club/categories/Django/"/>
    
    
      <category term="博客" scheme="https://lidx.club/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令100条</title>
    <link href="https://lidx.club/2017/05/21/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4100%E6%9D%A1/"/>
    <id>https://lidx.club/2017/05/21/Linux常用命令100条/</id>
    <published>2017-05-21T07:34:26.000Z</published>
    <updated>2018-07-22T08:25:29.895Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zcool.cn/community/01b8c1599e7659a801201794090bfb.jpg@1280w_1l_2o_100sh.webp" width="688" height="400" alt="git" align="center"></p><a id="more"></a><p><strong>@日常命令</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">cd .. // 返回上一级目录</span><br><span class="line">cd - // 返回上一次目录</span><br><span class="line">cd或cd ~ // 返回家目录</span><br><span class="line">cd / // 进入根目录</span><br><span class="line"></span><br><span class="line">pwd // 显示当前目录</span><br><span class="line">ls // 显示当前目录文件</span><br><span class="line">ls localrepo/ // 显示指定目录的文件</span><br><span class="line">ll // 查看目录文件的的详细信息</span><br><span class="line">la // 查看全部包括隐藏的目录文件</span><br><span class="line">tree // 查看当前目录文件树</span><br><span class="line">tree mydir // 查看指定目录的文件树</span><br><span class="line">touch hello.py // 创建空文件</span><br><span class="line"></span><br><span class="line">mkdir mydir // 创建文件夹</span><br><span class="line">mkdir -p a/b/c // 创建层级目录</span><br><span class="line">mkdir a/&#123;b,c&#125;/&#123;d,e&#125; // 同一级创建多个文件夹</span><br><span class="line"></span><br><span class="line">cp hello.py ~/hello2.py // 拷贝文件</span><br><span class="line">cp hello.py -i hello2.py // 拷贝文件，如果有同名文件询问是否覆盖</span><br><span class="line">cp hello.py -f hello2.py // 拷贝文件，如果有同名文件强制覆盖</span><br><span class="line">cp hello.py -n hello2.py // 拷贝文件，如果有同名文件不覆盖</span><br><span class="line"></span><br><span class="line">mv hello2.py hellocp.py // 重命名文件</span><br><span class="line">mv hello.py ~/Desktop // 移动文件</span><br><span class="line">rm hellocp.py // 删除文件</span><br><span class="line">rm -rf localrepo/ // 递归删除目录</span><br><span class="line"></span><br><span class="line">find ~/Desktop/ -name '*.py' // 在指定目录中查找文件</span><br><span class="line"></span><br><span class="line">ln -s /usr/bin/python ./mypylink // 创建可执行程序的软链接</span><br><span class="line">alias rrm='rm -rf' // 给命令起别名，需要root权限</span><br><span class="line">history // 查看命令历史</span><br><span class="line">clear // 清屏</span><br></pre></td></tr></table></figure><p><strong>@命令速查</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">man rm // 查看rm命令的手册解释</span><br><span class="line">rm --help // 查看rm命令帮助</span><br><span class="line">info rm // 查看rm命令详细信息</span><br><span class="line">whereis python // 查找可执行程序</span><br><span class="line">which python // 查看当前使用的是哪个目录中的python</span><br></pre></td></tr></table></figure><p><strong>@更多查找</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">find ~/ -name '*.py' -exec rm &#123;&#125; \;    查找家目录下所有的py文件并删除，&#123;&#125;与exec结合匹配所有文件</span><br><span class="line">find ~/ -name '*.py' -exec chown wife &#123;&#125; \;        查找家目录下所有py文件并将所有权转让给wife用户</span><br><span class="line">find ~/ -name '*.py' -exec cat &#123;&#125; \;&gt; record.txt   查找文件并将全部内容拼接并写入文件中</span><br><span class="line">find ~/ -name '*.py' -exec cp &#123;&#125; mydir \;      查找文件并拷贝到指定目录</span><br><span class="line"></span><br><span class="line">grep 'def.*' a.py   在a.py中查找指定内容</span><br><span class="line">grep 'def.*' a.py b.py c.py 在多个文件中寻找指定内容</span><br><span class="line">grep -v 'def.*' a.py    在a.py中查找指定内容以外的内容</span><br><span class="line"><span class="selector-tag">grep</span> <span class="selector-tag">-i</span> "<span class="selector-tag">HELLO</span>" <span class="selector-tag">a</span><span class="selector-class">.py</span>    在<span class="selector-tag">a</span><span class="selector-class">.py</span>中查找指定内容并忽略大小写</span><br><span class="line"><span class="selector-tag">grep</span> <span class="selector-tag">-E</span> "<span class="selector-attr">[1-9]</span>+" <span class="selector-tag">a</span><span class="selector-class">.py</span>   在<span class="selector-tag">a</span><span class="selector-class">.py</span>中查找正则表达式匹配的内容（匹配1到多个数字）</span><br><span class="line"><span class="selector-tag">grep</span> <span class="selector-tag">-F</span> "<span class="selector-attr">[1-9]</span>+" <span class="selector-tag">a</span><span class="selector-class">.py</span>   在<span class="selector-tag">a</span><span class="selector-class">.py</span>中查找纯文本内容（严格匹配字符串"<span class="selector-attr">[1-9]</span>+"）</span><br><span class="line"><span class="selector-tag">grep</span> <span class="selector-tag">-e</span> "<span class="selector-tag">def</span>.*" <span class="selector-tag">-e</span> "<span class="selector-tag">class</span>.*" <span class="selector-tag">a</span><span class="selector-class">.py</span>   在<span class="selector-tag">a</span><span class="selector-class">.py</span>中查找多个内容</span><br><span class="line">grep "text" ./ -r -n    在当前目录下递归查找内容</span><br></pre></td></tr></table></figure><p><strong>@系统管理</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">poweroff</span>    关机</span><br><span class="line"><span class="selector-tag">reboot</span>  重启</span><br><span class="line"><span class="selector-tag">shutdown</span> <span class="selector-tag">-h</span> 12<span class="selector-pseudo">:00</span>   定时关机</span><br><span class="line"><span class="selector-tag">shutdown</span> <span class="selector-tag">-h</span> <span class="selector-tag">now</span>     立刻关机</span><br><span class="line"><span class="selector-tag">shutdown</span> <span class="selector-tag">-c</span>         取消定时关机</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">top</span>                 显示所有系统任务</span><br><span class="line"><span class="selector-tag">free</span> <span class="selector-tag">-m</span>             查看内存占用，以<span class="selector-tag">M</span>为单位</span><br><span class="line"><span class="selector-tag">uname</span> <span class="selector-tag">-a</span>            打印操作系统信息</span><br><span class="line"><span class="selector-tag">uptime</span> <span class="selector-tag">-p</span>           查看系统运行时间</span><br><span class="line">echo $PATH         查看环境变量</span><br><span class="line">export PATH=$PATH:/home/sirouyang/Desktop/ 追加环境变量</span><br><span class="line">lsof | head -n 10   查看进程打开的文件（一切皆文件，数据文件、网络连接、硬件设备）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">time</span> <span class="selector-tag">lsof</span>       统计命令执行时间</span><br><span class="line">cal/date            查看日历和时间</span><br><span class="line"><span class="selector-tag">date</span> +%<span class="selector-tag">y-</span>%<span class="selector-tag">m-</span>%<span class="selector-tag">d-</span>%<span class="selector-tag">H-</span>%<span class="selector-tag">M-</span>%<span class="selector-tag">S</span> 格式化地查看时间</span><br><span class="line"></span><br><span class="line"># 0<span class="selector-tag">-6</span><span class="selector-pseudo">:0</span>停机<span class="selector-tag">-1</span>单用户安全模式<span class="selector-tag">-2</span>多用户安全模式<span class="selector-tag">-3</span>多用户网络模式<span class="selector-tag">-4</span>系统保留级别<span class="selector-tag">-5</span>图形界面<span class="selector-tag">-6</span>重启</span><br><span class="line"><span class="selector-tag">runlevel</span>        显示当前运行级别</span><br><span class="line"><span class="selector-tag">init</span> 6          切换运行级别</span><br></pre></td></tr></table></figure><p><strong>@软件安装</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update // 更新软件源</span><br><span class="line">sudo apt install python-pip //安装pip</span><br><span class="line"></span><br><span class="line">./configure 源码包中执行配置</span><br><span class="line"><span class="selector-tag">make</span> <span class="selector-tag">clean</span>  清除一些编译的垃圾</span><br><span class="line"><span class="selector-tag">make</span>        执行编译</span><br><span class="line"><span class="selector-tag">make</span> <span class="selector-tag">install</span>    安装</span><br><span class="line"><span class="selector-tag">make</span> <span class="selector-tag">uninstall</span>  卸载</span><br></pre></td></tr></table></figure><p><strong>@文本命令</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat hello.py // 查看文件</span><br><span class="line">gedit hello.py // 使用gedit查看文件</span><br><span class="line">head -n 10 hello.py // 查看前10行</span><br><span class="line">tail -n 10 hello.py // 查看后10行</span><br><span class="line">less hello.py // 一次查看少量内容，PageUp和PageDown键翻页</span><br><span class="line">vim hello.py // 使用vim打开文件</span><br></pre></td></tr></table></figure><p><strong>@管道与重定向</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sort hello.py | uniq -c // 排序后统计次数</span><br><span class="line">sort hello.py | uniq -d // 排序后找出重复的行</span><br><span class="line">cat proc/cpuinfo | grep -c processor // 显示CPU核心数</span><br><span class="line">echo 'newline' &gt; hello.py // 将结果写入文件（覆盖）</span><br><span class="line">echo 'newline' &gt;&gt; hello.py // 将结果追加到文件</span><br></pre></td></tr></table></figure><p><strong>@压缩和解压</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf /home/abc.tar /home/abc/*    只打包，不压缩（c=创建压缩包,v=打印信息,f=指定文件名）</span><br><span class="line">tar -zcvf /home/abc.tar.gz /home/abc/*    打包，并用gzip压缩</span><br><span class="line">tar -jcvf /home/abc.tar.bz2 /home/abc/*    打包，并用bzip2压缩</span><br><span class="line"></span><br><span class="line">tar -xvf abc.tar 解压普通tar包(x=解压缩)</span><br><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">abc</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> 解压<span class="selector-tag">gz</span>压缩包</span><br><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-jxvf</span> <span class="selector-tag">abc</span><span class="selector-class">.tar</span><span class="selector-class">.bz2</span> 解压<span class="selector-tag">bz2</span>压缩包</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">zip</span> <span class="selector-tag">xxx</span><span class="selector-class">.zip</span> .<span class="comment">/* 压缩</span></span><br><span class="line"><span class="comment">unzip xxx.zip #解压zip压缩包</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">gzip -rv abc    将abc文件夹下的内容递归压缩打gzip压缩包</span></span><br><span class="line"><span class="comment">gzip -d abc/*   将abc下的所有内容解压缩</span></span><br></pre></td></tr></table></figure><p><strong>@磁盘管理</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">df</span> <span class="selector-tag">-h</span>                   查看磁盘使用情况</span><br><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">du</span> <span class="selector-tag">-h</span> ~           查看用户目录的磁盘使用情况</span><br><span class="line"><span class="selector-tag">du</span> <span class="selector-tag">-sh</span>                  当前目录的总体占用情况</span><br><span class="line"><span class="selector-tag">du</span> <span class="selector-tag">abc</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> <span class="selector-tag">abc</span><span class="selector-class">.tar</span>   查看文件和目录的磁盘占用</span><br><span class="line">dd if=/dev/zero of=temp.txt bs=1K count=1024    备份数据</span><br></pre></td></tr></table></figure><p><strong>@登录日志</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">last</span> 查看用户近期登陆情况</span><br><span class="line"><span class="selector-tag">last</span> <span class="selector-tag">-2</span> 最近登陆的两个用户</span><br><span class="line"><span class="selector-tag">last</span> <span class="selector-tag">-2</span> <span class="selector-tag">root</span> 查看<span class="selector-tag">root</span>用户最近两次登陆情况</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">id</span>  显示用户及其群组信息</span><br><span class="line"><span class="selector-tag">groups</span>  查看当前用户所加入的组</span><br><span class="line"><span class="selector-tag">whoami</span>  显示当前用户名称</span><br></pre></td></tr></table></figure><p><strong>@用户与权限</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">groups // 查看所属的工作组</span><br><span class="line">whoami // 显示当前用户名称</span><br><span class="line"></span><br><span class="line">sudo usradd -m wife // 新建wife用户，-m=自动创建家目录</span><br><span class="line">sudo useradd -d /home/myson -m son //创建son用户，指定其家目录为/home/myson</span><br><span class="line">sudo useradd -g guests -G root,adm -m him //创建him用户，属于group组，其次也属于adm,root组</span><br><span class="line">sudo useradd -G guests,sudo -m -s /bin/bash mywife // 新增一个用户,-m=自动创建家目录,-s指定bash</span><br><span class="line"><span class="selector-tag">userdel</span> <span class="selector-tag">rose</span> 删除<span class="selector-tag">rose</span> 账号</span><br><span class="line">userdel -r rose 删除用户及相关目录下的文件（/etc/passwd, /etc/shadow, /etc/group等）</span><br><span class="line">usermod -s /bin/ksh -d /home/z –g developer him // 修改him用户的shell、家目录、所属组等信息</span><br><span class="line">sudo passwd // 修改自己的密码</span><br><span class="line">sudo passwd mywife // 修改mywife的密码</span><br><span class="line">su - mywife // 切换用户</span><br><span class="line">sudo su // 切换到root用户</span><br><span class="line"></span><br><span class="line">sudo groupadd guests // 添加guests组</span><br><span class="line">sudo groupadd -g 101 group1 //添加组group1，识别号为101</span><br><span class="line">groupdel group1 //删除组</span><br><span class="line">groupmod –g 10000 -n group3 group2 //将组group2的标识号改为10000，组名修改为group3</span><br><span class="line"><span class="selector-tag">gpasswd</span> <span class="selector-tag">-a</span> <span class="selector-tag">u1</span> <span class="selector-tag">g1</span> 将<span class="selector-tag">u1</span> 加入到 <span class="selector-tag">g1</span> 组</span><br><span class="line"><span class="selector-tag">gpasswd</span> <span class="selector-tag">-d</span> <span class="selector-tag">u1</span> <span class="selector-tag">g1</span> 将<span class="selector-tag">u1</span> 退出 <span class="selector-tag">g1</span> 组</span><br><span class="line"><span class="selector-tag">gpasswd</span> <span class="selector-tag">-A</span> <span class="selector-tag">u1</span> <span class="selector-tag">g1</span> 将<span class="selector-tag">g1</span> 组的管理员指派给<span class="selector-tag">u1</span></span><br><span class="line"></span><br><span class="line">chmod 421 hello.py // 设置自己、用户组、其他人的权限分别为只读、只写、只执行</span><br><span class="line">chmod a+r,u+wx,g+x,o-wx hello.py // 详细修改全部用户、拥有者、用户组、其他人的权限</span><br></pre></td></tr></table></figure><p><strong>/etc/passwd文件说明：</strong></p><ul><li>是用户管理工作涉及的最重要的一个文件</li><li>内容包含7个字段，例如 him<img class="github-emoji" title="x" alt="x" src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8" height="20" width="20">200:50:Sam san:/usr/sam:/bin/sh</li><li>含义分别为 用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</li></ul><p><strong>@网络管理</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ifconfig // 查看网卡状态</span><br><span class="line">ping 192.168.59.129 // 检查网络是否连通</span><br><span class="line">wget "http://download.redis.io/releases/redis-4.0.9.tar.gz" // 下载redis</span><br><span class="line"><span class="selector-tag">traceroute</span> <span class="selector-tag">-m</span> 100 <span class="selector-tag">baidu</span><span class="selector-class">.com</span>     追踪路由信息，最大100跳</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">netstat</span> <span class="selector-tag">-at</span>     列出所有<span class="selector-tag">TCP</span>端口</span><br><span class="line"><span class="selector-tag">netstat</span> <span class="selector-tag">-r</span>      显示路由表</span><br><span class="line"><span class="selector-tag">netstat</span> <span class="selector-tag">-i</span>      显示接口列表</span><br><span class="line"><span class="selector-tag">netstat</span> <span class="selector-tag">-tpnl</span>   查看已连接的<span class="selector-tag">TCP</span>端口和程序名</span><br><span class="line">netstat -anp | grep 3306 -c     查看MySQL的连接数</span><br></pre></td></tr></table></figure><p><strong>@远程登录</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">apt-get</span> <span class="selector-tag">install</span> <span class="selector-tag">openssh-server</span> 安装<span class="selector-tag">openssh-server</span></span><br><span class="line">sudo ps -ef | grep ssh 查看SSH服务是否启动</span><br><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">service</span> <span class="selector-tag">ssh</span> <span class="selector-tag">start</span> 如果没有启动则启动<span class="selector-tag">SSH</span>服务</span><br><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">root</span>@<span class="keyword">127</span>.<span class="keyword">0</span>.<span class="keyword">0</span>.<span class="keyword">1</span> 访问远程主机</span><br><span class="line">exit 退出远程访问</span><br><span class="line"></span><br><span class="line">scp -r sirouyang@<span class="number">192.168</span>.<span class="number">158.129</span>:/abc /home/wife/Desktop/       从远程主机拷贝内容到本地</span><br><span class="line">scp -r /abc sirouyang@<span class="number">192.168</span>.<span class="number">158.129</span>:/home/sirouyang/Desktop/  从本地拷贝内容弄到远程主机（对方没有本地的公钥时需要密码认证）</span><br><span class="line"></span><br><span class="line"># ssh公钥交换过程：远程主机持有本地的公钥时，ssh以及scp可以免密执行</span><br><span class="line">ssh-keygen -t rsa   生成ssh秘钥对</span><br><span class="line">scp ~/.ssh/id_rsa.pub sirouyang@<span class="number">192.168</span>.<span class="number">158.129</span>:/home/sirouyang/.ssh/  上传公钥给远程主机</span><br><span class="line">ssh sirouyang@<span class="number">192.168</span>.<span class="number">158.129</span>   ssh登录远程主机</span><br><span class="line">cat Desktop/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys   操作远程主机添加公钥认证（今后远程对本地ssh免密）</span><br><span class="line"></span><br><span class="line">ssh-copy-id sirouyang@<span class="number">192.168</span>.<span class="number">158.128</span>   让远程持有自己的公钥（对方不必添加公钥到authorized_keys）</span><br></pre></td></tr></table></figure><p>如果远程持有自己的公钥后依然无法免密登录，需要修改配置文件，请参考： <a href="https://blog.csdn.net/b_x_p/article/details/78534423" target="_blank" rel="noopener">https://blog.csdn.net/b_x_p/article/details/78534423</a></p><p><strong>@进程管理</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps -ef // 查看所有进程</span><br><span class="line">ps -ef | grep redis // 查找redis进程</span><br><span class="line">kill -9 77157   // 强行杀死指定pid的进程</span><br><span class="line">kill -15 77157  // 终止指定进程</span><br></pre></td></tr></table></figure><p><strong>@服务管理</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#chkconfig</span>服务管理</span><br><span class="line"><span class="selector-tag">apt-get</span> <span class="selector-tag">install</span> <span class="selector-tag">sysv-rc-conf</span>    安装<span class="selector-tag">chkconfig</span>服务</span><br><span class="line">cp /usr/sbin/sysv-rc-conf /usr/sbin/chkconfig   重命名一下可执行程序</span><br><span class="line"><span class="selector-tag">chkconfig</span> <span class="selector-tag">--list</span>            查看所有服务的开机启动状态</span><br><span class="line"><span class="selector-tag">chkconfig</span> <span class="selector-tag">--list</span> <span class="selector-tag">mysqld</span>     查看<span class="selector-tag">mysql</span>的开机启动状态</span><br><span class="line"><span class="selector-tag">chkconfig</span> <span class="selector-tag">mysqld</span> <span class="selector-tag">on</span>         设置<span class="selector-tag">mysql</span>开机启动</span><br><span class="line"><span class="selector-tag">chkconfig</span> <span class="selector-tag">mysqld</span> <span class="selector-tag">off</span>        禁止<span class="selector-tag">mysql</span>开机启动</span><br><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">apt</span> <span class="selector-tag">install</span> <span class="selector-tag">firewalld</span>  安装<span class="selector-tag">firewalld</span></span><br><span class="line"><span class="selector-tag">firewall-cmd</span> <span class="selector-tag">--state</span>        查看防火墙状态</span><br><span class="line"></span><br><span class="line">#原生的<span class="selector-tag">service</span>服务管理</span><br><span class="line"><span class="selector-tag">service</span> <span class="selector-tag">mysql</span> <span class="selector-tag">start</span>         启动<span class="selector-tag">mysql</span></span><br><span class="line"><span class="selector-tag">service</span> <span class="selector-tag">mysql</span> <span class="selector-tag">stop</span>          停止<span class="selector-tag">mysql</span></span><br><span class="line"><span class="selector-tag">service</span> <span class="selector-tag">mysql</span> <span class="selector-tag">restart</span>       重启<span class="selector-tag">mysql</span></span><br><span class="line">/etc/init.d/mysql start     启动mysql</span><br><span class="line">/etc/init.d/mysql stop      停止mysql</span><br><span class="line">/etc/init.d/mysql restart   重启mysql</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#systemctl</span>服务管理（推荐方式）</span><br><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">status</span> <span class="selector-tag">firewalld</span>      查看服务状态</span><br><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">start</span> <span class="selector-tag">firewalld</span>       启动服务</span><br><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">stop</span> <span class="selector-tag">firewalld</span>        停止服务</span><br><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">restart</span> <span class="selector-tag">firewalld</span>     重启服务</span><br><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">is-enabled</span> <span class="selector-tag">firewalld</span>  查看是否开机启动</span><br><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">enable</span> <span class="selector-tag">firewalld</span>      设置服务开机自启</span><br><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">disable</span> <span class="selector-tag">firewalld</span>     禁止服务开机自启</span><br></pre></td></tr></table></figure><p><strong>@其它命令</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -i /usr/bin/python //查看文件的inode</span><br><span class="line">ln /usr/bin/python ./phln // 创建硬链接（共享文件入口）(硬链接不能跨磁盘)</span><br><span class="line">source ~/.bashrc // 使修改后的bashrc生效</span><br></pre></td></tr></table></figure><p><strong>@一键安装Ubuntu常用库</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">apt</span> <span class="selector-tag">install</span> <span class="selector-tag">man</span> <span class="selector-tag">gcc</span> <span class="selector-tag">make</span> <span class="selector-tag">sudo</span> <span class="selector-tag">lsof</span> <span class="selector-tag">ssh</span> <span class="selector-tag">openssl</span> <span class="selector-tag">tree</span> <span class="selector-tag">vim</span> <span class="selector-tag">dnsutils</span> <span class="selector-tag">iputils</span>‑<span class="selector-tag">ping</span> <span class="selector-tag">net</span>‑</span><br><span class="line"><span class="selector-tag">tools</span> <span class="selector-tag">psmisc</span> <span class="selector-tag">sysstat</span> <span class="selector-tag">curl</span> <span class="selector-tag">telnet</span> <span class="selector-tag">traceroute</span> <span class="selector-tag">wget</span> <span class="selector-tag">libbz2</span>‑<span class="selector-tag">dev</span> <span class="selector-tag">libpcre3</span> <span class="selector-tag">libpcre3</span>‑<span class="selector-tag">dev</span></span><br><span class="line"><span class="selector-tag">libreadline</span>‑<span class="selector-tag">dev</span> <span class="selector-tag">libsqlite3</span>‑<span class="selector-tag">dev</span> <span class="selector-tag">libssl</span>‑<span class="selector-tag">dev</span> <span class="selector-tag">zlib1g</span>‑<span class="selector-tag">dev</span> <span class="selector-tag">git</span> <span class="selector-tag">mysql</span>‑<span class="selector-tag">server</span> <span class="selector-tag">mysql</span>‑<span class="selector-tag">client</span> <span class="selector-tag">zip</span></span><br><span class="line"><span class="selector-tag">p7zip</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01b8c1599e7659a801201794090bfb.jpg@1280w_1l_2o_100sh.webp&quot; width=&quot;688&quot; height=&quot;400&quot; alt=&quot;git&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://lidx.club/categories/Linux/"/>
    
    
      <category term="命令" scheme="https://lidx.club/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Django 博客项目（2）</title>
    <link href="https://lidx.club/2017/05/20/Django%20%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%EF%BC%882%EF%BC%89/"/>
    <id>https://lidx.club/2017/05/20/Django 博客项目（2）/</id>
    <published>2017-05-20T13:24:04.000Z</published>
    <updated>2018-07-19T06:55:50.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-博客项目（2）"><a href="#Django-博客项目（2）" class="headerlink" title="Django 博客项目（2）"></a>Django 博客项目（2）</h1><h3 id="1-支持-Markdown-语法和代码高亮"><a href="#1-支持-Markdown-语法和代码高亮" class="headerlink" title="1. 支持 Markdown 语法和代码高亮"></a>1. 支持 Markdown 语法和代码高亮</h3><h4 id="1-1-安装-Python-Markdown"><a href="#1-1-安装-Python-Markdown" class="headerlink" title="1.1 安装 Python Markdown"></a>1.1 安装 Python Markdown</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install markdown</span><br><span class="line">或者在pycharm中安装markdown</span><br></pre></td></tr></table></figure><h4 id="1-2-在-detail-视图中渲染-Markdown"><a href="#1-2-在-detail-视图中渲染-Markdown" class="headerlink" title="1.2 在 detail 视图中渲染 Markdown"></a>1.2 在 detail 视图中渲染 Markdown</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">将 Markdown 格式的文本渲染成 HTML 文本非常简单，只需调用这个库的 markdown 方法即可。</span><br><span class="line">【blog/views.py】 </span><br><span class="line"><span class="keyword">import</span> markdown </span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, get_object_or_404 </span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Post </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, pk)</span>:</span> </span><br><span class="line">    post = get_object_or_404(Post, pk=pk) </span><br><span class="line">    <span class="comment"># 相当于对post.content多了一个中间步骤，先将 Markdown 格式的文本渲染成 HTML 文本再传递给模板 </span></span><br><span class="line">    post.content = markdown.markdown(post.content, </span><br><span class="line">    extensions=[ </span><br><span class="line">    <span class="string">'markdown.extensions.extra'</span>,</span><br><span class="line">    <span class="string">'markdown.extensions.codehilite'</span>,</span><br><span class="line">    <span class="string">'markdown.extensions.toc'</span>, ]) </span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'blog/detail.html'</span>, context=&#123;<span class="string">'post'</span>: post&#125;)</span><br><span class="line">在admin中发布一篇markdown语法书写的测试博客。</span><br><span class="line"><span class="comment"># 一级标题</span></span><br><span class="line"><span class="comment">## 二级标题</span></span><br><span class="line"><span class="comment">### 三级标题</span></span><br><span class="line"></span><br><span class="line">&gt;引用</span><br><span class="line"></span><br><span class="line">- 无序列表</span><br><span class="line">- 无序列表</span><br><span class="line">- 无序列表</span><br><span class="line"></span><br><span class="line">[百度的链接](http://baidu.com)</span><br><span class="line"></span><br><span class="line">![图片](http://box.bdimg.com/static/fisp_static/common/img/searchbox/logo_news_276_88_1f9876a.png)</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    post = get_object_or_404(Post, pk=pk)</span><br><span class="line">    post.body = markdown.markdown(post.body,</span><br><span class="line">                                  extensions=[</span><br><span class="line">                                      <span class="string">'mardown.extensions.extra'</span>,</span><br><span class="line">                                      <span class="string">'markdown.extensions.codehilite'</span>,</span><br><span class="line">                                      <span class="string">'markdown.extensions.toc'</span>,</span><br><span class="line">                                  ])</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'blog/detail.html'</span>, locals())</span><br></pre></td></tr></table></figure><p>博客发布之后，发现markdown语法并不起作用，给post.body加上safe标签。<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">####1.3 代码高亮</span><br><span class="line">1) 安装 Pygments</span><br><span class="line">激活虚拟环境，pip install pygments，或者在pycharm中安装。</span><br><span class="line">2）引入样式文件</span><br><span class="line">base.html中加入<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&#123;% static 'blog/css/highlights/github.css' %&#125;"</span>&gt;</span></span><br><span class="line">重启服务器看看效果。</span><br><span class="line">###2. 页面侧边栏：使用自定义模板标签</span><br><span class="line">####2.1 使用自定义模板标签</span><br><span class="line">1）在应用目录下新建templatetags目录。</span><br><span class="line">2）在templatetags目录中新建__init__.py文件</span><br><span class="line">3）新建自定义tag代码所在的py文件。比如blog_tags.py</span><br><span class="line">4) 在blog_tags.py中开头写上这两句：</span><br><span class="line">from django import template</span><br><span class="line">register = template.Library()</span><br><span class="line">5）在想要变成自定义tag的函数前加上@register.simple_tag，比如：</span><br><span class="line">@register.simple_tag </span><br><span class="line">def get_recent_posts(num=5): </span><br><span class="line">return Post.objects.all().order_by('-created_time')[:num]</span><br><span class="line">6）在模板中使用自定义tag：</span><br><span class="line">在模板中导入自定义tag文件：&#123;% load blog_tags %&#125;</span><br><span class="line">使用的写法：&#123;% get_recent_posts as recent_post_list %&#125;</span><br><span class="line">####2.2 使用自定义模板标签实现页面侧边栏</span><br><span class="line">```python</span><br><span class="line">from django import template</span><br><span class="line">from ..models import Post, Category</span><br><span class="line"></span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line">#最新文章模板标签</span><br><span class="line">@register.simple_tag</span><br><span class="line">def get_recent_posts(num=5):</span><br><span class="line">    return Post.objects.all().order_by('-created_time')[:num]</span><br><span class="line"></span><br><span class="line">#归档模板标签</span><br><span class="line">@register.simple_tag</span><br><span class="line">def archives():</span><br><span class="line">    return Post.objects.dates('created_time','month',order='DESC')</span><br><span class="line">#分类模板标签</span><br><span class="line">@register.simple_tag</span><br><span class="line">def get_categories():</span><br><span class="line">    return Category.objects.all()</span><br><span class="line">修改base.html</span><br><span class="line">最新文章：</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"widget-title"</span>&gt;</span>最新文章<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            &#123;% get_recent_posts as recent_post_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                &#123;% for post in recent_post_list %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; post.get_absolute_url &#125;&#125;"</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% empty %&#125;</span><br><span class="line">                    暂无文章</span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">归档：</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"widget-title"</span>&gt;</span>归档<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            &#123;% archives as date_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">               &#123;% for date in date_list %&#125;</span><br><span class="line">                   <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; date.year &#125;&#125;年&#123;&#123; date.month &#125;&#125;月<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% empty %&#125;</span><br><span class="line">                   暂无归档</span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">分类：</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"widget-title"</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            &#123;% get_categories as category_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                &#123;% for category in category_list %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; category.name &#125;&#125;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>(13)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% empty %&#125;</span><br><span class="line">                    暂无分类</span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-分类与归档"><a href="#3-分类与归档" class="headerlink" title="3. 分类与归档"></a>3. 分类与归档</h3><h4 id="3-1-归档"><a href="#3-1-归档" class="headerlink" title="3.1 归档"></a>3.1 归档</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">使用filter获取归档数据。blog视图文件中增加如下视图函数：</span><br><span class="line">def archives(request, year, month):</span><br><span class="line">    post_list = Post.objects.filter(created_time__year=year,</span><br><span class="line">                                    created_time__month=month,</span><br><span class="line">                                    ).order_by('-created_time')</span><br><span class="line">    return render(request,'blog/index.html', locals())</span><br><span class="line">blog urls.py中增加下面一行：</span><br><span class="line">url(r'^archives/(?P<span class="tag">&lt;<span class="name">year</span>&gt;</span>[0-9]&#123;4&#125;)/(?P<span class="tag">&lt;<span class="name">month</span>&gt;</span>[0-9]&#123;1,2&#125;)/$', views.archives, name='archives'),</span><br><span class="line">修改base模板中归档部分的超链接</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'blog:archives' date.year date.month %&#125;"</span>&gt;</span>&#123;&#123; date.year &#125;&#125;年&#123;&#123; date.month &#125;&#125;月<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      解决mysql无法使用月份过滤问题：</span><br><span class="line">      下载mysql时区文件：https://dev.mysql.com/downloads/timezones.html</span><br><span class="line">      拷贝到C:\ProgramData\MySQL\MySQL Server 5.7\Data\mysql目录下</span><br><span class="line">      重启mysql</span><br><span class="line">      登录mysql，执行：</span><br><span class="line">      SET GLOBAL time_zone = 'Asia/Shanghai';</span><br><span class="line">      SET SESSION time_zone = 'Asia/Shanghai';</span><br><span class="line">      SELECT @ @global.time_zone , @ @session.time_zone ;</span><br></pre></td></tr></table></figure><h4 id="3-2-分类"><a href="#3-2-分类" class="headerlink" title="3.2 分类"></a>3.2 分类</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">blog视图文件中添加如下视图函数：</span><br><span class="line">def category(request,pk):</span><br><span class="line">    cate = get_object_or_404(Category,pk=pk)</span><br><span class="line">    post_list = Post.objects.filter(category=cate).order_by('-created_time')</span><br><span class="line">    return render(request,'blog/index.html', &#123;'post_list':post_list&#125;)</span><br><span class="line">url中添加如下：</span><br><span class="line">url(r'^category/(?P<span class="tag">&lt;<span class="name">pk</span>&gt;</span>[0-9]+)/$', views.category, name='category'),</span><br><span class="line">base中分类部分的超链接修改如下：</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'blog:category' category.pk %&#125;"</span>&gt;</span>&#123;&#123; category.name &#125;&#125;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>(13)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-评论"><a href="#4-评论" class="headerlink" title="4. 评论"></a>4. 评论</h3><h4 id="4-1-创建评论应用"><a href="#4-1-创建评论应用" class="headerlink" title="4.1 创建评论应用"></a>4.1 创建评论应用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">相对来说，评论其实是另外一个比较独立的功能。Django 提倡，如果功能相对比较独立的话，最好是创建一个应用，把相应的功能代码写到这个应用里。</span><br><span class="line">python manage.py startapp comments</span><br></pre></td></tr></table></figure><h4 id="4-2-设计评论的数据库模型"><a href="#4-2-设计评论的数据库模型" class="headerlink" title="4.2 设计评论的数据库模型"></a>4.2 设计评论的数据库模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    email = models.EmailField(max_length=<span class="number">255</span>)</span><br><span class="line">    url = models.URLField(blank=<span class="keyword">True</span>)</span><br><span class="line">    text = models.TextField()</span><br><span class="line">    created_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    post = models.ForeignKey(<span class="string">'blog.Post'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text[:<span class="number">20</span>]</span><br><span class="line">生成完model后记得执行数据迁移。</span><br></pre></td></tr></table></figure><h4 id="4-3-评论表单设计"><a href="#4-3-评论表单设计" class="headerlink" title="4.3 评论表单设计"></a>4.3 评论表单设计</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在comments app目录下新建forms.py文件，该文件中写入以下代码：</span><br><span class="line">使用modelform</span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Comment</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Comment</span><br><span class="line">        fields = [<span class="string">'name'</span>, <span class="string">'email'</span>, <span class="string">'url'</span>,<span class="string">'text'</span>]</span><br></pre></td></tr></table></figure><h4 id="4-4-评论视图函数"><a href="#4-4-评论视图函数" class="headerlink" title="4.4 评论视图函数"></a>4.4 评论视图函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, get_object_or_404, redirect</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> Post</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Comment</span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> CommentForm</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_comment</span><span class="params">(request, post_pk)</span>:</span></span><br><span class="line">    post = get_object_or_404(Post, pk=post_pk)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        form = CommentForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            comment = form.save(commit=<span class="keyword">False</span>)</span><br><span class="line">            comment.post = post</span><br><span class="line">            comment.save()</span><br><span class="line">            <span class="keyword">return</span> redirect(post)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            comment_list = post.comment_set.all()</span><br><span class="line">            context = &#123;</span><br><span class="line">                <span class="string">'post'</span>:post,</span><br><span class="line">                <span class="string">'form'</span>:form,</span><br><span class="line">                <span class="string">'comment_list'</span>:comment_list</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'blog/detail.html'</span>, context=context)</span><br><span class="line">    <span class="keyword">return</span> redirect(post)</span><br></pre></td></tr></table></figure><h4 id="4-5-绑定-URL"><a href="#4-5-绑定-URL" class="headerlink" title="4.5 绑定 URL"></a>4.5 绑定 URL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app_name = &apos;comments&apos; </span><br><span class="line">urlpatterns = [ url(r&apos;^comment/post/(?P&lt;post_pk&gt;[0-9]+)/$&apos;, views.post_comment, name=&apos;post_comment&apos;), ]</span><br><span class="line">最后别忘了在项目的urls中包含comments的url</span><br><span class="line">url(r&apos;&apos;, include(&apos;comments.urls&apos;)),</span><br></pre></td></tr></table></figure><h4 id="4-6-更新文章详情页面的视图函数"><a href="#4-6-更新文章详情页面的视图函数" class="headerlink" title="4.6 更新文章详情页面的视图函数"></a>4.6 更新文章详情页面的视图函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在detail视图函数中加上这两句，让detail视图函数获取post所属的评论列表。：</span><br><span class="line">form = CommentForm()</span><br><span class="line">comment_list = post.comment_set.all()</span><br></pre></td></tr></table></figure><h4 id="4-7-在前端渲染表单"><a href="#4-7-在前端渲染表单" class="headerlink" title="4.7 在前端渲染表单"></a>4.7 在前端渲染表单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">修改前端评论的form表单部分代码：</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'comments:post_comment' post.pk %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"comment-form"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"&#123;&#123; form.name.id_for_label &#125;&#125;"</span>&gt;</span>名字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            &#123;&#123; form.name &#125;&#125;</span><br><span class="line">            &#123;&#123; form.name.errors &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"&#123;&#123; form.email.id_for_label &#125;&#125;"</span>&gt;</span>邮箱：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            &#123;&#123; form.email &#125;&#125;</span><br><span class="line">            &#123;&#123; form.email.errors &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"&#123;&#123; form.url.id_for_label &#125;&#125;"</span>&gt;</span>网址：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            &#123;&#123; form.url &#125;&#125;</span><br><span class="line">            &#123;&#123; form.url.errors &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"&#123;&#123; form.text.id_for_label &#125;&#125;"</span>&gt;</span>评论：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            &#123;&#123; form.text &#125;&#125;</span><br><span class="line">            &#123;&#123; form.text.errors &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"comment-btn"</span>&gt;</span>发表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="comment">&lt;!-- row --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-显示评论内容"><a href="#4-8-显示评论内容" class="headerlink" title="4.8 显示评论内容"></a>4.8 显示评论内容</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">在detail.html中删掉占位用的评论内容的 HTML 代码，使用如下代码替换：</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"comment-list list-unstyled"</span>&gt;</span></span><br><span class="line">        &#123;% for comment in comment_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"comment-item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"nickname"</span>&gt;</span>&#123;&#123; comment.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">time</span> <span class="attr">class</span>=<span class="string">"submit-date"</span> &gt;</span>&#123;&#123; comment.created_time &#125;&#125;<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">                &#123;&#123; comment.text &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% empty %&#125;</span><br><span class="line">            暂无评论</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-统计文章阅读量"><a href="#5-统计文章阅读量" class="headerlink" title="5. 统计文章阅读量"></a>5. 统计文章阅读量</h3><h4 id="5-1-修改模型"><a href="#5-1-修改模型" class="headerlink" title="5.1 修改模型"></a>5.1 修改模型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1) 增加新字段</span><br><span class="line">Post中增加：</span><br><span class="line">views = models.PositiveIntegerField(default=0)</span><br><span class="line">2）增加模型方法</span><br><span class="line">def increase_views(self): </span><br><span class="line">self.views += 1 </span><br><span class="line">self.save(update_fields=[&apos;views&apos;])</span><br><span class="line">3）迁移数据库</span><br></pre></td></tr></table></figure><h4 id="5-2-修改视图函数"><a href="#5-2-修改视图函数" class="headerlink" title="5.2 修改视图函数"></a>5.2 修改视图函数</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在detail视图函数中，在post = get_object_or_404(Post, pk=pk)后增加一行：</span><br><span class="line">post.increase_views()</span><br></pre></td></tr></table></figure><h4 id="5-3-在模板中显示阅读量"><a href="#5-3-在模板中显示阅读量" class="headerlink" title="5.3 在模板中显示阅读量"></a>5.3 在模板中显示阅读量</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index.html</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"views-count"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; post.get_absolute_url &#125;&#125;"</span>&gt;</span>&#123;&#123; post.views &#125;&#125; 阅读<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">detail.html</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"views-count"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; post.views &#125;&#125; 阅读<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-自动生成文章摘要"><a href="#6-自动生成文章摘要" class="headerlink" title="6 自动生成文章摘要"></a>6 自动生成文章摘要</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">两种方法可以实现自动生成文章摘要。</span><br><span class="line"><span class="number">1</span>）复写 save 方法</span><br><span class="line">通过复写模型的 save 方法，在数据被保存到数据库前，先从 body 字段摘取 N 个字符保存到 excerpt 字段中，从而实现自动摘要的目的。具体代码如下：</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 如果没有填写摘要</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.excerpt:</span><br><span class="line"><span class="comment"># 首先实例化一个 Markdown 类，用于渲染 body 的文本</span></span><br><span class="line">            md = markdown.Markdown(extensions=[</span><br><span class="line">                <span class="string">'markdown.extensions.extra'</span>,</span><br><span class="line">                <span class="string">'markdown.extensions.codehilite'</span>,</span><br><span class="line">            ])</span><br><span class="line"><span class="comment"># 先将 Markdown 文本渲染成 HTML 文本 </span></span><br><span class="line"><span class="comment"># strip_tags 去掉 HTML 文本的全部 HTML 标签</span></span><br><span class="line"><span class="comment"># 从文本摘取前 54 个字符赋给 excerpt</span></span><br><span class="line">            self.excerpt = strip_tags(md.convert(self.content))[:<span class="number">54</span>]</span><br><span class="line"><span class="comment"># 调用父类的 save 方法将数据保存到数据库中</span></span><br><span class="line">        super(Post,self).save(*args, **kwargs)</span><br><span class="line"><span class="number">2</span>）使用 truncatechars 模板过滤器</span><br><span class="line">&lt;p&gt;&#123;&#123; post.content|truncatechars:54 &#125;&#125;...&lt;/p&gt;</span><br><span class="line">不过这种方法的一个缺点就是如果前 <span class="number">54</span> 个字符含有块级 HTML 元素标签的话（比如一段代码块），</span><br><span class="line">会使摘要比较难看。所以推荐使用第一种方法。</span><br></pre></td></tr></table></figure><h3 id="7-将post-detail转换成使用通用类视图"><a href="#7-将post-detail转换成使用通用类视图" class="headerlink" title="7 将post_detail转换成使用通用类视图"></a>7 将post_detail转换成使用通用类视图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">除了从数据库中获取模型列表的数据外，从数据库获取模型的一条记录也是常见的需求。</span><br><span class="line">比如查看某篇文章的详情，就是从数据库中获取这篇文章的记录然后渲染模板。</span><br><span class="line">对于这种类型的需求，Django 提供了一个 DetailView 类视图。</span><br><span class="line">下面将 detail 视图函数转换为等价的类视图 PostDetailView。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostDetailView</span><span class="params">(DetailView)</span>:</span></span><br><span class="line">    model = Post</span><br><span class="line">    template_name = <span class="string">'blog/detail.html'</span></span><br><span class="line">    context_object_name = <span class="string">'post'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 复写get方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># get方法返回的是一个HttpResponse实例</span></span><br><span class="line">        <span class="comment"># 先调用父类的get方法，self.object属性中才会有Post模型的实例。</span></span><br><span class="line">        response = super(PostDetailView,self).get(request, *args, **kwargs)</span><br><span class="line">        <span class="comment"># 文章阅读量+1</span></span><br><span class="line">        <span class="comment"># self.object的值就是被访问的文章对象post</span></span><br><span class="line">        self.object.increase_views()</span><br><span class="line">        <span class="comment"># 视图函数必须返回一个HttpResponse对象</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object</span><span class="params">(self, queryset=None)</span>:</span></span><br><span class="line">        <span class="comment"># 复写get_object方法的目的是因为需要对post的body值进行渲染</span></span><br><span class="line">        post = super(PostDetailView, self).get_object(queryset=<span class="keyword">None</span>)</span><br><span class="line">        post.content = markdown.markdown(post.body,extensions=[</span><br><span class="line">            <span class="string">'markdown.extensions.extra'</span>,</span><br><span class="line">            <span class="string">'markdown.extensions.codehilite'</span>,</span><br><span class="line">            <span class="string">'markdown.extensions.toc'</span></span><br><span class="line">        ])</span><br><span class="line">        <span class="keyword">return</span> post</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 复写get_context_data的目的是因为除了将post传递给模板之外（DetailView已经帮我们做了）</span></span><br><span class="line">        <span class="comment"># 还要把评论表单，post下的评论列表传递给模板。也就是往context中填充内容。</span></span><br><span class="line">        <span class="comment"># 调用父类的get_context_data,先在context中生成self.object即Post的实例对象</span></span><br><span class="line">        context = super(PostDetailView, self).get_context_data(**kwargs)</span><br><span class="line">        form = CommentForm()</span><br><span class="line">        comment_list = self.object.comment_set.all()</span><br><span class="line">        context.update(&#123;</span><br><span class="line">            <span class="string">'form'</span>: form,</span><br><span class="line">            <span class="string">'comment_list'</span>: comment_list</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> context</span><br><span class="line">PostDetailView略复杂，因为原本的detail函数也不简单。下面来详细讲解一下PostDetailView。</span><br><span class="line">复写get方法，对应着 detail 视图函数中将 post 的阅读量 +<span class="number">1</span> 的那部分代码。每次调用视图函数都会执行get方法的代码。</span><br><span class="line">复写get_object方法，对应着 detail 视图函数中根据文章的 id（也就是 pk）获取文章，</span><br><span class="line">然后对文章的 post.body 进行 Markdown 渲染的代码部分。</span><br><span class="line">get_object是默认的查找单个对象的方法，我们修改了默认的行为。</span><br><span class="line">最后我们复写了get_context_data方法。这部分对应着 detail 视图函数中</span><br><span class="line">生成评论表单、获取 post 下的评论列表的代码部分。</span><br><span class="line">这个方法返回的值是一个字典，这个字典就是模板变量字典，最终会被传递给模板。</span><br><span class="line">简单来说，如果我们想要每次调用detail函数的时候做一些事情，就复写get方法。</span><br><span class="line">如果想要修改默认的查询行为，复写get_object方法。</span><br><span class="line">如果想要添加额外的context变量，复写get_context_data方法。</span><br></pre></td></tr></table></figure><h3 id="8-统计各个分类下的文章数"><a href="#8-统计各个分类下的文章数" class="headerlink" title="8 统计各个分类下的文章数"></a>8 统计各个分类下的文章数</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">最优雅的方式就是使用 Django 模型管理器的 annotate 方法。</span><br><span class="line">在blog_tags.py中</span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_categories</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Category.objects.annotate(num_posts=Count(<span class="string">'post'</span>)).filter(num_posts_gt=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">在模板中引用新增的属性</span><br><span class="line">&lt;span class="post-count"&gt;(&#123;&#123; category.num__posts &#125;&#125;)&lt;/span&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-博客项目（2）&quot;&gt;&lt;a href=&quot;#Django-博客项目（2）&quot; class=&quot;headerlink&quot; title=&quot;Django 博客项目（2）&quot;&gt;&lt;/a&gt;Django 博客项目（2）&lt;/h1&gt;&lt;h3 id=&quot;1-支持-Markdown-语法和
      
    
    </summary>
    
      <category term="Django" scheme="https://lidx.club/categories/Django/"/>
    
    
      <category term="博客" scheme="https://lidx.club/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
